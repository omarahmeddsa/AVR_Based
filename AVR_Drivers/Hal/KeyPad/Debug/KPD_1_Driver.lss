
KPD_1_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000023c0  00002434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001af4  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c92  00000000  00000000  00003f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000079ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000088d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c1 10 	call	0x2182	; 0x2182 <main>
      7a:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e7       	ldi	r26, 0x71	; 113
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e7       	ldi	r24, 0x71	; 113
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Gobal_interrput_Enbale>:
#include "STD_TYPES.h"
#include "Dio_Interface.h"
#include "Dio_Private.h"
#include "Dio_Config.h"

void Gobal_interrput_Enbale (void ){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,GobalInterrput_Pin);
     b3e:	a5 e0       	ldi	r26, 0x05	; 5
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e5 e0       	ldi	r30, 0x05	; 5
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	8c 93       	st	X, r24

}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <Gobal_interrput_Disable>:

void Gobal_interrput_Disable (void ){
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,GobalInterrput_Pin);
     b5a:	a5 e0       	ldi	r26, 0x05	; 5
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e5 e0       	ldi	r30, 0x05	; 5
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	8c 93       	st	X, r24

}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <Dio_u8_SetPortDir>:

void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <Dio_u8_SetPortDir+0x6>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <Dio_u8_SetPortDir+0x8>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	84 30       	cpi	r24, 0x04	; 4
     b82:	90 f5       	brcc	.+100    	; 0xbe8 <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	3c 83       	std	Y+4, r19	; 0x04
     b8c:	2b 83       	std	Y+3, r18	; 0x03
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	d1 f0       	breq	.+52     	; 0xbcc <Dio_u8_SetPortDir+0x5e>
     b98:	2b 81       	ldd	r18, Y+3	; 0x03
     b9a:	3c 81       	ldd	r19, Y+4	; 0x04
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	2c f4       	brge	.+10     	; 0xbac <Dio_u8_SetPortDir+0x3e>
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <Dio_u8_SetPortDir+0x54>
     baa:	1e c0       	rjmp	.+60     	; 0xbe8 <Dio_u8_SetPortDir+0x7a>
     bac:	2b 81       	ldd	r18, Y+3	; 0x03
     bae:	3c 81       	ldd	r19, Y+4	; 0x04
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <Dio_u8_SetPortDir+0x68>
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	91 05       	cpc	r25, r1
     bbe:	81 f0       	breq	.+32     	; 0xbe0 <Dio_u8_SetPortDir+0x72>
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
     bc2:	ea e3       	ldi	r30, 0x3A	; 58
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	80 83       	st	Z, r24
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
     bcc:	e7 e3       	ldi	r30, 0x37	; 55
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	80 83       	st	Z, r24
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
     bd6:	e4 e3       	ldi	r30, 0x34	; 52
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	80 83       	st	Z, r24
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
     be0:	e1 e3       	ldi	r30, 0x31	; 49
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	80 83       	st	Z, r24
			break;
		}
	}
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <Dio_u8_SetPortValue+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <Dio_u8_SetPortValue+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	90 f5       	brcc	.+100    	; 0xc70 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3c 83       	std	Y+4, r19	; 0x04
     c14:	2b 83       	std	Y+3, r18	; 0x03
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	d1 f0       	breq	.+52     	; 0xc54 <Dio_u8_SetPortValue+0x5e>
     c20:	2b 81       	ldd	r18, Y+3	; 0x03
     c22:	3c 81       	ldd	r19, Y+4	; 0x04
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <Dio_u8_SetPortValue+0x3e>
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f0       	breq	.+24     	; 0xc4a <Dio_u8_SetPortValue+0x54>
     c32:	1e c0       	rjmp	.+60     	; 0xc70 <Dio_u8_SetPortValue+0x7a>
     c34:	2b 81       	ldd	r18, Y+3	; 0x03
     c36:	3c 81       	ldd	r19, Y+4	; 0x04
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	81 f0       	breq	.+32     	; 0xc5e <Dio_u8_SetPortValue+0x68>
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	81 f0       	breq	.+32     	; 0xc68 <Dio_u8_SetPortValue+0x72>
     c48:	13 c0       	rjmp	.+38     	; 0xc70 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
     c4a:	eb e3       	ldi	r30, 0x3B	; 59
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	80 83       	st	Z, r24
     c52:	0e c0       	rjmp	.+28     	; 0xc70 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
     c54:	e8 e3       	ldi	r30, 0x38	; 56
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	80 83       	st	Z, r24
     c5c:	09 c0       	rjmp	.+18     	; 0xc70 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
     c5e:	e5 e3       	ldi	r30, 0x35	; 53
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	80 83       	st	Z, r24
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
     c68:	e2 e3       	ldi	r30, 0x32	; 50
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	80 83       	st	Z, r24
			break;
		}
	}
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <Dio_u8_GetportValue+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <Dio_u8_GetportValue+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	84 30       	cpi	r24, 0x04	; 4
     c90:	90 f5       	brcc	.+100    	; 0xcf6 <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	3c 83       	std	Y+4, r19	; 0x04
     c9a:	2b 83       	std	Y+3, r18	; 0x03
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	91 05       	cpc	r25, r1
     ca4:	d1 f0       	breq	.+52     	; 0xcda <Dio_u8_GetportValue+0x5c>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	31 05       	cpc	r19, r1
     cae:	2c f4       	brge	.+10     	; 0xcba <Dio_u8_GetportValue+0x3c>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	61 f0       	breq	.+24     	; 0xcd0 <Dio_u8_GetportValue+0x52>
     cb8:	1e c0       	rjmp	.+60     	; 0xcf6 <Dio_u8_GetportValue+0x78>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	31 05       	cpc	r19, r1
     cc2:	81 f0       	breq	.+32     	; 0xce4 <Dio_u8_GetportValue+0x66>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	91 05       	cpc	r25, r1
     ccc:	81 f0       	breq	.+32     	; 0xcee <Dio_u8_GetportValue+0x70>
     cce:	13 c0       	rjmp	.+38     	; 0xcf6 <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
     cd0:	eb e3       	ldi	r30, 0x3B	; 59
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
     cda:	e8 e3       	ldi	r30, 0x38	; 56
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
     cee:	e2 e3       	ldi	r30, 0x32	; 50
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <Dio_u8_SetPinDir+0x6>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <Dio_u8_SetPinDir+0x8>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	6a 83       	std	Y+2, r22	; 0x02
     d18:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	84 30       	cpi	r24, 0x04	; 4
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <Dio_u8_SetPinDir+0x1c>
     d20:	d1 c0       	rjmp	.+418    	; 0xec4 <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <Dio_u8_SetPinDir+0x32>
     d36:	43 c0       	rjmp	.+134    	; 0xdbe <Dio_u8_SetPinDir+0xb8>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <Dio_u8_SetPinDir+0x46>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <Dio_u8_SetPinDir+0x60>
     d4a:	bc c0       	rjmp	.+376    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
     d4c:	2c 81       	ldd	r18, Y+4	; 0x04
     d4e:	3d 81       	ldd	r19, Y+5	; 0x05
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <Dio_u8_SetPinDir+0x52>
     d56:	5f c0       	rjmp	.+190    	; 0xe16 <Dio_u8_SetPinDir+0x110>
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <Dio_u8_SetPinDir+0x5e>
     d62:	85 c0       	rjmp	.+266    	; 0xe6e <Dio_u8_SetPinDir+0x168>
     d64:	af c0       	rjmp	.+350    	; 0xec4 <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <Dio_u8_SetPinDir+0x8e>
     d6c:	aa e3       	ldi	r26, 0x3A	; 58
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <Dio_u8_SetPinDir+0x84>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <Dio_u8_SetPinDir+0x80>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	98 c0       	rjmp	.+304    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
     d94:	aa e3       	ldi	r26, 0x3A	; 58
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ea e3       	ldi	r30, 0x3A	; 58
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <Dio_u8_SetPinDir+0xac>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <Dio_u8_SetPinDir+0xa8>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	83 c0       	rjmp	.+262    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	a1 f4       	brne	.+40     	; 0xdec <Dio_u8_SetPinDir+0xe6>
     dc4:	a7 e3       	ldi	r26, 0x37	; 55
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e3       	ldi	r30, 0x37	; 55
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <Dio_u8_SetPinDir+0xdc>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <Dio_u8_SetPinDir+0xd8>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	6c c0       	rjmp	.+216    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
     dec:	a7 e3       	ldi	r26, 0x37	; 55
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <Dio_u8_SetPinDir+0x104>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <Dio_u8_SetPinDir+0x100>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	57 c0       	rjmp	.+174    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <Dio_u8_SetPinDir+0x13e>
     e1c:	a4 e3       	ldi	r26, 0x34	; 52
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e4 e3       	ldi	r30, 0x34	; 52
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <Dio_u8_SetPinDir+0x134>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <Dio_u8_SetPinDir+0x130>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	40 c0       	rjmp	.+128    	; 0xec4 <Dio_u8_SetPinDir+0x1be>
     e44:	a4 e3       	ldi	r26, 0x34	; 52
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e4 e3       	ldi	r30, 0x34	; 52
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <Dio_u8_SetPinDir+0x15c>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <Dio_u8_SetPinDir+0x158>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	2b c0       	rjmp	.+86     	; 0xec4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	a1 f4       	brne	.+40     	; 0xe9c <Dio_u8_SetPinDir+0x196>
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <Dio_u8_SetPinDir+0x18c>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <Dio_u8_SetPinDir+0x188>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <Dio_u8_SetPinDir+0x1be>
     e9c:	a1 e3       	ldi	r26, 0x31	; 49
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e3       	ldi	r30, 0x31	; 49
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <Dio_u8_SetPinDir+0x1b4>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <Dio_u8_SetPinDir+0x1b0>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
			break;
		}
	}
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Dio_u8_SetPinVal+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <Dio_u8_SetPinVal+0x8>
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	6a 83       	std	Y+2, r22	; 0x02
     ee6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	08 f0       	brcs	.+2      	; 0xef0 <Dio_u8_SetPinVal+0x1c>
     eee:	d1 c0       	rjmp	.+418    	; 0x1092 <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3d 83       	std	Y+5, r19	; 0x05
     ef8:	2c 83       	std	Y+4, r18	; 0x04
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <Dio_u8_SetPinVal+0x32>
     f04:	43 c0       	rjmp	.+134    	; 0xf8c <Dio_u8_SetPinVal+0xb8>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	2c f4       	brge	.+10     	; 0xf1a <Dio_u8_SetPinVal+0x46>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	71 f0       	breq	.+28     	; 0xf34 <Dio_u8_SetPinVal+0x60>
     f18:	bc c0       	rjmp	.+376    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
     f1a:	2c 81       	ldd	r18, Y+4	; 0x04
     f1c:	3d 81       	ldd	r19, Y+5	; 0x05
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <Dio_u8_SetPinVal+0x52>
     f24:	5f c0       	rjmp	.+190    	; 0xfe4 <Dio_u8_SetPinVal+0x110>
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <Dio_u8_SetPinVal+0x5e>
     f30:	85 c0       	rjmp	.+266    	; 0x103c <Dio_u8_SetPinVal+0x168>
     f32:	af c0       	rjmp	.+350    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <Dio_u8_SetPinVal+0x8e>
     f3a:	ab e3       	ldi	r26, 0x3B	; 59
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e3       	ldi	r30, 0x3B	; 59
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <Dio_u8_SetPinVal+0x84>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <Dio_u8_SetPinVal+0x80>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	98 c0       	rjmp	.+304    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
     f62:	ab e3       	ldi	r26, 0x3B	; 59
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Dio_u8_SetPinVal+0xac>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <Dio_u8_SetPinVal+0xa8>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	83 c0       	rjmp	.+262    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	a1 f4       	brne	.+40     	; 0xfba <Dio_u8_SetPinVal+0xe6>
     f92:	a8 e3       	ldi	r26, 0x38	; 56
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e8 e3       	ldi	r30, 0x38	; 56
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <Dio_u8_SetPinVal+0xdc>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <Dio_u8_SetPinVal+0xd8>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	6c c0       	rjmp	.+216    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <Dio_u8_SetPinVal+0x104>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <Dio_u8_SetPinVal+0x100>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	57 c0       	rjmp	.+174    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <Dio_u8_SetPinVal+0x13e>
     fea:	a5 e3       	ldi	r26, 0x35	; 53
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e3       	ldi	r30, 0x35	; 53
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <Dio_u8_SetPinVal+0x134>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <Dio_u8_SetPinVal+0x130>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	40 c0       	rjmp	.+128    	; 0x1092 <Dio_u8_SetPinVal+0x1be>
    1012:	a5 e3       	ldi	r26, 0x35	; 53
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e3       	ldi	r30, 0x35	; 53
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <Dio_u8_SetPinVal+0x15c>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <Dio_u8_SetPinVal+0x158>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	2b c0       	rjmp	.+86     	; 0x1092 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	a1 f4       	brne	.+40     	; 0x106a <Dio_u8_SetPinVal+0x196>
    1042:	a2 e3       	ldi	r26, 0x32	; 50
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e2 e3       	ldi	r30, 0x32	; 50
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <Dio_u8_SetPinVal+0x18c>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <Dio_u8_SetPinVal+0x188>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <Dio_u8_SetPinVal+0x1be>
    106a:	a2 e3       	ldi	r26, 0x32	; 50
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e2 e3       	ldi	r30, 0x32	; 50
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <Dio_u8_SetPinVal+0x1b4>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <Dio_u8_SetPinVal+0x1b0>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <Dio_u8_GetPinVal+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <Dio_u8_GetPinVal+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <Dio_u8_GetPinVal+0x1a>
    10ba:	67 c0       	rjmp	.+206    	; 0x118a <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3d 83       	std	Y+5, r19	; 0x05
    10c4:	2c 83       	std	Y+4, r18	; 0x04
    10c6:	4c 81       	ldd	r20, Y+4	; 0x04
    10c8:	5d 81       	ldd	r21, Y+5	; 0x05
    10ca:	41 30       	cpi	r20, 0x01	; 1
    10cc:	51 05       	cpc	r21, r1
    10ce:	41 f1       	breq	.+80     	; 0x1120 <Dio_u8_GetPinVal+0x7e>
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	91 05       	cpc	r25, r1
    10d8:	34 f4       	brge	.+12     	; 0x10e6 <Dio_u8_GetPinVal+0x44>
    10da:	2c 81       	ldd	r18, Y+4	; 0x04
    10dc:	3d 81       	ldd	r19, Y+5	; 0x05
    10de:	21 15       	cp	r18, r1
    10e0:	31 05       	cpc	r19, r1
    10e2:	61 f0       	breq	.+24     	; 0x10fc <Dio_u8_GetPinVal+0x5a>
    10e4:	52 c0       	rjmp	.+164    	; 0x118a <Dio_u8_GetPinVal+0xe8>
    10e6:	4c 81       	ldd	r20, Y+4	; 0x04
    10e8:	5d 81       	ldd	r21, Y+5	; 0x05
    10ea:	42 30       	cpi	r20, 0x02	; 2
    10ec:	51 05       	cpc	r21, r1
    10ee:	51 f1       	breq	.+84     	; 0x1144 <Dio_u8_GetPinVal+0xa2>
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	b9 f1       	breq	.+110    	; 0x1168 <Dio_u8_GetPinVal+0xc6>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
    10fc:	e9 e3       	ldi	r30, 0x39	; 57
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <Dio_u8_GetPinVal+0x72>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <Dio_u8_GetPinVal+0x6e>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	35 c0       	rjmp	.+106    	; 0x118a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
    1120:	e6 e3       	ldi	r30, 0x36	; 54
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Dio_u8_GetPinVal+0x96>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Dio_u8_GetPinVal+0x92>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	23 c0       	rjmp	.+70     	; 0x118a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
    1144:	e3 e3       	ldi	r30, 0x33	; 51
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <Dio_u8_GetPinVal+0xba>
    1158:	55 95       	asr	r21
    115a:	47 95       	ror	r20
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <Dio_u8_GetPinVal+0xb6>
    1160:	ca 01       	movw	r24, r20
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	11 c0       	rjmp	.+34     	; 0x118a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
    1168:	e0 e3       	ldi	r30, 0x30	; 48
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <Dio_u8_GetPinVal+0xde>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <Dio_u8_GetPinVal+0xda>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <Dio_u8_GetPortDir+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <Dio_u8_GetPortDir+0x8>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	90 f5       	brcc	.+100    	; 0x1214 <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3c 83       	std	Y+4, r19	; 0x04
    11b8:	2b 83       	std	Y+3, r18	; 0x03
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	d1 f0       	breq	.+52     	; 0x11f8 <Dio_u8_GetPortDir+0x5c>
    11c4:	2b 81       	ldd	r18, Y+3	; 0x03
    11c6:	3c 81       	ldd	r19, Y+4	; 0x04
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <Dio_u8_GetPortDir+0x3c>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	61 f0       	breq	.+24     	; 0x11ee <Dio_u8_GetPortDir+0x52>
    11d6:	1e c0       	rjmp	.+60     	; 0x1214 <Dio_u8_GetPortDir+0x78>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <Dio_u8_GetPortDir+0x66>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	81 f0       	breq	.+32     	; 0x120c <Dio_u8_GetPortDir+0x70>
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
    11ee:	ea e3       	ldi	r30, 0x3A	; 58
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
    11f8:	e7 e3       	ldi	r30, 0x37	; 55
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
    1202:	e4 e3       	ldi	r30, 0x34	; 52
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
    120c:	e1 e3       	ldi	r30, 0x31	; 49
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <Dio_u8_GetPinDir+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <Dio_u8_GetPinDir+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	08 f0       	brcs	.+2      	; 0x123e <Dio_u8_GetPinDir+0x1a>
    123c:	67 c0       	rjmp	.+206    	; 0x130c <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3d 83       	std	Y+5, r19	; 0x05
    1246:	2c 83       	std	Y+4, r18	; 0x04
    1248:	4c 81       	ldd	r20, Y+4	; 0x04
    124a:	5d 81       	ldd	r21, Y+5	; 0x05
    124c:	41 30       	cpi	r20, 0x01	; 1
    124e:	51 05       	cpc	r21, r1
    1250:	41 f1       	breq	.+80     	; 0x12a2 <Dio_u8_GetPinDir+0x7e>
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 05       	cpc	r25, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <Dio_u8_GetPinDir+0x44>
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	61 f0       	breq	.+24     	; 0x127e <Dio_u8_GetPinDir+0x5a>
    1266:	52 c0       	rjmp	.+164    	; 0x130c <Dio_u8_GetPinDir+0xe8>
    1268:	4c 81       	ldd	r20, Y+4	; 0x04
    126a:	5d 81       	ldd	r21, Y+5	; 0x05
    126c:	42 30       	cpi	r20, 0x02	; 2
    126e:	51 05       	cpc	r21, r1
    1270:	51 f1       	breq	.+84     	; 0x12c6 <Dio_u8_GetPinDir+0xa2>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	b9 f1       	breq	.+110    	; 0x12ea <Dio_u8_GetPinDir+0xc6>
    127c:	47 c0       	rjmp	.+142    	; 0x130c <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <Dio_u8_GetPinDir+0x72>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <Dio_u8_GetPinDir+0x6e>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	35 c0       	rjmp	.+106    	; 0x130c <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
    12a2:	e7 e3       	ldi	r30, 0x37	; 55
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <Dio_u8_GetPinDir+0x96>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <Dio_u8_GetPinDir+0x92>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	23 c0       	rjmp	.+70     	; 0x130c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
    12c6:	e4 e3       	ldi	r30, 0x34	; 52
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <Dio_u8_GetPinDir+0xba>
    12da:	55 95       	asr	r21
    12dc:	47 95       	ror	r20
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <Dio_u8_GetPinDir+0xb6>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
    12ea:	e1 e3       	ldi	r30, 0x31	; 49
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <Dio_u8_GetPinDir+0xde>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <Dio_u8_GetPinDir+0xda>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
    130c:	80 e0       	ldi	r24, 0x00	; 0
	}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <KPD_Init>:
						   {'4','5','6','*'}, /* Row1 */
						   {'1','2','3','-'}, /* Row2 */
						   {'?','0','=','+'}  /* Row3 */};


void KPD_Init (void ) {
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62

	Dio_u8_SetPinDir(KPD_PORT, KPD_Row0, Dio_PinInput);
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row1, Dio_PinInput);
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row2, Dio_PinInput);
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row3, Dio_PinInput);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	63 e0       	ldi	r22, 0x03	; 3
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>

	Dio_u8_SetPinVal(KPD_PORT, KPD_Row0, Dio_PinHigh);
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row1, Dio_PinHigh);
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row2, Dio_PinHigh);
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	62 e0       	ldi	r22, 0x02	; 2
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row3, Dio_PinHigh);
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinDir(KPD_PORT, KPD_Col0, Dio_PinOutput);
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	64 e0       	ldi	r22, 0x04	; 4
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col1, Dio_PinOutput);
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	65 e0       	ldi	r22, 0x05	; 5
    1384:	41 e0       	ldi	r20, 0x01	; 1
    1386:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col2, Dio_PinOutput);
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	66 e0       	ldi	r22, 0x06	; 6
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col3, Dio_PinOutput);
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	67 e0       	ldi	r22, 0x07	; 7
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>

	Dio_u8_SetPinVal(KPD_PORT, KPD_Col0, Dio_PinHigh);
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	64 e0       	ldi	r22, 0x04	; 4
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col1, Dio_PinHigh);
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	65 e0       	ldi	r22, 0x05	; 5
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col2, Dio_PinHigh);
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	66 e0       	ldi	r22, 0x06	; 6
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col3, Dio_PinHigh);
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	67 e0       	ldi	r22, 0x07	; 7
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

}
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <KPD_PRESSED>:

u8 KPD_PRESSED (void ) {
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	62 97       	sbiw	r28, 0x12	; 18
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61

	u8 Loc_Returndata = '\0';
    13e0:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Loc_Getpressed ;
	u8 Row_Count ;
	u8 Col_count ;

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){
    13e2:	84 e0       	ldi	r24, 0x04	; 4
    13e4:	8f 87       	std	Y+15, r24	; 0x0f
    13e6:	bd c0       	rjmp	.+378    	; 0x1562 <KPD_PRESSED+0x196>

		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinLow);
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

		for (Row_Count = KPD_ROW_INIT ; Row_Count < KPD_ROW_END +1 ; Row_Count ++ ){
    13f2:	18 8a       	std	Y+16, r1	; 0x10
    13f4:	aa c0       	rjmp	.+340    	; 0x154a <KPD_PRESSED+0x17e>


			Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	68 89       	ldd	r22, Y+16	; 0x10
    13fa:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Dio_u8_GetPinVal>
    13fe:	89 8b       	std	Y+17, r24	; 0x11

			if (Loc_Getpressed == 0){
    1400:	89 89       	ldd	r24, Y+17	; 0x11
    1402:	88 23       	and	r24, r24
    1404:	09 f0       	breq	.+2      	; 0x1408 <KPD_PRESSED+0x3c>
    1406:	9e c0       	rjmp	.+316    	; 0x1544 <KPD_PRESSED+0x178>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a8 e4       	ldi	r26, 0x48	; 72
    140e:	b2 e4       	ldi	r27, 0x42	; 66
    1410:	8b 87       	std	Y+11, r24	; 0x0b
    1412:	9c 87       	std	Y+12, r25	; 0x0c
    1414:	ad 87       	std	Y+13, r26	; 0x0d
    1416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1418:	6b 85       	ldd	r22, Y+11	; 0x0b
    141a:	7c 85       	ldd	r23, Y+12	; 0x0c
    141c:	8d 85       	ldd	r24, Y+13	; 0x0d
    141e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a ef       	ldi	r20, 0xFA	; 250
    1426:	54 e4       	ldi	r21, 0x44	; 68
    1428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	8f 83       	std	Y+7, r24	; 0x07
    1432:	98 87       	std	Y+8, r25	; 0x08
    1434:	a9 87       	std	Y+9, r26	; 0x09
    1436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e8       	ldi	r20, 0x80	; 128
    1446:	5f e3       	ldi	r21, 0x3F	; 63
    1448:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    144c:	88 23       	and	r24, r24
    144e:	2c f4       	brge	.+10     	; 0x145a <KPD_PRESSED+0x8e>
		__ticks = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <KPD_PRESSED+0x10c>
	else if (__tmp > 65535)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	57 e4       	ldi	r21, 0x47	; 71
    146a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    146e:	18 16       	cp	r1, r24
    1470:	4c f5       	brge	.+82     	; 0x14c4 <KPD_PRESSED+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <KPD_PRESSED+0xee>
    149c:	88 ec       	ldi	r24, 0xC8	; 200
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <KPD_PRESSED+0xdc>
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	69 f7       	brne	.-38     	; 0x149c <KPD_PRESSED+0xd0>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <KPD_PRESSED+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <KPD_PRESSED+0x118>
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	68 89       	ldd	r22, Y+16	; 0x10
    14f0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Dio_u8_GetPinVal>
    14f4:	89 8b       	std	Y+17, r24	; 0x11
				if (Loc_Getpressed == 0){
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	88 23       	and	r24, r24
    14fa:	a9 f4       	brne	.+42     	; 0x1526 <KPD_PRESSED+0x15a>
					Loc_Returndata = KPD_u8Buttons [Row_Count - KPD_ROW_INIT][Col_count - KPD_COL_INIT];
    14fc:	88 89       	ldd	r24, Y+16	; 0x10
    14fe:	48 2f       	mov	r20, r24
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 01       	movw	r18, r24
    150a:	24 50       	subi	r18, 0x04	; 4
    150c:	30 40       	sbci	r19, 0x00	; 0
    150e:	ca 01       	movw	r24, r20
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	82 0f       	add	r24, r18
    151a:	93 1f       	adc	r25, r19
    151c:	fc 01       	movw	r30, r24
    151e:	e7 58       	subi	r30, 0x87	; 135
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	8a 8b       	std	Y+18, r24	; 0x12
				}
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	68 89       	ldd	r22, Y+16	; 0x10
    152a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Dio_u8_GetPinVal>
    152e:	89 8b       	std	Y+17, r24	; 0x11
    1530:	05 c0       	rjmp	.+10     	; 0x153c <KPD_PRESSED+0x170>
				while (Dio_PinLow == Loc_Getpressed){
					Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	68 89       	ldd	r22, Y+16	; 0x10
    1536:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Dio_u8_GetPinVal>
    153a:	89 8b       	std	Y+17, r24	; 0x11
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				if (Loc_Getpressed == 0){
					Loc_Returndata = KPD_u8Buttons [Row_Count - KPD_ROW_INIT][Col_count - KPD_COL_INIT];
				}
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				while (Dio_PinLow == Loc_Getpressed){
    153c:	89 89       	ldd	r24, Y+17	; 0x11
    153e:	88 23       	and	r24, r24
    1540:	c1 f3       	breq	.-16     	; 0x1532 <KPD_PRESSED+0x166>
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <KPD_PRESSED+0x186>

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){

		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinLow);

		for (Row_Count = KPD_ROW_INIT ; Row_Count < KPD_ROW_END +1 ; Row_Count ++ ){
    1544:	88 89       	ldd	r24, Y+16	; 0x10
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	88 8b       	std	Y+16, r24	; 0x10
    154a:	88 89       	ldd	r24, Y+16	; 0x10
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	08 f4       	brcc	.+2      	; 0x1552 <KPD_PRESSED+0x186>
    1550:	52 cf       	rjmp	.-348    	; 0x13f6 <KPD_PRESSED+0x2a>
					Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				}
				break ;
			}
		}
		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinHigh);
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	6f 85       	ldd	r22, Y+15	; 0x0f
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	u8 Loc_Returndata = '\0';
	u8 Loc_Getpressed ;
	u8 Row_Count ;
	u8 Col_count ;

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	8f 87       	std	Y+15, r24	; 0x0f
    1562:	8f 85       	ldd	r24, Y+15	; 0x0f
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	08 f4       	brcc	.+2      	; 0x156a <KPD_PRESSED+0x19e>
    1568:	3f cf       	rjmp	.-386    	; 0x13e8 <KPD_PRESSED+0x1c>
			}
		}
		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinHigh);

	}
	return Loc_Returndata;
    156a:	8a 89       	ldd	r24, Y+18	; 0x12



}
    156c:	62 96       	adiw	r28, 0x12	; 18
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <LCD_Send_FallingEdge>:
#include "Dio_Interface.h"
#include "LCD_Interface.h"
#include "LCD_Config.h"
#include "avr/delay.h"

void LCD_Send_FallingEdge () {
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	6c 97       	sbiw	r28, 0x1c	; 28
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinHigh);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	66 e0       	ldi	r22, 0x06	; 6
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e4       	ldi	r27, 0x40	; 64
    15a4:	89 8f       	std	Y+25, r24	; 0x19
    15a6:	9a 8f       	std	Y+26, r25	; 0x1a
    15a8:	ab 8f       	std	Y+27, r26	; 0x1b
    15aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	69 8d       	ldd	r22, Y+25	; 0x19
    15ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a ef       	ldi	r20, 0xFA	; 250
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8d 8b       	std	Y+21, r24	; 0x15
    15c6:	9e 8b       	std	Y+22, r25	; 0x16
    15c8:	af 8b       	std	Y+23, r26	; 0x17
    15ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <LCD_Send_FallingEdge+0x70>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <LCD_Send_FallingEdge+0xee>
	else if (__tmp > 65535)
    15ee:	6d 89       	ldd	r22, Y+21	; 0x15
    15f0:	7e 89       	ldd	r23, Y+22	; 0x16
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <LCD_Send_FallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9c 8b       	std	Y+20, r25	; 0x14
    162c:	8b 8b       	std	Y+19, r24	; 0x13
    162e:	0f c0       	rjmp	.+30     	; 0x164e <LCD_Send_FallingEdge+0xd0>
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9a 8b       	std	Y+18, r25	; 0x12
    1636:	89 8b       	std	Y+17, r24	; 0x11
    1638:	89 89       	ldd	r24, Y+17	; 0x11
    163a:	9a 89       	ldd	r25, Y+18	; 0x12
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_Send_FallingEdge+0xbe>
    1640:	9a 8b       	std	Y+18, r25	; 0x12
    1642:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	8b 89       	ldd	r24, Y+19	; 0x13
    1646:	9c 89       	ldd	r25, Y+20	; 0x14
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <LCD_Send_FallingEdge+0xb2>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <LCD_Send_FallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6d 89       	ldd	r22, Y+21	; 0x15
    165a:	7e 89       	ldd	r23, Y+22	; 0x16
    165c:	8f 89       	ldd	r24, Y+23	; 0x17
    165e:	98 8d       	ldd	r25, Y+24	; 0x18
    1660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	8b 89       	ldd	r24, Y+19	; 0x13
    166e:	9c 89       	ldd	r25, Y+20	; 0x14
    1670:	98 8b       	std	Y+16, r25	; 0x10
    1672:	8f 87       	std	Y+15, r24	; 0x0f
    1674:	8f 85       	ldd	r24, Y+15	; 0x0f
    1676:	98 89       	ldd	r25, Y+16	; 0x10
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_Send_FallingEdge+0xfa>
    167c:	98 8b       	std	Y+16, r25	; 0x10
    167e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinLow);
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	66 e0       	ldi	r22, 0x06	; 6
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e4       	ldi	r27, 0x40	; 64
    1692:	8b 87       	std	Y+11, r24	; 0x0b
    1694:	9c 87       	std	Y+12, r25	; 0x0c
    1696:	ad 87       	std	Y+13, r26	; 0x0d
    1698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a ef       	ldi	r20, 0xFA	; 250
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8f 83       	std	Y+7, r24	; 0x07
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	a9 87       	std	Y+9, r26	; 0x09
    16b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <LCD_Send_FallingEdge+0x15e>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	3f c0       	rjmp	.+126    	; 0x175a <LCD_Send_FallingEdge+0x1dc>
	else if (__tmp > 65535)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <LCD_Send_FallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	0f c0       	rjmp	.+30     	; 0x173c <LCD_Send_FallingEdge+0x1be>
    171e:	88 ec       	ldi	r24, 0xC8	; 200
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_Send_FallingEdge+0x1ac>
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <LCD_Send_FallingEdge+0x1a0>
    1744:	14 c0       	rjmp	.+40     	; 0x176e <LCD_Send_FallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_Send_FallingEdge+0x1e8>
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    176e:	6c 96       	adiw	r28, 0x1c	; 28
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <LCD_Send_Data>:



void LCD_Send_Data(u8 Data ){
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinHigh);
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	64 e0       	ldi	r22, 0x04	; 4
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	65 e0       	ldi	r22, 0x05	; 5
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Data,4));
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	82 95       	swap	r24
    17a4:	8f 70       	andi	r24, 0x0F	; 15
    17a6:	98 2f       	mov	r25, r24
    17a8:	91 70       	andi	r25, 0x01	; 1
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	49 2f       	mov	r20, r25
    17b0:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Data,5));
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	82 95       	swap	r24
    17b8:	86 95       	lsr	r24
    17ba:	87 70       	andi	r24, 0x07	; 7
    17bc:	98 2f       	mov	r25, r24
    17be:	91 70       	andi	r25, 0x01	; 1
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	49 2f       	mov	r20, r25
    17c6:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Data,6));
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	82 95       	swap	r24
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	83 70       	andi	r24, 0x03	; 3
    17d4:	98 2f       	mov	r25, r24
    17d6:	91 70       	andi	r25, 0x01	; 1
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	62 e0       	ldi	r22, 0x02	; 2
    17dc:	49 2f       	mov	r20, r25
    17de:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Data,7));
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	98 2f       	mov	r25, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	99 27       	eor	r25, r25
    17ea:	99 1f       	adc	r25, r25
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	63 e0       	ldi	r22, 0x03	; 3
    17f0:	49 2f       	mov	r20, r25
    17f2:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    17f6:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_Send_FallingEdge>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Data,0));
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	98 2f       	mov	r25, r24
    17fe:	91 70       	andi	r25, 0x01	; 1
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	49 2f       	mov	r20, r25
    1806:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Data,1));
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	86 95       	lsr	r24
    180e:	98 2f       	mov	r25, r24
    1810:	91 70       	andi	r25, 0x01	; 1
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	49 2f       	mov	r20, r25
    1818:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Data,2));
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	86 95       	lsr	r24
    1820:	86 95       	lsr	r24
    1822:	98 2f       	mov	r25, r24
    1824:	91 70       	andi	r25, 0x01	; 1
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	62 e0       	ldi	r22, 0x02	; 2
    182a:	49 2f       	mov	r20, r25
    182c:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Data,3));
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	86 95       	lsr	r24
    1834:	86 95       	lsr	r24
    1836:	86 95       	lsr	r24
    1838:	98 2f       	mov	r25, r24
    183a:	91 70       	andi	r25, 0x01	; 1
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	63 e0       	ldi	r22, 0x03	; 3
    1840:	49 2f       	mov	r20, r25
    1842:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1846:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_Send_FallingEdge>

}
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_Send_Command>:

void LCD_Send_Command (u8 Command ){
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinLow);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	65 e0       	ldi	r22, 0x05	; 5
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Command,4));
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	82 95       	swap	r24
    1876:	8f 70       	andi	r24, 0x0F	; 15
    1878:	98 2f       	mov	r25, r24
    187a:	91 70       	andi	r25, 0x01	; 1
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	49 2f       	mov	r20, r25
    1882:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Command,5));
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	82 95       	swap	r24
    188a:	86 95       	lsr	r24
    188c:	87 70       	andi	r24, 0x07	; 7
    188e:	98 2f       	mov	r25, r24
    1890:	91 70       	andi	r25, 0x01	; 1
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	49 2f       	mov	r20, r25
    1898:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Command,6));
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	82 95       	swap	r24
    18a0:	86 95       	lsr	r24
    18a2:	86 95       	lsr	r24
    18a4:	83 70       	andi	r24, 0x03	; 3
    18a6:	98 2f       	mov	r25, r24
    18a8:	91 70       	andi	r25, 0x01	; 1
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	49 2f       	mov	r20, r25
    18b0:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Command,7));
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	98 2f       	mov	r25, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	99 27       	eor	r25, r25
    18bc:	99 1f       	adc	r25, r25
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	63 e0       	ldi	r22, 0x03	; 3
    18c2:	49 2f       	mov	r20, r25
    18c4:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    18c8:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_Send_FallingEdge>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Command,0));
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	98 2f       	mov	r25, r24
    18d0:	91 70       	andi	r25, 0x01	; 1
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	49 2f       	mov	r20, r25
    18d8:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Command,1));
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	86 95       	lsr	r24
    18e0:	98 2f       	mov	r25, r24
    18e2:	91 70       	andi	r25, 0x01	; 1
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	49 2f       	mov	r20, r25
    18ea:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Command,2));
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	86 95       	lsr	r24
    18f2:	86 95       	lsr	r24
    18f4:	98 2f       	mov	r25, r24
    18f6:	91 70       	andi	r25, 0x01	; 1
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	49 2f       	mov	r20, r25
    18fe:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Command,3));
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	98 2f       	mov	r25, r24
    190c:	91 70       	andi	r25, 0x01	; 1
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	63 e0       	ldi	r22, 0x03	; 3
    1912:	49 2f       	mov	r20, r25
    1914:	0e 94 6a 07 	call	0xed4	; 0xed4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1918:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_Send_FallingEdge>

}
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <LCD_4Bit_Init>:

void LCD_4Bit_Init (void ){
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	c4 55       	subi	r28, 0x54	; 84
    1932:	d0 40       	sbci	r29, 0x00	; 0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	fe 01       	movw	r30, r28
    1940:	ef 5a       	subi	r30, 0xAF	; 175
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a8 e4       	ldi	r26, 0x48	; 72
    194a:	b2 e4       	ldi	r27, 0x42	; 66
    194c:	80 83       	st	Z, r24
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	a2 83       	std	Z+2, r26	; 0x02
    1952:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1954:	8e 01       	movw	r16, r28
    1956:	03 5b       	subi	r16, 0xB3	; 179
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	fe 01       	movw	r30, r28
    195c:	ef 5a       	subi	r30, 0xAF	; 175
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	f8 01       	movw	r30, r16
    197a:	80 83       	st	Z, r24
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1982:	fe 01       	movw	r30, r28
    1984:	e3 5b       	subi	r30, 0xB3	; 179
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	44 f4       	brge	.+16     	; 0x19b0 <LCD_4Bit_Init+0x8c>
		__ticks = 1;
    19a0:	fe 01       	movw	r30, r28
    19a2:	e5 5b       	subi	r30, 0xB5	; 181
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	64 c0       	rjmp	.+200    	; 0x1a78 <LCD_4Bit_Init+0x154>
	else if (__tmp > 65535)
    19b0:	fe 01       	movw	r30, r28
    19b2:	e3 5b       	subi	r30, 0xB3	; 179
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	0c f0       	brlt	.+2      	; 0x19d0 <LCD_4Bit_Init+0xac>
    19ce:	43 c0       	rjmp	.+134    	; 0x1a56 <LCD_4Bit_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	fe 01       	movw	r30, r28
    19d2:	ef 5a       	subi	r30, 0xAF	; 175
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8e 01       	movw	r16, r28
    19f0:	05 5b       	subi	r16, 0xB5	; 181
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	f8 01       	movw	r30, r16
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	1f c0       	rjmp	.+62     	; 0x1a46 <LCD_4Bit_Init+0x122>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 5b       	subi	r30, 0xB7	; 183
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 5b       	subi	r30, 0xB7	; 183
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_4Bit_Init+0xfc>
    1a24:	fe 01       	movw	r30, r28
    1a26:	e7 5b       	subi	r30, 0xB7	; 183
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	de 01       	movw	r26, r28
    1a30:	a5 5b       	subi	r26, 0xB5	; 181
    1a32:	bf 4f       	sbci	r27, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e5 5b       	subi	r30, 0xB5	; 181
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	11 96       	adiw	r26, 0x01	; 1
    1a42:	9c 93       	st	X, r25
    1a44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	fe 01       	movw	r30, r28
    1a48:	e5 5b       	subi	r30, 0xB5	; 181
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	d1 f6       	brne	.-76     	; 0x1a08 <LCD_4Bit_Init+0xe4>
    1a54:	27 c0       	rjmp	.+78     	; 0x1aa4 <LCD_4Bit_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	8e 01       	movw	r16, r28
    1a58:	05 5b       	subi	r16, 0xB5	; 181
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e3 5b       	subi	r30, 0xB3	; 179
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	f8 01       	movw	r30, r16
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	de 01       	movw	r26, r28
    1a7a:	a9 5b       	subi	r26, 0xB9	; 185
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e5 5b       	subi	r30, 0xB5	; 181
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	8d 93       	st	X+, r24
    1a8a:	9c 93       	st	X, r25
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e9 5b       	subi	r30, 0xB9	; 185
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 81       	ld	r24, Z
    1a94:	91 81       	ldd	r25, Z+1	; 0x01
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_4Bit_Init+0x172>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e9 5b       	subi	r30, 0xB9	; 185
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_Send_Command(0x33);
    1aa4:	83 e3       	ldi	r24, 0x33	; 51
    1aa6:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ed 5b       	subi	r30, 0xBD	; 189
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	bf e3       	ldi	r27, 0x3F	; 63
    1ab8:	80 83       	st	Z, r24
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	a2 83       	std	Z+2, r26	; 0x02
    1abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	8e 01       	movw	r16, r28
    1ac2:	01 5c       	subi	r16, 0xC1	; 193
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ed 5b       	subi	r30, 0xBD	; 189
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a ef       	ldi	r20, 0xFA	; 250
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	80 83       	st	Z, r24
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	a2 83       	std	Z+2, r26	; 0x02
    1aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aee:	fe 01       	movw	r30, r28
    1af0:	ff 96       	adiw	r30, 0x3f	; 63
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_4Bit_Init+0x1f0>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e af       	std	Y+62, r25	; 0x3e
    1b10:	8d af       	std	Y+61, r24	; 0x3d
    1b12:	46 c0       	rjmp	.+140    	; 0x1ba0 <LCD_4Bit_Init+0x27c>
	else if (__tmp > 65535)
    1b14:	fe 01       	movw	r30, r28
    1b16:	ff 96       	adiw	r30, 0x3f	; 63
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	64 f5       	brge	.+88     	; 0x1b88 <LCD_4Bit_Init+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	fe 01       	movw	r30, r28
    1b32:	ed 5b       	subi	r30, 0xBD	; 189
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e af       	std	Y+62, r25	; 0x3e
    1b5c:	8d af       	std	Y+61, r24	; 0x3d
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_4Bit_Init+0x25a>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9c af       	std	Y+60, r25	; 0x3c
    1b66:	8b af       	std	Y+59, r24	; 0x3b
    1b68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_4Bit_Init+0x248>
    1b70:	9c af       	std	Y+60, r25	; 0x3c
    1b72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9e af       	std	Y+62, r25	; 0x3e
    1b7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_4Bit_Init+0x23c>
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <LCD_4Bit_Init+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ff 96       	adiw	r30, 0x3f	; 63
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9e af       	std	Y+62, r25	; 0x3e
    1b9e:	8d af       	std	Y+61, r24	; 0x3d
    1ba0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba4:	9a af       	std	Y+58, r25	; 0x3a
    1ba6:	89 af       	std	Y+57, r24	; 0x39
    1ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    1baa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_4Bit_Init+0x288>
    1bb0:	9a af       	std	Y+58, r25	; 0x3a
    1bb2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_Send_Command(0x02);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e8       	ldi	r26, 0x80	; 128
    1bc0:	bf e3       	ldi	r27, 0x3F	; 63
    1bc2:	8d ab       	std	Y+53, r24	; 0x35
    1bc4:	9e ab       	std	Y+54, r25	; 0x36
    1bc6:	af ab       	std	Y+55, r26	; 0x37
    1bc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6d a9       	ldd	r22, Y+53	; 0x35
    1bcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bce:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a ef       	ldi	r20, 0xFA	; 250
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	89 ab       	std	Y+49, r24	; 0x31
    1be4:	9a ab       	std	Y+50, r25	; 0x32
    1be6:	ab ab       	std	Y+51, r26	; 0x33
    1be8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bea:	69 a9       	ldd	r22, Y+49	; 0x31
    1bec:	7a a9       	ldd	r23, Y+50	; 0x32
    1bee:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_4Bit_Init+0x2e8>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	98 ab       	std	Y+48, r25	; 0x30
    1c08:	8f a7       	std	Y+47, r24	; 0x2f
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_4Bit_Init+0x366>
	else if (__tmp > 65535)
    1c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c10:	8b a9       	ldd	r24, Y+51	; 0x33
    1c12:	9c a9       	ldd	r25, Y+52	; 0x34
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_4Bit_Init+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6d a9       	ldd	r22, Y+53	; 0x35
    1c26:	7e a9       	ldd	r23, Y+54	; 0x36
    1c28:	8f a9       	ldd	r24, Y+55	; 0x37
    1c2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	98 ab       	std	Y+48, r25	; 0x30
    1c4a:	8f a7       	std	Y+47, r24	; 0x2f
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_4Bit_Init+0x348>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9e a7       	std	Y+46, r25	; 0x2e
    1c54:	8d a7       	std	Y+45, r24	; 0x2d
    1c56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_4Bit_Init+0x336>
    1c5e:	9e a7       	std	Y+46, r25	; 0x2e
    1c60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c64:	98 a9       	ldd	r25, Y+48	; 0x30
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_4Bit_Init+0x32a>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_4Bit_Init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	69 a9       	ldd	r22, Y+49	; 0x31
    1c78:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	98 ab       	std	Y+48, r25	; 0x30
    1c88:	8f a7       	std	Y+47, r24	; 0x2f
    1c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8e:	9c a7       	std	Y+44, r25	; 0x2c
    1c90:	8b a7       	std	Y+43, r24	; 0x2b
    1c92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_4Bit_Init+0x372>
    1c9a:	9c a7       	std	Y+44, r25	; 0x2c
    1c9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_Send_Command(0x28);
    1c9e:	88 e2       	ldi	r24, 0x28	; 40
    1ca0:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 e8       	ldi	r26, 0x80	; 128
    1caa:	bf e3       	ldi	r27, 0x3F	; 63
    1cac:	8f a3       	std	Y+39, r24	; 0x27
    1cae:	98 a7       	std	Y+40, r25	; 0x28
    1cb0:	a9 a7       	std	Y+41, r26	; 0x29
    1cb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a ef       	ldi	r20, 0xFA	; 250
    1cc2:	54 e4       	ldi	r21, 0x44	; 68
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8b a3       	std	Y+35, r24	; 0x23
    1cce:	9c a3       	std	Y+36, r25	; 0x24
    1cd0:	ad a3       	std	Y+37, r26	; 0x25
    1cd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cda:	9e a1       	ldd	r25, Y+38	; 0x26
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <LCD_4Bit_Init+0x3d2>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9a a3       	std	Y+34, r25	; 0x22
    1cf2:	89 a3       	std	Y+33, r24	; 0x21
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <LCD_4Bit_Init+0x450>
	else if (__tmp > 65535)
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <LCD_4Bit_Init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d10:	78 a5       	ldd	r23, Y+40	; 0x28
    1d12:	89 a5       	ldd	r24, Y+41	; 0x29
    1d14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <LCD_4Bit_Init+0x432>
    1d38:	88 ec       	ldi	r24, 0xC8	; 200
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	98 a3       	std	Y+32, r25	; 0x20
    1d3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d42:	98 a1       	ldd	r25, Y+32	; 0x20
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_4Bit_Init+0x420>
    1d48:	98 a3       	std	Y+32, r25	; 0x20
    1d4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9a a3       	std	Y+34, r25	; 0x22
    1d54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	89 a1       	ldd	r24, Y+33	; 0x21
    1d58:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <LCD_4Bit_Init+0x414>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <LCD_4Bit_Init+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6b a1       	ldd	r22, Y+35	; 0x23
    1d62:	7c a1       	ldd	r23, Y+36	; 0x24
    1d64:	8d a1       	ldd	r24, Y+37	; 0x25
    1d66:	9e a1       	ldd	r25, Y+38	; 0x26
    1d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9a a3       	std	Y+34, r25	; 0x22
    1d72:	89 a3       	std	Y+33, r24	; 0x21
    1d74:	89 a1       	ldd	r24, Y+33	; 0x21
    1d76:	9a a1       	ldd	r25, Y+34	; 0x22
    1d78:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_4Bit_Init+0x45c>
    1d84:	9e 8f       	std	Y+30, r25	; 0x1e
    1d86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Send_Command(0x0c);
    1d88:	8c e0       	ldi	r24, 0x0C	; 12
    1d8a:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	89 8f       	std	Y+25, r24	; 0x19
    1d98:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a ef       	ldi	r20, 0xFA	; 250
    1dac:	54 e4       	ldi	r21, 0x44	; 68
    1dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8d 8b       	std	Y+21, r24	; 0x15
    1db8:	9e 8b       	std	Y+22, r25	; 0x16
    1dba:	af 8b       	std	Y+23, r26	; 0x17
    1dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <LCD_4Bit_Init+0x4bc>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <LCD_4Bit_Init+0x53a>
	else if (__tmp > 65535)
    1de0:	6d 89       	ldd	r22, Y+21	; 0x15
    1de2:	7e 89       	ldd	r23, Y+22	; 0x16
    1de4:	8f 89       	ldd	r24, Y+23	; 0x17
    1de6:	98 8d       	ldd	r25, Y+24	; 0x18
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <LCD_4Bit_Init+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_4Bit_Init+0x51c>
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
    1e2a:	89 89       	ldd	r24, Y+17	; 0x11
    1e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_4Bit_Init+0x50a>
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <LCD_4Bit_Init+0x4fe>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <LCD_4Bit_Init+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e60:	9c 89       	ldd	r25, Y+20	; 0x14
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
    1e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e68:	98 89       	ldd	r25, Y+16	; 0x10
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_4Bit_Init+0x546>
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Command(0x01);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 ef       	ldi	r26, 0xF0	; 240
    1e7e:	b1 e4       	ldi	r27, 0x41	; 65
    1e80:	8b 87       	std	Y+11, r24	; 0x0b
    1e82:	9c 87       	std	Y+12, r25	; 0x0c
    1e84:	ad 87       	std	Y+13, r26	; 0x0d
    1e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8f 83       	std	Y+7, r24	; 0x07
    1ea2:	98 87       	std	Y+8, r25	; 0x08
    1ea4:	a9 87       	std	Y+9, r26	; 0x09
    1ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_4Bit_Init+0x5a6>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_4Bit_Init+0x624>
	else if (__tmp > 65535)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_4Bit_Init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_4Bit_Init+0x606>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_4Bit_Init+0x5f4>
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_4Bit_Init+0x5e8>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <LCD_4Bit_Init+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_4Bit_Init+0x630>
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	LCD_Send_Command(0x06);
    1f5c:	86 e0       	ldi	r24, 0x06	; 6
    1f5e:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
	LCD_Send_Command(0x80);
    1f62:	80 e8       	ldi	r24, 0x80	; 128
    1f64:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>

}
    1f68:	cc 5a       	subi	r28, 0xAC	; 172
    1f6a:	df 4f       	sbci	r29, 0xFF	; 255
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	08 95       	ret

00001f80 <lCD_SetPostion>:


void lCD_SetPostion (u8 line , u8 x)

{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <lCD_SetPostion+0x6>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	6a 83       	std	Y+2, r22	; 0x02

		if ((line >= 2 ) || (x >=15)){
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	18 f4       	brcc	.+6      	; 0x1f9a <lCD_SetPostion+0x1a>
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	8f 30       	cpi	r24, 0x0F	; 15
    1f98:	18 f0       	brcs	.+6      	; 0x1fa0 <lCD_SetPostion+0x20>

			LCD_Send_Command (0x80);
    1f9a:	80 e8       	ldi	r24, 0x80	; 128
    1f9c:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
		}

		if (line == 0){
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	88 23       	and	r24, r24
    1fa4:	29 f4       	brne	.+10     	; 0x1fb0 <lCD_SetPostion+0x30>

			LCD_Send_Command(0x80 + x);
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	80 58       	subi	r24, 0x80	; 128
    1faa:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <lCD_SetPostion+0x3e>

		}
		else if (line == 1) {
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <lCD_SetPostion+0x3e>

			LCD_Send_Command(0xC0 + x);
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	80 54       	subi	r24, 0x40	; 64
    1fba:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>

		}
	}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_Send_String>:



void LCD_Send_String (u8 *PtrStr){
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <LCD_Send_String+0x6>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9b 83       	std	Y+3, r25	; 0x03
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
u8 StrIterator = 0  ;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <LCD_Send_String+0x30>

	while (PtrStr [StrIterator] != '\0') {
		LCD_Send_Data(PtrStr[StrIterator]);
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	80 81       	ld	r24, Z
    1fee:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
		StrIterator ++;
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	89 83       	std	Y+1, r24	; 0x01


void LCD_Send_String (u8 *PtrStr){
u8 StrIterator = 0  ;

	while (PtrStr [StrIterator] != '\0') {
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	9b 81       	ldd	r25, Y+3	; 0x03
    2002:	fc 01       	movw	r30, r24
    2004:	e2 0f       	add	r30, r18
    2006:	f3 1f       	adc	r31, r19
    2008:	80 81       	ld	r24, Z
    200a:	88 23       	and	r24, r24
    200c:	39 f7       	brne	.-50     	; 0x1fdc <LCD_Send_String+0x14>
		LCD_Send_Data(PtrStr[StrIterator]);
		StrIterator ++;
	}

}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <LCD_WriteNumber>:

void LCD_WriteNumber(u16 Number)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	2e 97       	sbiw	r28, 0x0e	; 14
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	9e 87       	std	Y+14, r25	; 0x0e
    2030:	8d 87       	std	Y+13, r24	; 0x0d
	u8 i=0,arr[10],j;
    2032:	1a 82       	std	Y+2, r1	; 0x02

	if(Number==0)
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	11 f5       	brne	.+68     	; 0x2080 <LCD_WriteNumber+0x66>
	LCD_Send_Data('0');
    203c:	80 e3       	ldi	r24, 0x30	; 48
    203e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
    2042:	39 c0       	rjmp	.+114    	; 0x20b6 <LCD_WriteNumber+0x9c>
	else{
			while(Number )
			{
				arr[i]=Number%10+'0';
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	e8 2f       	mov	r30, r24
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    2058:	28 2f       	mov	r18, r24
    205a:	20 5d       	subi	r18, 0xD0	; 208
    205c:	ce 01       	movw	r24, r28
    205e:	03 96       	adiw	r24, 0x03	; 3
    2060:	e8 0f       	add	r30, r24
    2062:	f9 1f       	adc	r31, r25
    2064:	20 83       	st	Z, r18
				Number/=10;
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	2a e0       	ldi	r18, 0x0A	; 10
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	b9 01       	movw	r22, r18
    2070:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    2074:	cb 01       	movw	r24, r22
    2076:	9e 87       	std	Y+14, r25	; 0x0e
    2078:	8d 87       	std	Y+13, r24	; 0x0d
				i++;
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0,arr[10],j;

	if(Number==0)
	LCD_Send_Data('0');
	else{
			while(Number )
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	f1 f6       	brne	.-68     	; 0x2044 <LCD_WriteNumber+0x2a>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i ;j>0 ;j--)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	11 c0       	rjmp	.+34     	; 0x20b0 <LCD_WriteNumber+0x96>
			{
				LCD_Send_Data(arr[j-1]);
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 01       	movw	r18, r24
    2096:	21 50       	subi	r18, 0x01	; 1
    2098:	30 40       	sbci	r19, 0x00	; 0
    209a:	ce 01       	movw	r24, r28
    209c:	03 96       	adiw	r24, 0x03	; 3
    209e:	fc 01       	movw	r30, r24
    20a0:	e2 0f       	add	r30, r18
    20a2:	f3 1f       	adc	r31, r19
    20a4:	80 81       	ld	r24, Z
    20a6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i ;j>0 ;j--)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	81 50       	subi	r24, 0x01	; 1
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	88 23       	and	r24, r24
    20b4:	61 f7       	brne	.-40     	; 0x208e <LCD_WriteNumber+0x74>
			{
				LCD_Send_Data(arr[j-1]);
			}
	   }
}
    20b6:	2e 96       	adiw	r28, 0x0e	; 14
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <LCD_WriteNumber2>:

void LCD_WriteNumber2(u16 Number)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <LCD_WriteNumber2+0x6>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_Data(Number%10000/1000+'0');
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	20 e1       	ldi	r18, 0x10	; 16
    20dc:	37 e2       	ldi	r19, 0x27	; 39
    20de:	b9 01       	movw	r22, r18
    20e0:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    20e4:	28 ee       	ldi	r18, 0xE8	; 232
    20e6:	33 e0       	ldi	r19, 0x03	; 3
    20e8:	b9 01       	movw	r22, r18
    20ea:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    20ee:	cb 01       	movw	r24, r22
    20f0:	80 5d       	subi	r24, 0xD0	; 208
    20f2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
	LCD_Send_Data(Number%1000/100+'0');
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	28 ee       	ldi	r18, 0xE8	; 232
    20fc:	33 e0       	ldi	r19, 0x03	; 3
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    2104:	24 e6       	ldi	r18, 0x64	; 100
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    210e:	cb 01       	movw	r24, r22
    2110:	80 5d       	subi	r24, 0xD0	; 208
    2112:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
	LCD_Send_Data(Number%100/10+'0');
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	24 e6       	ldi	r18, 0x64	; 100
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	b9 01       	movw	r22, r18
    2120:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    2124:	2a e0       	ldi	r18, 0x0A	; 10
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    212e:	cb 01       	movw	r24, r22
    2130:	80 5d       	subi	r24, 0xD0	; 208
    2132:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
	LCD_Send_Data(Number%10/1+'0');
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	b9 01       	movw	r22, r18
    2140:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodhi4>
    2144:	80 5d       	subi	r24, 0xD0	; 208
    2146:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_Send_Data>
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_Clear>:
void LCD_Clear(void)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62

	LCD_Send_Command(0x01);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_Send_Command>

}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <Check_Password>:

#define WrongPasscode 0
#define Welcome       1


u8 Check_Password (u8 * passcode){
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <Check_Password+0x6>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01



	return Welcome;
    2176:	81 e0       	ldi	r24, 0x01	; 1
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <main>:


void main (void ){
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	c3 57       	subi	r28, 0x73	; 115
    2190:	d0 40       	sbci	r29, 0x00	; 0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinDir(Group_C, PIN4, Dio_PinOutput);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(Group_C, PIN5, Dio_PinOutput);
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	65 e0       	ldi	r22, 0x05	; 5
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(Group_C, PIN6, Dio_PinOutput);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 83 06 	call	0xd06	; 0xd06 <Dio_u8_SetPinDir>
	u8 x [100] = {0} ;
    21ba:	84 e6       	ldi	r24, 0x64	; 100
    21bc:	fe 01       	movw	r30, r28
    21be:	70 96       	adiw	r30, 0x10	; 16
    21c0:	df 01       	movw	r26, r30
    21c2:	98 2f       	mov	r25, r24
    21c4:	1d 92       	st	X+, r1
    21c6:	9a 95       	dec	r25
    21c8:	e9 f7       	brne	.-6      	; 0x21c4 <main+0x42>
	LCD_4Bit_Init();
    21ca:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_4Bit_Init>
	KPD_Init();
    21ce:	0e 94 8f 09 	call	0x131e	; 0x131e <KPD_Init>

	u8 i;
	while (1) {

	lCD_SetPostion(0, 0);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <lCD_SetPostion>
	LCD_Send_String("Entre Passcode");
    21da:	80 e6       	ldi	r24, 0x60	; 96
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_Send_String>

	x [i]= KPD_PRESSED();
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	08 2f       	mov	r16, r24
    21e6:	10 e0       	ldi	r17, 0x00	; 0
    21e8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <KPD_PRESSED>
    21ec:	28 2f       	mov	r18, r24
    21ee:	ce 01       	movw	r24, r28
    21f0:	40 96       	adiw	r24, 0x10	; 16
    21f2:	fc 01       	movw	r30, r24
    21f4:	e0 0f       	add	r30, r16
    21f6:	f1 1f       	adc	r31, r17
    21f8:	20 83       	st	Z, r18
	if (x[i] != '\0')
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	ce 01       	movw	r24, r28
    2202:	40 96       	adiw	r24, 0x10	; 16
    2204:	fc 01       	movw	r30, r24
    2206:	e2 0f       	add	r30, r18
    2208:	f3 1f       	adc	r31, r19
    220a:	80 81       	ld	r24, Z
    220c:	88 23       	and	r24, r24
    220e:	09 f3       	breq	.-62     	; 0x21d2 <main+0x50>
	{

		lCD_SetPostion(1, i);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	6f 85       	ldd	r22, Y+15	; 0x0f
    2214:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <lCD_SetPostion>
		LCD_Send_String(&x[i]);
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	ce 01       	movw	r24, r28
    2220:	40 96       	adiw	r24, 0x10	; 16
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_Send_String>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a8 ec       	ldi	r26, 0xC8	; 200
    2230:	b2 e4       	ldi	r27, 0x42	; 66
    2232:	8b 87       	std	Y+11, r24	; 0x0b
    2234:	9c 87       	std	Y+12, r25	; 0x0c
    2236:	ad 87       	std	Y+13, r26	; 0x0d
    2238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a ef       	ldi	r20, 0xFA	; 250
    2248:	54 e4       	ldi	r21, 0x44	; 68
    224a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8f 83       	std	Y+7, r24	; 0x07
    2254:	98 87       	std	Y+8, r25	; 0x08
    2256:	a9 87       	std	Y+9, r26	; 0x09
    2258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <main+0xfa>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <main+0x178>
	else if (__tmp > 65535)
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <main+0x15a>
    22be:	88 ec       	ldi	r24, 0xC8	; 200
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <main+0x148>
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <main+0x13c>
    22e4:	14 c0       	rjmp	.+40     	; 0x230e <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <main+0x184>
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lCD_SetPostion(1, i);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	6f 85       	ldd	r22, Y+15	; 0x0f
    2312:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <lCD_SetPostion>
		LCD_Send_String("*");
    2316:	8f e6       	ldi	r24, 0x6F	; 111
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_Send_String>
		i++;
    231e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	8f 87       	std	Y+15, r24	; 0x0f
    2324:	56 cf       	rjmp	.-340    	; 0x21d2 <main+0x50>

00002326 <__udivmodhi4>:
    2326:	aa 1b       	sub	r26, r26
    2328:	bb 1b       	sub	r27, r27
    232a:	51 e1       	ldi	r21, 0x11	; 17
    232c:	07 c0       	rjmp	.+14     	; 0x233c <__udivmodhi4_ep>

0000232e <__udivmodhi4_loop>:
    232e:	aa 1f       	adc	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	a6 17       	cp	r26, r22
    2334:	b7 07       	cpc	r27, r23
    2336:	10 f0       	brcs	.+4      	; 0x233c <__udivmodhi4_ep>
    2338:	a6 1b       	sub	r26, r22
    233a:	b7 0b       	sbc	r27, r23

0000233c <__udivmodhi4_ep>:
    233c:	88 1f       	adc	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	5a 95       	dec	r21
    2342:	a9 f7       	brne	.-22     	; 0x232e <__udivmodhi4_loop>
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	08 95       	ret

0000234e <__prologue_saves__>:
    234e:	2f 92       	push	r2
    2350:	3f 92       	push	r3
    2352:	4f 92       	push	r4
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	ca 1b       	sub	r28, r26
    2378:	db 0b       	sbc	r29, r27
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	09 94       	ijmp

00002386 <__epilogue_restores__>:
    2386:	2a 88       	ldd	r2, Y+18	; 0x12
    2388:	39 88       	ldd	r3, Y+17	; 0x11
    238a:	48 88       	ldd	r4, Y+16	; 0x10
    238c:	5f 84       	ldd	r5, Y+15	; 0x0f
    238e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2390:	7d 84       	ldd	r7, Y+13	; 0x0d
    2392:	8c 84       	ldd	r8, Y+12	; 0x0c
    2394:	9b 84       	ldd	r9, Y+11	; 0x0b
    2396:	aa 84       	ldd	r10, Y+10	; 0x0a
    2398:	b9 84       	ldd	r11, Y+9	; 0x09
    239a:	c8 84       	ldd	r12, Y+8	; 0x08
    239c:	df 80       	ldd	r13, Y+7	; 0x07
    239e:	ee 80       	ldd	r14, Y+6	; 0x06
    23a0:	fd 80       	ldd	r15, Y+5	; 0x05
    23a2:	0c 81       	ldd	r16, Y+4	; 0x04
    23a4:	1b 81       	ldd	r17, Y+3	; 0x03
    23a6:	aa 81       	ldd	r26, Y+2	; 0x02
    23a8:	b9 81       	ldd	r27, Y+1	; 0x01
    23aa:	ce 0f       	add	r28, r30
    23ac:	d1 1d       	adc	r29, r1
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	ed 01       	movw	r28, r26
    23ba:	08 95       	ret

000023bc <_exit>:
    23bc:	f8 94       	cli

000023be <__stop_program>:
    23be:	ff cf       	rjmp	.-2      	; 0x23be <__stop_program>
