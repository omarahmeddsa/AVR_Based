
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000024f0  00002584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000b6  008000b6  000025da  2**0
                  ALLOC
  3 .stab         00001ee4  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faa  00000000  00000000  000044c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000546a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000055ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000779e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000889f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009824  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000099a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <main>
      8a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 12 	jmp	0x248e	; 0x248e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Global_interrput_Enable>:
#include "Dio_Interface.h"
#include "Dio_Private.h"


/********************Gobal Interrput **************************/
void Global_interrput_Enable (void ){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(SREG, GobalInterrput_Pin);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <Global_interrput_Disable>:

void Global_interrput_Disable (void ){
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(SREG, GobalInterrput_Pin);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <Dio_u8_SetPortDir>:

/*********************************/

void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <Dio_u8_SetPortDir+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <Dio_u8_SetPortDir+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	90 f5       	brcc	.+100    	; 0xd50 <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3c 83       	std	Y+4, r19	; 0x04
     cf4:	2b 83       	std	Y+3, r18	; 0x03
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <Dio_u8_SetPortDir+0x5e>
     d00:	2b 81       	ldd	r18, Y+3	; 0x03
     d02:	3c 81       	ldd	r19, Y+4	; 0x04
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	31 05       	cpc	r19, r1
     d08:	2c f4       	brge	.+10     	; 0xd14 <Dio_u8_SetPortDir+0x3e>
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	61 f0       	breq	.+24     	; 0xd2a <Dio_u8_SetPortDir+0x54>
     d12:	1e c0       	rjmp	.+60     	; 0xd50 <Dio_u8_SetPortDir+0x7a>
     d14:	2b 81       	ldd	r18, Y+3	; 0x03
     d16:	3c 81       	ldd	r19, Y+4	; 0x04
     d18:	22 30       	cpi	r18, 0x02	; 2
     d1a:	31 05       	cpc	r19, r1
     d1c:	81 f0       	breq	.+32     	; 0xd3e <Dio_u8_SetPortDir+0x68>
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	91 05       	cpc	r25, r1
     d26:	81 f0       	breq	.+32     	; 0xd48 <Dio_u8_SetPortDir+0x72>
     d28:	13 c0       	rjmp	.+38     	; 0xd50 <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	80 83       	st	Z, r24
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
     d34:	e7 e3       	ldi	r30, 0x37	; 55
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	80 83       	st	Z, r24
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
     d3e:	e4 e3       	ldi	r30, 0x34	; 52
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	80 83       	st	Z, r24
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
     d48:	e1 e3       	ldi	r30, 0x31	; 49
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	80 83       	st	Z, r24
			break;
		}
	}
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <Dio_u8_SetPortValue+0x6>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <Dio_u8_SetPortValue+0x8>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	90 f5       	brcc	.+100    	; 0xdd8 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3c 83       	std	Y+4, r19	; 0x04
     d7c:	2b 83       	std	Y+3, r18	; 0x03
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	d1 f0       	breq	.+52     	; 0xdbc <Dio_u8_SetPortValue+0x5e>
     d88:	2b 81       	ldd	r18, Y+3	; 0x03
     d8a:	3c 81       	ldd	r19, Y+4	; 0x04
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	2c f4       	brge	.+10     	; 0xd9c <Dio_u8_SetPortValue+0x3e>
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	61 f0       	breq	.+24     	; 0xdb2 <Dio_u8_SetPortValue+0x54>
     d9a:	1e c0       	rjmp	.+60     	; 0xdd8 <Dio_u8_SetPortValue+0x7a>
     d9c:	2b 81       	ldd	r18, Y+3	; 0x03
     d9e:	3c 81       	ldd	r19, Y+4	; 0x04
     da0:	22 30       	cpi	r18, 0x02	; 2
     da2:	31 05       	cpc	r19, r1
     da4:	81 f0       	breq	.+32     	; 0xdc6 <Dio_u8_SetPortValue+0x68>
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	81 f0       	breq	.+32     	; 0xdd0 <Dio_u8_SetPortValue+0x72>
     db0:	13 c0       	rjmp	.+38     	; 0xdd8 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
     db2:	eb e3       	ldi	r30, 0x3B	; 59
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	80 83       	st	Z, r24
     dba:	0e c0       	rjmp	.+28     	; 0xdd8 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
     dbc:	e8 e3       	ldi	r30, 0x38	; 56
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	80 83       	st	Z, r24
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
     dc6:	e5 e3       	ldi	r30, 0x35	; 53
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	80 83       	st	Z, r24
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
     dd0:	e2 e3       	ldi	r30, 0x32	; 50
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	80 83       	st	Z, r24
			break;
		}
	}
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <Dio_u8_GetportValue+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <Dio_u8_GetportValue+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	90 f5       	brcc	.+100    	; 0xe5e <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3c 83       	std	Y+4, r19	; 0x04
     e02:	2b 83       	std	Y+3, r18	; 0x03
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	91 05       	cpc	r25, r1
     e0c:	d1 f0       	breq	.+52     	; 0xe42 <Dio_u8_GetportValue+0x5c>
     e0e:	2b 81       	ldd	r18, Y+3	; 0x03
     e10:	3c 81       	ldd	r19, Y+4	; 0x04
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	2c f4       	brge	.+10     	; 0xe22 <Dio_u8_GetportValue+0x3c>
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	9c 81       	ldd	r25, Y+4	; 0x04
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	61 f0       	breq	.+24     	; 0xe38 <Dio_u8_GetportValue+0x52>
     e20:	1e c0       	rjmp	.+60     	; 0xe5e <Dio_u8_GetportValue+0x78>
     e22:	2b 81       	ldd	r18, Y+3	; 0x03
     e24:	3c 81       	ldd	r19, Y+4	; 0x04
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	81 f0       	breq	.+32     	; 0xe4c <Dio_u8_GetportValue+0x66>
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	91 05       	cpc	r25, r1
     e34:	81 f0       	breq	.+32     	; 0xe56 <Dio_u8_GetportValue+0x70>
     e36:	13 c0       	rjmp	.+38     	; 0xe5e <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
     e38:	eb e3       	ldi	r30, 0x3B	; 59
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
     e42:	e8 e3       	ldi	r30, 0x38	; 56
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
     e4c:	e5 e3       	ldi	r30, 0x35	; 53
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
     e56:	e2 e3       	ldi	r30, 0x32	; 50
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <Dio_u8_SetPinDir+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <Dio_u8_SetPinDir+0x8>
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	6a 83       	std	Y+2, r22	; 0x02
     e80:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f0       	brcs	.+2      	; 0xe8a <Dio_u8_SetPinDir+0x1c>
     e88:	d1 c0       	rjmp	.+418    	; 0x102c <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <Dio_u8_SetPinDir+0x32>
     e9e:	43 c0       	rjmp	.+134    	; 0xf26 <Dio_u8_SetPinDir+0xb8>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <Dio_u8_SetPinDir+0x46>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	71 f0       	breq	.+28     	; 0xece <Dio_u8_SetPinDir+0x60>
     eb2:	bc c0       	rjmp	.+376    	; 0x102c <Dio_u8_SetPinDir+0x1be>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <Dio_u8_SetPinDir+0x52>
     ebe:	5f c0       	rjmp	.+190    	; 0xf7e <Dio_u8_SetPinDir+0x110>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <Dio_u8_SetPinDir+0x5e>
     eca:	85 c0       	rjmp	.+266    	; 0xfd6 <Dio_u8_SetPinDir+0x168>
     ecc:	af c0       	rjmp	.+350    	; 0x102c <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <Dio_u8_SetPinDir+0x8e>
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <Dio_u8_SetPinDir+0x84>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <Dio_u8_SetPinDir+0x80>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	98 c0       	rjmp	.+304    	; 0x102c <Dio_u8_SetPinDir+0x1be>
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <Dio_u8_SetPinDir+0xac>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <Dio_u8_SetPinDir+0xa8>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	83 c0       	rjmp	.+262    	; 0x102c <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <Dio_u8_SetPinDir+0xe6>
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <Dio_u8_SetPinDir+0xdc>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <Dio_u8_SetPinDir+0xd8>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	6c c0       	rjmp	.+216    	; 0x102c <Dio_u8_SetPinDir+0x1be>
     f54:	a7 e3       	ldi	r26, 0x37	; 55
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e3       	ldi	r30, 0x37	; 55
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <Dio_u8_SetPinDir+0x104>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <Dio_u8_SetPinDir+0x100>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	57 c0       	rjmp	.+174    	; 0x102c <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	a1 f4       	brne	.+40     	; 0xfac <Dio_u8_SetPinDir+0x13e>
     f84:	a4 e3       	ldi	r26, 0x34	; 52
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e3       	ldi	r30, 0x34	; 52
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <Dio_u8_SetPinDir+0x134>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <Dio_u8_SetPinDir+0x130>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	40 c0       	rjmp	.+128    	; 0x102c <Dio_u8_SetPinDir+0x1be>
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <Dio_u8_SetPinDir+0x15c>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <Dio_u8_SetPinDir+0x158>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	2b c0       	rjmp	.+86     	; 0x102c <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <Dio_u8_SetPinDir+0x196>
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Dio_u8_SetPinDir+0x18c>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <Dio_u8_SetPinDir+0x188>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	14 c0       	rjmp	.+40     	; 0x102c <Dio_u8_SetPinDir+0x1be>
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <Dio_u8_SetPinDir+0x1b4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <Dio_u8_SetPinDir+0x1b0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
			break;
		}
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <Dio_u8_SetPinVal+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <Dio_u8_SetPinVal+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	08 f0       	brcs	.+2      	; 0x1058 <Dio_u8_SetPinVal+0x1c>
    1056:	d1 c0       	rjmp	.+418    	; 0x11fa <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3d 83       	std	Y+5, r19	; 0x05
    1060:	2c 83       	std	Y+4, r18	; 0x04
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <Dio_u8_SetPinVal+0x32>
    106c:	43 c0       	rjmp	.+134    	; 0x10f4 <Dio_u8_SetPinVal+0xb8>
    106e:	2c 81       	ldd	r18, Y+4	; 0x04
    1070:	3d 81       	ldd	r19, Y+5	; 0x05
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <Dio_u8_SetPinVal+0x46>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	71 f0       	breq	.+28     	; 0x109c <Dio_u8_SetPinVal+0x60>
    1080:	bc c0       	rjmp	.+376    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <Dio_u8_SetPinVal+0x52>
    108c:	5f c0       	rjmp	.+190    	; 0x114c <Dio_u8_SetPinVal+0x110>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <Dio_u8_SetPinVal+0x5e>
    1098:	85 c0       	rjmp	.+266    	; 0x11a4 <Dio_u8_SetPinVal+0x168>
    109a:	af c0       	rjmp	.+350    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	a1 f4       	brne	.+40     	; 0x10ca <Dio_u8_SetPinVal+0x8e>
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <Dio_u8_SetPinVal+0x84>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <Dio_u8_SetPinVal+0x80>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	98 c0       	rjmp	.+304    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
    10ca:	ab e3       	ldi	r26, 0x3B	; 59
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e3       	ldi	r30, 0x3B	; 59
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <Dio_u8_SetPinVal+0xac>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <Dio_u8_SetPinVal+0xa8>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	83 c0       	rjmp	.+262    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	a1 f4       	brne	.+40     	; 0x1122 <Dio_u8_SetPinVal+0xe6>
    10fa:	a8 e3       	ldi	r26, 0x38	; 56
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <Dio_u8_SetPinVal+0xdc>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <Dio_u8_SetPinVal+0xd8>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	6c c0       	rjmp	.+216    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
    1122:	a8 e3       	ldi	r26, 0x38	; 56
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e3       	ldi	r30, 0x38	; 56
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <Dio_u8_SetPinVal+0x104>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <Dio_u8_SetPinVal+0x100>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	57 c0       	rjmp	.+174    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	a1 f4       	brne	.+40     	; 0x117a <Dio_u8_SetPinVal+0x13e>
    1152:	a5 e3       	ldi	r26, 0x35	; 53
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e3       	ldi	r30, 0x35	; 53
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <Dio_u8_SetPinVal+0x134>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <Dio_u8_SetPinVal+0x130>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	40 c0       	rjmp	.+128    	; 0x11fa <Dio_u8_SetPinVal+0x1be>
    117a:	a5 e3       	ldi	r26, 0x35	; 53
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e5 e3       	ldi	r30, 0x35	; 53
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <Dio_u8_SetPinVal+0x15c>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <Dio_u8_SetPinVal+0x158>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	2b c0       	rjmp	.+86     	; 0x11fa <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	a1 f4       	brne	.+40     	; 0x11d2 <Dio_u8_SetPinVal+0x196>
    11aa:	a2 e3       	ldi	r26, 0x32	; 50
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e2 e3       	ldi	r30, 0x32	; 50
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <Dio_u8_SetPinVal+0x18c>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <Dio_u8_SetPinVal+0x188>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <Dio_u8_SetPinVal+0x1be>
    11d2:	a2 e3       	ldi	r26, 0x32	; 50
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e2 e3       	ldi	r30, 0x32	; 50
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <Dio_u8_SetPinVal+0x1b4>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <Dio_u8_SetPinVal+0x1b0>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
			break;
		}
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <Dio_u8_GetPinVal+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <Dio_u8_GetPinVal+0x8>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	84 30       	cpi	r24, 0x04	; 4
    1220:	08 f0       	brcs	.+2      	; 0x1224 <Dio_u8_GetPinVal+0x1a>
    1222:	67 c0       	rjmp	.+206    	; 0x12f2 <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3d 83       	std	Y+5, r19	; 0x05
    122c:	2c 83       	std	Y+4, r18	; 0x04
    122e:	4c 81       	ldd	r20, Y+4	; 0x04
    1230:	5d 81       	ldd	r21, Y+5	; 0x05
    1232:	41 30       	cpi	r20, 0x01	; 1
    1234:	51 05       	cpc	r21, r1
    1236:	41 f1       	breq	.+80     	; 0x1288 <Dio_u8_GetPinVal+0x7e>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	91 05       	cpc	r25, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <Dio_u8_GetPinVal+0x44>
    1242:	2c 81       	ldd	r18, Y+4	; 0x04
    1244:	3d 81       	ldd	r19, Y+5	; 0x05
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	61 f0       	breq	.+24     	; 0x1264 <Dio_u8_GetPinVal+0x5a>
    124c:	52 c0       	rjmp	.+164    	; 0x12f2 <Dio_u8_GetPinVal+0xe8>
    124e:	4c 81       	ldd	r20, Y+4	; 0x04
    1250:	5d 81       	ldd	r21, Y+5	; 0x05
    1252:	42 30       	cpi	r20, 0x02	; 2
    1254:	51 05       	cpc	r21, r1
    1256:	51 f1       	breq	.+84     	; 0x12ac <Dio_u8_GetPinVal+0xa2>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	b9 f1       	breq	.+110    	; 0x12d0 <Dio_u8_GetPinVal+0xc6>
    1262:	47 c0       	rjmp	.+142    	; 0x12f2 <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
    1264:	e9 e3       	ldi	r30, 0x39	; 57
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <Dio_u8_GetPinVal+0x72>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <Dio_u8_GetPinVal+0x6e>
    1280:	ca 01       	movw	r24, r20
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	35 c0       	rjmp	.+106    	; 0x12f2 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
    1288:	e6 e3       	ldi	r30, 0x36	; 54
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a9 01       	movw	r20, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <Dio_u8_GetPinVal+0x96>
    129c:	55 95       	asr	r21
    129e:	47 95       	ror	r20
    12a0:	8a 95       	dec	r24
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <Dio_u8_GetPinVal+0x92>
    12a4:	ca 01       	movw	r24, r20
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	23 c0       	rjmp	.+70     	; 0x12f2 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
    12ac:	e3 e3       	ldi	r30, 0x33	; 51
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a9 01       	movw	r20, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <Dio_u8_GetPinVal+0xba>
    12c0:	55 95       	asr	r21
    12c2:	47 95       	ror	r20
    12c4:	8a 95       	dec	r24
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <Dio_u8_GetPinVal+0xb6>
    12c8:	ca 01       	movw	r24, r20
    12ca:	81 70       	andi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	11 c0       	rjmp	.+34     	; 0x12f2 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
    12d0:	e0 e3       	ldi	r30, 0x30	; 48
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <Dio_u8_GetPinVal+0xde>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <Dio_u8_GetPinVal+0xda>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <Dio_u8_GetPortDir+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <Dio_u8_GetPortDir+0x8>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	90 f5       	brcc	.+100    	; 0x137c <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <Dio_u8_GetPortDir+0x5c>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <Dio_u8_GetPortDir+0x3c>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <Dio_u8_GetPortDir+0x52>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <Dio_u8_GetPortDir+0x78>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <Dio_u8_GetPortDir+0x66>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <Dio_u8_GetPortDir+0x70>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
    1356:	ea e3       	ldi	r30, 0x3A	; 58
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	0e c0       	rjmp	.+28     	; 0x137c <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
    1360:	e7 e3       	ldi	r30, 0x37	; 55
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	09 c0       	rjmp	.+18     	; 0x137c <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
    136a:	e4 e3       	ldi	r30, 0x34	; 52
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	04 c0       	rjmp	.+8      	; 0x137c <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
    1374:	e1 e3       	ldi	r30, 0x31	; 49
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <Dio_u8_GetPinDir+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <Dio_u8_GetPinDir+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <Dio_u8_GetPinDir+0x1a>
    13a4:	67 c0       	rjmp	.+206    	; 0x1474 <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	4c 81       	ldd	r20, Y+4	; 0x04
    13b2:	5d 81       	ldd	r21, Y+5	; 0x05
    13b4:	41 30       	cpi	r20, 0x01	; 1
    13b6:	51 05       	cpc	r21, r1
    13b8:	41 f1       	breq	.+80     	; 0x140a <Dio_u8_GetPinDir+0x7e>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	91 05       	cpc	r25, r1
    13c2:	34 f4       	brge	.+12     	; 0x13d0 <Dio_u8_GetPinDir+0x44>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	21 15       	cp	r18, r1
    13ca:	31 05       	cpc	r19, r1
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <Dio_u8_GetPinDir+0x5a>
    13ce:	52 c0       	rjmp	.+164    	; 0x1474 <Dio_u8_GetPinDir+0xe8>
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	42 30       	cpi	r20, 0x02	; 2
    13d6:	51 05       	cpc	r21, r1
    13d8:	51 f1       	breq	.+84     	; 0x142e <Dio_u8_GetPinDir+0xa2>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	b9 f1       	breq	.+110    	; 0x1452 <Dio_u8_GetPinDir+0xc6>
    13e4:	47 c0       	rjmp	.+142    	; 0x1474 <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
    13e6:	ea e3       	ldi	r30, 0x3A	; 58
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <Dio_u8_GetPinDir+0x72>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <Dio_u8_GetPinDir+0x6e>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	35 c0       	rjmp	.+106    	; 0x1474 <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
    140a:	e7 e3       	ldi	r30, 0x37	; 55
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <Dio_u8_GetPinDir+0x96>
    141e:	55 95       	asr	r21
    1420:	47 95       	ror	r20
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <Dio_u8_GetPinDir+0x92>
    1426:	ca 01       	movw	r24, r20
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	23 c0       	rjmp	.+70     	; 0x1474 <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
    142e:	e4 e3       	ldi	r30, 0x34	; 52
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <Dio_u8_GetPinDir+0xba>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <Dio_u8_GetPinDir+0xb6>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	11 c0       	rjmp	.+34     	; 0x1474 <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
    1452:	e1 e3       	ldi	r30, 0x31	; 49
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <Dio_u8_GetPinDir+0xde>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <Dio_u8_GetPinDir+0xda>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
    1474:	80 e0       	ldi	r24, 0x00	; 0
	}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <LCD_Send_FallingEdge>:
#include "Dio_Interface.h"
#include "LCD_Config.h"
#include "LCD_Interface.h"


void LCD_Send_FallingEdge () {
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	6c 97       	sbiw	r28, 0x1c	; 28
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinHigh);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	67 e0       	ldi	r22, 0x07	; 7
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e4       	ldi	r27, 0x40	; 64
    14ac:	89 8f       	std	Y+25, r24	; 0x19
    14ae:	9a 8f       	std	Y+26, r25	; 0x1a
    14b0:	ab 8f       	std	Y+27, r26	; 0x1b
    14b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	69 8d       	ldd	r22, Y+25	; 0x19
    14b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8d 8b       	std	Y+21, r24	; 0x15
    14ce:	9e 8b       	std	Y+22, r25	; 0x16
    14d0:	af 8b       	std	Y+23, r26	; 0x17
    14d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_Send_FallingEdge+0x70>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_Send_FallingEdge+0xee>
	else if (__tmp > 65535)
    14f6:	6d 89       	ldd	r22, Y+21	; 0x15
    14f8:	7e 89       	ldd	r23, Y+22	; 0x16
    14fa:	8f 89       	ldd	r24, Y+23	; 0x17
    14fc:	98 8d       	ldd	r25, Y+24	; 0x18
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_Send_FallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	69 8d       	ldd	r22, Y+25	; 0x19
    1510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_Send_FallingEdge+0xd0>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9a 8b       	std	Y+18, r25	; 0x12
    153e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1540:	89 89       	ldd	r24, Y+17	; 0x11
    1542:	9a 89       	ldd	r25, Y+18	; 0x12
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_Send_FallingEdge+0xbe>
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_Send_FallingEdge+0xb2>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_Send_FallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	98 8b       	std	Y+16, r25	; 0x10
    157a:	8f 87       	std	Y+15, r24	; 0x0f
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	98 89       	ldd	r25, Y+16	; 0x10
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_Send_FallingEdge+0xfa>
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinLow);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	67 e0       	ldi	r22, 0x07	; 7
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e4       	ldi	r27, 0x40	; 64
    159a:	8b 87       	std	Y+11, r24	; 0x0b
    159c:	9c 87       	std	Y+12, r25	; 0x0c
    159e:	ad 87       	std	Y+13, r26	; 0x0d
    15a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8f 83       	std	Y+7, r24	; 0x07
    15bc:	98 87       	std	Y+8, r25	; 0x08
    15be:	a9 87       	std	Y+9, r26	; 0x09
    15c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <LCD_Send_FallingEdge+0x15e>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <LCD_Send_FallingEdge+0x1dc>
	else if (__tmp > 65535)
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <LCD_Send_FallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1600:	8d 85       	ldd	r24, Y+13	; 0x0d
    1602:	9e 85       	ldd	r25, Y+14	; 0x0e
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <LCD_Send_FallingEdge+0x1be>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <LCD_Send_FallingEdge+0x1ac>
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <LCD_Send_FallingEdge+0x1a0>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <LCD_Send_FallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <LCD_Send_FallingEdge+0x1e8>
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <LCD_Send_Data>:



void LCD_Send_Data (u8 Copy_u8_Data) { 											// Sending Data
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinHigh);
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	65 e0       	ldi	r22, 0x05	; 5
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	66 e0       	ldi	r22, 0x06	; 6
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
	Dio_u8_SetPortValue(LCD_Data_Port, Copy_u8_Data);
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	69 81       	ldd	r22, Y+1	; 0x01
    16ac:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_u8_SetPortValue>
	LCD_Send_FallingEdge();
    16b0:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_Send_FallingEdge>

}
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <LCD_Send_Commoand>:

void LCD_Send_Commoand(u8 Copy_u8_Command) {
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinLow);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	65 e0       	ldi	r22, 0x05	; 5
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	66 e0       	ldi	r22, 0x06	; 6
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 1e 08 	call	0x103c	; 0x103c <Dio_u8_SetPinVal>
	Dio_u8_SetPortValue(LCD_Data_Port, Copy_u8_Command);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	69 81       	ldd	r22, Y+1	; 0x01
    16e0:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_u8_SetPortValue>
	LCD_Send_FallingEdge();
    16e4:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_Send_FallingEdge>

}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <LCD_Display_Clear>:


void LCD_Display_Clear (){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	2e 97       	sbiw	r28, 0x0e	; 14
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61

	LCD_Send_Commoand(LCD_Display_clear);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 ea       	ldi	r26, 0xA0	; 160
    1710:	b1 e4       	ldi	r27, 0x41	; 65
    1712:	8b 87       	std	Y+11, r24	; 0x0b
    1714:	9c 87       	std	Y+12, r25	; 0x0c
    1716:	ad 87       	std	Y+13, r26	; 0x0d
    1718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a ef       	ldi	r20, 0xFA	; 250
    1728:	54 e4       	ldi	r21, 0x44	; 68
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	8f 83       	std	Y+7, r24	; 0x07
    1734:	98 87       	std	Y+8, r25	; 0x08
    1736:	a9 87       	std	Y+9, r26	; 0x09
    1738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	2c f4       	brge	.+10     	; 0x175c <LCD_Display_Clear+0x6c>
		__ticks = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	3f c0       	rjmp	.+126    	; 0x17da <LCD_Display_Clear+0xea>
	else if (__tmp > 65535)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	4c f5       	brge	.+82     	; 0x17c6 <LCD_Display_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <LCD_Display_Clear+0xcc>
    179e:	88 ec       	ldi	r24, 0xC8	; 200
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_Display_Clear+0xba>
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <LCD_Display_Clear+0xae>
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <LCD_Display_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	6f 81       	ldd	r22, Y+7	; 0x07
    17c8:	78 85       	ldd	r23, Y+8	; 0x08
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_Display_Clear+0xf6>
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    17ee:	2e 96       	adiw	r28, 0x0e	; 14
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <LCD_Init>:


void LCD_Init () {
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	ee 97       	sbiw	r28, 0x3e	; 62
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a8 e4       	ldi	r26, 0x48	; 72
    181a:	b2 e4       	ldi	r27, 0x42	; 66
    181c:	8b af       	std	Y+59, r24	; 0x3b
    181e:	9c af       	std	Y+60, r25	; 0x3c
    1820:	ad af       	std	Y+61, r26	; 0x3d
    1822:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6b ad       	ldd	r22, Y+59	; 0x3b
    1826:	7c ad       	ldd	r23, Y+60	; 0x3c
    1828:	8d ad       	ldd	r24, Y+61	; 0x3d
    182a:	9e ad       	ldd	r25, Y+62	; 0x3e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8f ab       	std	Y+55, r24	; 0x37
    183e:	98 af       	std	Y+56, r25	; 0x38
    1840:	a9 af       	std	Y+57, r26	; 0x39
    1842:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1844:	6f a9       	ldd	r22, Y+55	; 0x37
    1846:	78 ad       	ldd	r23, Y+56	; 0x38
    1848:	89 ad       	ldd	r24, Y+57	; 0x39
    184a:	9a ad       	ldd	r25, Y+58	; 0x3a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <LCD_Init+0x66>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9e ab       	std	Y+54, r25	; 0x36
    1862:	8d ab       	std	Y+53, r24	; 0x35
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1866:	6f a9       	ldd	r22, Y+55	; 0x37
    1868:	78 ad       	ldd	r23, Y+56	; 0x38
    186a:	89 ad       	ldd	r24, Y+57	; 0x39
    186c:	9a ad       	ldd	r25, Y+58	; 0x3a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1880:	7c ad       	ldd	r23, Y+60	; 0x3c
    1882:	8d ad       	ldd	r24, Y+61	; 0x3d
    1884:	9e ad       	ldd	r25, Y+62	; 0x3e
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e ab       	std	Y+54, r25	; 0x36
    18a4:	8d ab       	std	Y+53, r24	; 0x35
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <LCD_Init+0xc6>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c ab       	std	Y+52, r25	; 0x34
    18ae:	8b ab       	std	Y+51, r24	; 0x33
    18b0:	8b a9       	ldd	r24, Y+51	; 0x33
    18b2:	9c a9       	ldd	r25, Y+52	; 0x34
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <LCD_Init+0xb4>
    18b8:	9c ab       	std	Y+52, r25	; 0x34
    18ba:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8d a9       	ldd	r24, Y+53	; 0x35
    18be:	9e a9       	ldd	r25, Y+54	; 0x36
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9e ab       	std	Y+54, r25	; 0x36
    18c4:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8d a9       	ldd	r24, Y+53	; 0x35
    18c8:	9e a9       	ldd	r25, Y+54	; 0x36
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <LCD_Init+0xa8>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6f a9       	ldd	r22, Y+55	; 0x37
    18d2:	78 ad       	ldd	r23, Y+56	; 0x38
    18d4:	89 ad       	ldd	r24, Y+57	; 0x39
    18d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e ab       	std	Y+54, r25	; 0x36
    18e2:	8d ab       	std	Y+53, r24	; 0x35
    18e4:	8d a9       	ldd	r24, Y+53	; 0x35
    18e6:	9e a9       	ldd	r25, Y+54	; 0x36
    18e8:	9a ab       	std	Y+50, r25	; 0x32
    18ea:	89 ab       	std	Y+49, r24	; 0x31
    18ec:	89 a9       	ldd	r24, Y+49	; 0x31
    18ee:	9a a9       	ldd	r25, Y+50	; 0x32
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_Init+0xf0>
    18f4:	9a ab       	std	Y+50, r25	; 0x32
    18f6:	89 ab       	std	Y+49, r24	; 0x31

	_delay_ms(50);

	Dio_u8_SetPortDir(LCD_Data_Port, Dio_PortHigh);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	6f ef       	ldi	r22, 0xFF	; 255
    18fc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Dio_u8_SetPortDir>
	LCD_Send_Commoand(LCD_Function_Set);
    1900:	88 e3       	ldi	r24, 0x38	; 56
    1902:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a8 e4       	ldi	r26, 0x48	; 72
    190c:	b2 e4       	ldi	r27, 0x42	; 66
    190e:	8d a7       	std	Y+45, r24	; 0x2d
    1910:	9e a7       	std	Y+46, r25	; 0x2e
    1912:	af a7       	std	Y+47, r26	; 0x2f
    1914:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1916:	6d a5       	ldd	r22, Y+45	; 0x2d
    1918:	7e a5       	ldd	r23, Y+46	; 0x2e
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	2b ea       	ldi	r18, 0xAB	; 171
    1920:	3a ea       	ldi	r19, 0xAA	; 170
    1922:	4a e2       	ldi	r20, 0x2A	; 42
    1924:	50 e4       	ldi	r21, 0x40	; 64
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	89 a7       	std	Y+41, r24	; 0x29
    1930:	9a a7       	std	Y+42, r25	; 0x2a
    1932:	ab a7       	std	Y+43, r26	; 0x2b
    1934:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1936:	69 a5       	ldd	r22, Y+41	; 0x29
    1938:	7a a5       	ldd	r23, Y+42	; 0x2a
    193a:	8b a5       	ldd	r24, Y+43	; 0x2b
    193c:	9c a5       	ldd	r25, Y+44	; 0x2c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	1c f4       	brge	.+6      	; 0x1954 <LCD_Init+0x154>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	88 a7       	std	Y+40, r24	; 0x28
    1952:	91 c0       	rjmp	.+290    	; 0x1a76 <LCD_Init+0x276>
	else if (__tmp > 255)
    1954:	69 a5       	ldd	r22, Y+41	; 0x29
    1956:	7a a5       	ldd	r23, Y+42	; 0x2a
    1958:	8b a5       	ldd	r24, Y+43	; 0x2b
    195a:	9c a5       	ldd	r25, Y+44	; 0x2c
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	53 e4       	ldi	r21, 0x43	; 67
    1964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <LCD_Init+0x16e>
    196c:	7b c0       	rjmp	.+246    	; 0x1a64 <LCD_Init+0x264>
	{
		_delay_ms(__us / 1000.0);
    196e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1970:	7e a5       	ldd	r23, Y+46	; 0x2e
    1972:	8f a5       	ldd	r24, Y+47	; 0x2f
    1974:	98 a9       	ldd	r25, Y+48	; 0x30
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a e7       	ldi	r20, 0x7A	; 122
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8c a3       	std	Y+36, r24	; 0x24
    1988:	9d a3       	std	Y+37, r25	; 0x25
    198a:	ae a3       	std	Y+38, r26	; 0x26
    198c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6c a1       	ldd	r22, Y+36	; 0x24
    1990:	7d a1       	ldd	r23, Y+37	; 0x25
    1992:	8e a1       	ldd	r24, Y+38	; 0x26
    1994:	9f a1       	ldd	r25, Y+39	; 0x27
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	88 a3       	std	Y+32, r24	; 0x20
    19a8:	99 a3       	std	Y+33, r25	; 0x21
    19aa:	aa a3       	std	Y+34, r26	; 0x22
    19ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19ae:	68 a1       	ldd	r22, Y+32	; 0x20
    19b0:	79 a1       	ldd	r23, Y+33	; 0x21
    19b2:	8a a1       	ldd	r24, Y+34	; 0x22
    19b4:	9b a1       	ldd	r25, Y+35	; 0x23
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_Init+0x1d0>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9f 8f       	std	Y+31, r25	; 0x1f
    19cc:	8e 8f       	std	Y+30, r24	; 0x1e
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_Init+0x24e>
	else if (__tmp > 65535)
    19d0:	68 a1       	ldd	r22, Y+32	; 0x20
    19d2:	79 a1       	ldd	r23, Y+33	; 0x21
    19d4:	8a a1       	ldd	r24, Y+34	; 0x22
    19d6:	9b a1       	ldd	r25, Y+35	; 0x23
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_Init+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6c a1       	ldd	r22, Y+36	; 0x24
    19ea:	7d a1       	ldd	r23, Y+37	; 0x25
    19ec:	8e a1       	ldd	r24, Y+38	; 0x26
    19ee:	9f a1       	ldd	r25, Y+39	; 0x27
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_Init+0x230>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9d 8f       	std	Y+29, r25	; 0x1d
    1a18:	8c 8f       	std	Y+28, r24	; 0x1c
    1a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_Init+0x21e>
    1a22:	9d 8f       	std	Y+29, r25	; 0x1d
    1a24:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a2e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_Init+0x212>
    1a38:	24 c0       	rjmp	.+72     	; 0x1a82 <LCD_Init+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a40:	9b a1       	ldd	r25, Y+35	; 0x23
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9f 8f       	std	Y+31, r25	; 0x1f
    1a4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a52:	9b 8f       	std	Y+27, r25	; 0x1b
    1a54:	8a 8f       	std	Y+26, r24	; 0x1a
    1a56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_Init+0x25a>
    1a5e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a60:	8a 8f       	std	Y+26, r24	; 0x1a
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_Init+0x282>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a64:	69 a5       	ldd	r22, Y+41	; 0x29
    1a66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	88 a7       	std	Y+40, r24	; 0x28
    1a76:	88 a5       	ldd	r24, Y+40	; 0x28
    1a78:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a7a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a7c:	8a 95       	dec	r24
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_Init+0x27c>
    1a80:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);

	LCD_Send_Commoand(LCD_ON_OFF_Display);
    1a82:	8c e0       	ldi	r24, 0x0C	; 12
    1a84:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a8 e4       	ldi	r26, 0x48	; 72
    1a8e:	b2 e4       	ldi	r27, 0x42	; 66
    1a90:	8d 8b       	std	Y+21, r24	; 0x15
    1a92:	9e 8b       	std	Y+22, r25	; 0x16
    1a94:	af 8b       	std	Y+23, r26	; 0x17
    1a96:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a98:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa0:	2b ea       	ldi	r18, 0xAB	; 171
    1aa2:	3a ea       	ldi	r19, 0xAA	; 170
    1aa4:	4a e2       	ldi	r20, 0x2A	; 42
    1aa6:	50 e4       	ldi	r21, 0x40	; 64
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	ab 8b       	std	Y+19, r26	; 0x13
    1ab6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ab8:	69 89       	ldd	r22, Y+17	; 0x11
    1aba:	7a 89       	ldd	r23, Y+18	; 0x12
    1abc:	8b 89       	ldd	r24, Y+19	; 0x13
    1abe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	1c f4       	brge	.+6      	; 0x1ad6 <LCD_Init+0x2d6>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	88 8b       	std	Y+16, r24	; 0x10
    1ad4:	91 c0       	rjmp	.+290    	; 0x1bf8 <LCD_Init+0x3f8>
	else if (__tmp > 255)
    1ad6:	69 89       	ldd	r22, Y+17	; 0x11
    1ad8:	7a 89       	ldd	r23, Y+18	; 0x12
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	53 e4       	ldi	r21, 0x43	; 67
    1ae6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <LCD_Init+0x2f0>
    1aee:	7b c0       	rjmp	.+246    	; 0x1be6 <LCD_Init+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    1af0:	6d 89       	ldd	r22, Y+21	; 0x15
    1af2:	7e 89       	ldd	r23, Y+22	; 0x16
    1af4:	8f 89       	ldd	r24, Y+23	; 0x17
    1af6:	98 8d       	ldd	r25, Y+24	; 0x18
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a e7       	ldi	r20, 0x7A	; 122
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8c 87       	std	Y+12, r24	; 0x0c
    1b0a:	9d 87       	std	Y+13, r25	; 0x0d
    1b0c:	ae 87       	std	Y+14, r26	; 0x0e
    1b0e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b12:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a ef       	ldi	r20, 0xFA	; 250
    1b1e:	54 e4       	ldi	r21, 0x44	; 68
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	88 87       	std	Y+8, r24	; 0x08
    1b2a:	99 87       	std	Y+9, r25	; 0x09
    1b2c:	aa 87       	std	Y+10, r26	; 0x0a
    1b2e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b30:	68 85       	ldd	r22, Y+8	; 0x08
    1b32:	79 85       	ldd	r23, Y+9	; 0x09
    1b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_Init+0x352>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9f 83       	std	Y+7, r25	; 0x07
    1b4e:	8e 83       	std	Y+6, r24	; 0x06
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_Init+0x3d0>
	else if (__tmp > 65535)
    1b52:	68 85       	ldd	r22, Y+8	; 0x08
    1b54:	79 85       	ldd	r23, Y+9	; 0x09
    1b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_Init+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9f 83       	std	Y+7, r25	; 0x07
    1b90:	8e 83       	std	Y+6, r24	; 0x06
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_Init+0x3b2>
    1b94:	88 ec       	ldi	r24, 0xC8	; 200
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9d 83       	std	Y+5, r25	; 0x05
    1b9a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_Init+0x3a0>
    1ba4:	9d 83       	std	Y+5, r25	; 0x05
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    1baa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9f 83       	std	Y+7, r25	; 0x07
    1bb0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_Init+0x394>
    1bba:	24 c0       	rjmp	.+72     	; 0x1c04 <LCD_Init+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	68 85       	ldd	r22, Y+8	; 0x08
    1bbe:	79 85       	ldd	r23, Y+9	; 0x09
    1bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9f 83       	std	Y+7, r25	; 0x07
    1bce:	8e 83       	std	Y+6, r24	; 0x06
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	9b 83       	std	Y+3, r25	; 0x03
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_Init+0x3dc>
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_Init+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1be6:	69 89       	ldd	r22, Y+17	; 0x11
    1be8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	9c 89       	ldd	r25, Y+20	; 0x14
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	88 8b       	std	Y+16, r24	; 0x10
    1bf8:	88 89       	ldd	r24, Y+16	; 0x10
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	8a 95       	dec	r24
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_Init+0x3fe>
    1c02:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(50);

	LCD_Display_Clear();
    1c04:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCD_Display_Clear>

	LCD_Send_Commoand(LCD_Entry_Set_Mode);
    1c08:	86 e0       	ldi	r24, 0x06	; 6
    1c0a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>


}
    1c0e:	ee 96       	adiw	r28, 0x3e	; 62
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <LCD_Send_String>:

void LCD_Send_String (const u8 * Copy_StringPTR) {
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <LCD_Send_String+0x6>
    1c26:	0f 92       	push	r0
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	9b 83       	std	Y+3, r25	; 0x03
    1c2e:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_Iter = 0;
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <LCD_Send_String+0x30>

	while (Copy_StringPTR [Local_Iter] != '\0') {
		LCD_Send_Data(Copy_StringPTR [Local_Iter]);
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e2 0f       	add	r30, r18
    1c42:	f3 1f       	adc	r31, r19
    1c44:	80 81       	ld	r24, Z
    1c46:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_Send_Data>
		Local_Iter ++ ;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	8f 5f       	subi	r24, 0xFF	; 255
    1c4e:	89 83       	std	Y+1, r24	; 0x01

void LCD_Send_String (const u8 * Copy_StringPTR) {

	u8 Local_Iter = 0;

	while (Copy_StringPTR [Local_Iter] != '\0') {
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	80 81       	ld	r24, Z
    1c62:	88 23       	and	r24, r24
    1c64:	39 f7       	brne	.-50     	; 0x1c34 <LCD_Send_String+0x14>
		LCD_Send_Data(Copy_StringPTR [Local_Iter]);
		Local_Iter ++ ;

		}

	}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LCD_postion>:
void LCD_postion (u8 line, u8 x) {
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <LCD_postion+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02

	if ((line >= 2 ) || (x >=15)){
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	18 f4       	brcc	.+6      	; 0x1c8c <LCD_postion+0x1a>
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	8f 30       	cpi	r24, 0x0F	; 15
    1c8a:	18 f0       	brcs	.+6      	; 0x1c92 <LCD_postion+0x20>

		LCD_Send_Commoand(LCD_First_Raw);
    1c8c:	80 e8       	ldi	r24, 0x80	; 128
    1c8e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>
	}

	if (line == 0){
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	88 23       	and	r24, r24
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <LCD_postion+0x30>

		LCD_Send_Commoand(LCD_First_Raw + x);
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 58       	subi	r24, 0x80	; 128
    1c9c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <LCD_postion+0x3e>

	}
	else if (line == 1) {
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <LCD_postion+0x3e>

		LCD_Send_Commoand(LCD_Second_Raw + x);
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 54       	subi	r24, 0x40	; 64
    1cac:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_Send_Commoand>

	}
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <LCD_WriteNumber>:

void LCD_WriteNumber(u32 Number)
{
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	60 97       	sbiw	r28, 0x10	; 16
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	6d 87       	std	Y+13, r22	; 0x0d
    1cd4:	7e 87       	std	Y+14, r23	; 0x0e
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,arr[10],j;
    1cda:	1a 82       	std	Y+2, r1	; 0x02
	if(Number==0)
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ce2:	b8 89       	ldd	r27, Y+16	; 0x10
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	a1 05       	cpc	r26, r1
    1ce8:	b1 05       	cpc	r27, r1
    1cea:	91 f5       	brne	.+100    	; 0x1d50 <LCD_WriteNumber+0x96>
	LCD_Send_Data('0');
    1cec:	80 e3       	ldi	r24, 0x30	; 48
    1cee:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_Send_Data>
    1cf2:	4d c0       	rjmp	.+154    	; 0x1d8e <LCD_WriteNumber+0xd4>
	else{
			while(Number)
			{
				arr[i]=Number%10+'0';
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	08 2f       	mov	r16, r24
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	af 85       	ldd	r26, Y+15	; 0x0f
    1d00:	b8 89       	ldd	r27, Y+16	; 0x10
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodsi4>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	28 2f       	mov	r18, r24
    1d18:	20 5d       	subi	r18, 0xD0	; 208
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	03 96       	adiw	r24, 0x03	; 3
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e0 0f       	add	r30, r16
    1d22:	f1 1f       	adc	r31, r17
    1d24:	20 83       	st	Z, r18
				Number/=10;
    1d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2a:	af 85       	ldd	r26, Y+15	; 0x0f
    1d2c:	b8 89       	ldd	r27, Y+16	; 0x10
    1d2e:	2a e0       	ldi	r18, 0x0A	; 10
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodsi4>
    1d3e:	da 01       	movw	r26, r20
    1d40:	c9 01       	movw	r24, r18
    1d42:	8d 87       	std	Y+13, r24	; 0x0d
    1d44:	9e 87       	std	Y+14, r25	; 0x0e
    1d46:	af 87       	std	Y+15, r26	; 0x0f
    1d48:	b8 8b       	std	Y+16, r27	; 0x10
				i++;
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i=0,arr[10],j;
	if(Number==0)
	LCD_Send_Data('0');
	else{
			while(Number)
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d54:	af 85       	ldd	r26, Y+15	; 0x0f
    1d56:	b8 89       	ldd	r27, Y+16	; 0x10
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	a1 05       	cpc	r26, r1
    1d5c:	b1 05       	cpc	r27, r1
    1d5e:	51 f6       	brne	.-108    	; 0x1cf4 <LCD_WriteNumber+0x3a>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	11 c0       	rjmp	.+34     	; 0x1d88 <LCD_WriteNumber+0xce>
			{
				LCD_Send_Data(arr[j-1]);
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	21 50       	subi	r18, 0x01	; 1
    1d70:	30 40       	sbci	r19, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	03 96       	adiw	r24, 0x03	; 3
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_Send_Data>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	88 23       	and	r24, r24
    1d8c:	61 f7       	brne	.-40     	; 0x1d66 <LCD_WriteNumber+0xac>
			{
				LCD_Send_Data(arr[j-1]);
			}
	   }
}
    1d8e:	60 96       	adiw	r28, 0x10	; 16
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <UART_SendStr>:
	static u8 * Asyn_SendStr ;
	static u8 * Asyn_RecStr ;

/****************************Functions *************************************************/

void UART_SendStr (u8 * Str) {
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <UART_SendStr+0x6>
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9b 83       	std	Y+3, r25	; 0x03
    1db2:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
    1db4:	19 82       	std	Y+1, r1	; 0x01
    1db6:	0e c0       	rjmp	.+28     	; 0x1dd4 <UART_SendStr+0x30>
	while (Str [i] != '\0') {
		USART_SendByte(Str[i]);
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e2 0f       	add	r30, r18
    1dc6:	f3 1f       	adc	r31, r19
    1dc8:	80 81       	ld	r24, Z
    1dca:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>
		i++;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	89 83       	std	Y+1, r24	; 0x01
/****************************Functions *************************************************/

void UART_SendStr (u8 * Str) {

	u8 i = 0;
	while (Str [i] != '\0') {
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	fc 01       	movw	r30, r24
    1de0:	e2 0f       	add	r30, r18
    1de2:	f3 1f       	adc	r31, r19
    1de4:	80 81       	ld	r24, Z
    1de6:	88 23       	and	r24, r24
    1de8:	39 f7       	brne	.-50     	; 0x1db8 <UART_SendStr+0x14>
		USART_SendByte(Str[i]);
		i++;
	}
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <UART_ReciveStr>:

void UART_ReciveStr (u8 * Str){
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <UART_ReciveStr+0xa>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0 ;
    1e0a:	19 82       	std	Y+1, r1	; 0x01

	Str [i] = USART_ReciveByte();
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	8c 01       	movw	r16, r24
    1e18:	02 0f       	add	r16, r18
    1e1a:	13 1f       	adc	r17, r19
    1e1c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <UART_ReciveStr+0x4e>

	while (Str [i] != '#'){

		i++;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	8f 5f       	subi	r24, 0xFF	; 255
    1e2a:	89 83       	std	Y+1, r24	; 0x01
		Str [i] = USART_ReciveByte();
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	9b 81       	ldd	r25, Y+3	; 0x03
    1e36:	8c 01       	movw	r16, r24
    1e38:	02 0f       	add	r16, r18
    1e3a:	13 1f       	adc	r17, r19
    1e3c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24

	u8 i = 0 ;

	Str [i] = USART_ReciveByte();

	while (Str [i] != '#'){
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	fc 01       	movw	r30, r24
    1e50:	e2 0f       	add	r30, r18
    1e52:	f3 1f       	adc	r31, r19
    1e54:	80 81       	ld	r24, Z
    1e56:	83 32       	cpi	r24, 0x23	; 35
    1e58:	31 f7       	brne	.-52     	; 0x1e26 <UART_ReciveStr+0x30>

		i++;
		Str [i] = USART_ReciveByte();
	}

	Str [i] = '\0';
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	fc 01       	movw	r30, r24
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	10 82       	st	Z, r1
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <UART_SEND_Protocol>:

										/********************UART Protocols *******************/


void UART_SEND_Protocol (u8 * Str){
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <UART_SEND_Protocol+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <UART_SEND_Protocol+0x8>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9d 83       	std	Y+5, r25	; 0x05
    1e8c:	8c 83       	std	Y+4, r24	; 0x04

	u8 i = 0 ; u8 lens = 0; u8 sum = 0 ;
    1e8e:	1b 82       	std	Y+3, r1	; 0x03
    1e90:	1a 82       	std	Y+2, r1	; 0x02
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <UART_SEND_Protocol+0x38>

	while (Str [lens] != '\0'){

		sum +=  Str[lens];
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	90 81       	ld	r25, Z
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	89 0f       	add	r24, r25
    1eac:	89 83       	std	Y+1, r24	; 0x01
		lens++;
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	8a 83       	std	Y+2, r24	; 0x02

void UART_SEND_Protocol (u8 * Str){

	u8 i = 0 ; u8 lens = 0; u8 sum = 0 ;

	while (Str [lens] != '\0'){
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e2 0f       	add	r30, r18
    1ec2:	f3 1f       	adc	r31, r19
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	31 f7       	brne	.-52     	; 0x1e96 <UART_SEND_Protocol+0x1a>

		sum +=  Str[lens];
		lens++;
}
	USART_SendByte(lens);
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>
    1ed0:	0e c0       	rjmp	.+28     	; 0x1eee <UART_SEND_Protocol+0x72>

	while (Str [i] != '\0'){

		USART_SendByte(Str[i]);
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	fc 01       	movw	r30, r24
    1ede:	e2 0f       	add	r30, r18
    1ee0:	f3 1f       	adc	r31, r19
    1ee2:	80 81       	ld	r24, Z
    1ee4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>
		i++;
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		sum +=  Str[lens];
		lens++;
}
	USART_SendByte(lens);

	while (Str [i] != '\0'){
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	80 81       	ld	r24, Z
    1f00:	88 23       	and	r24, r24
    1f02:	39 f7       	brne	.-50     	; 0x1ed2 <UART_SEND_Protocol+0x56>

		USART_SendByte(Str[i]);
		i++;
	}

	USART_SendByte((u8 ) sum );
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>
	USART_SendByte((u8)(sum >> 8));
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	89 2f       	mov	r24, r25
    1f12:	99 0f       	add	r25, r25
    1f14:	99 0b       	sbc	r25, r25
    1f16:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <UART_Recive_Protocol>:

u8 UART_Recive_Protocol (u8 * Str)

	{
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	2b 97       	sbiw	r28, 0x0b	; 11
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	9a 87       	std	Y+10, r25	; 0x0a
    1f44:	89 87       	std	Y+9, r24	; 0x09

		u8 i=0 ,lens=0,firstbyte=0,secondbyte=0;
    1f46:	18 86       	std	Y+8, r1	; 0x08
    1f48:	1f 82       	std	Y+7, r1	; 0x07
    1f4a:	1e 82       	std	Y+6, r1	; 0x06
    1f4c:	1d 82       	std	Y+5, r1	; 0x05
		u16 sum_send=0,sum_calc=0;
    1f4e:	1c 82       	std	Y+4, r1	; 0x04
    1f50:	1b 82       	std	Y+3, r1	; 0x03
    1f52:	1a 82       	std	Y+2, r1	; 0x02
    1f54:	19 82       	std	Y+1, r1	; 0x01
		lens=USART_ReciveByte();
    1f56:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1f5a:	8f 83       	std	Y+7, r24	; 0x07



		for(i=0;i<lens;i++)
    1f5c:	18 86       	std	Y+8, r1	; 0x08
    1f5e:	20 c0       	rjmp	.+64     	; 0x1fa0 <UART_Recive_Protocol+0x76>
		{
			Str[i]=USART_ReciveByte();
    1f60:	88 85       	ldd	r24, Y+8	; 0x08
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8c 01       	movw	r16, r24
    1f6c:	02 0f       	add	r16, r18
    1f6e:	13 1f       	adc	r17, r19
    1f70:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1f74:	f8 01       	movw	r30, r16
    1f76:	80 83       	st	Z, r24

			sum_calc+=Str[i];
    1f78:	88 85       	ldd	r24, Y+8	; 0x08
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	fc 01       	movw	r30, r24
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	80 81       	ld	r24, Z
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	9a 83       	std	Y+2, r25	; 0x02
    1f98:	89 83       	std	Y+1, r24	; 0x01
		u16 sum_send=0,sum_calc=0;
		lens=USART_ReciveByte();



		for(i=0;i<lens;i++)
    1f9a:	88 85       	ldd	r24, Y+8	; 0x08
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	88 87       	std	Y+8, r24	; 0x08
    1fa0:	98 85       	ldd	r25, Y+8	; 0x08
    1fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa4:	98 17       	cp	r25, r24
    1fa6:	e0 f2       	brcs	.-72     	; 0x1f60 <UART_Recive_Protocol+0x36>

			sum_calc+=Str[i];

		}

		firstbyte  = USART_ReciveByte();
    1fa8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1fac:	8e 83       	std	Y+6, r24	; 0x06
		secondbyte = USART_ReciveByte();
    1fae:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <USART_ReciveByte>
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
		sum_send=firstbyte|(secondbyte<<8);
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	88 27       	eor	r24, r24
    1fc4:	82 2b       	or	r24, r18
    1fc6:	93 2b       	or	r25, r19
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03

		if(lens==i)
    1fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fce:	88 85       	ldd	r24, Y+8	; 0x08
    1fd0:	98 17       	cp	r25, r24
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <UART_Recive_Protocol+0xb0>
			/*Lens is a variable we will recive the number of letters on, i is counter we made
			*/
			return 1;
    1fd4:	f1 e0       	ldi	r31, 0x01	; 1
    1fd6:	fb 87       	std	Y+11, r31	; 0x0b
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <UART_Recive_Protocol+0xb2>
		else
			return 0;
    1fda:	1b 86       	std	Y+11, r1	; 0x0b
    1fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
	}
    1fde:	2b 96       	adiw	r28, 0x0b	; 11
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <UART_SendStr_Async>:
/******************************** SEND using Interrput service routine *****************/

void UART_SendStr_Async (u8 * Str ){
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <UART_SendStr_Async+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01

	Asyn_SendStr = Str ;
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	90 93 b8 00 	sts	0x00B8, r25
    200a:	80 93 b7 00 	sts	0x00B7, r24

	USART_SendByte(Str [0]);
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	80 81       	ld	r24, Z
    2014:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <USART_SendByte>

	UART_TX_Callback (TX_FUNC);
    2018:	87 e1       	ldi	r24, 0x17	; 23
    201a:	90 e1       	ldi	r25, 0x10	; 16
    201c:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_TX_Callback>

	TX_Interrput_Enable();
    2020:	0e 94 2e 11 	call	0x225c	; 0x225c <TX_Interrput_Enable>


}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <TX_FUNC>:

static void TX_FUNC(void ){
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62

	static u8 i = 1;

	if (Asyn_SendStr [i] != '\0'){
    2036:	20 91 b7 00 	lds	r18, 0x00B7
    203a:	30 91 b8 00 	lds	r19, 0x00B8
    203e:	80 91 6d 00 	lds	r24, 0x006D
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	f9 01       	movw	r30, r18
    2048:	e8 0f       	add	r30, r24
    204a:	f9 1f       	adc	r31, r25
    204c:	80 81       	ld	r24, Z
    204e:	88 23       	and	r24, r24
    2050:	a1 f0       	breq	.+40     	; 0x207a <TX_FUNC+0x4c>

		USART_SendByte_NOBlock(Asyn_SendStr [i]);
    2052:	20 91 b7 00 	lds	r18, 0x00B7
    2056:	30 91 b8 00 	lds	r19, 0x00B8
    205a:	80 91 6d 00 	lds	r24, 0x006D
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	f9 01       	movw	r30, r18
    2064:	e8 0f       	add	r30, r24
    2066:	f9 1f       	adc	r31, r25
    2068:	80 81       	ld	r24, Z
    206a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <USART_SendByte_NOBlock>

		i++;
    206e:	80 91 6d 00 	lds	r24, 0x006D
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	80 93 6d 00 	sts	0x006D, r24
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <TX_FUNC+0x56>
	}
	else {

		i = 1 ;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 6d 00 	sts	0x006D, r24

		TX_Interrput_Disable();
    2080:	0e 94 3c 11 	call	0x2278	; 0x2278 <TX_Interrput_Disable>

	}

}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <UART_RecStr_Async>:
/********************************Recveing Data using interrput *******************************/

void  UART_RecStr_Async (u8 * Str ){
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <UART_RecStr_Async+0x6>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01

	Asyn_RecStr = Str;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	90 93 ba 00 	sts	0x00BA, r25
    20a0:	80 93 b9 00 	sts	0x00B9, r24
	RX_Interrput_Enbale ();
    20a4:	0e 94 12 11 	call	0x2224	; 0x2224 <RX_Interrput_Enbale>
	UART_RX_Callback(RX_FUNC);
    20a8:	8d e5       	ldi	r24, 0x5D	; 93
    20aa:	90 e1       	ldi	r25, 0x10	; 16
    20ac:	0e 94 78 11 	call	0x22f0	; 0x22f0 <UART_RX_Callback>


}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <RX_FUNC>:



static void RX_FUNC(void ) {
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62

	static u8 i = 0;
		Asyn_RecStr [i] =  USART_RecByte_NOBlock ();
    20c6:	20 91 b9 00 	lds	r18, 0x00B9
    20ca:	30 91 ba 00 	lds	r19, 0x00BA
    20ce:	80 91 b6 00 	lds	r24, 0x00B6
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	89 01       	movw	r16, r18
    20d8:	08 0f       	add	r16, r24
    20da:	19 1f       	adc	r17, r25
    20dc:	0e 94 08 11 	call	0x2210	; 0x2210 <USART_RecByte_NOBlock>
    20e0:	f8 01       	movw	r30, r16
    20e2:	80 83       	st	Z, r24
		i++ ;
    20e4:	80 91 b6 00 	lds	r24, 0x00B6
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	80 93 b6 00 	sts	0x00B6, r24




}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	08 95       	ret

000020f8 <USART_Init>:
const u16 BaudRateArray[Total_speed][Total_Freq][Total_Baud]=
		 {{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
		  {{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};


void USART_Init(void ){
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <USART_Init+0x6>
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62

	u8 UCSRC_Var = 0 ;
    2104:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_Var = 0 ;
    2106:	1a 82       	std	Y+2, r1	; 0x02
    2108:	19 82       	std	Y+1, r1	; 0x01
	/*************************** The speed Config *******************************/
	#if (Speed_Mode == Normal_speed)

		Clear_Bit(UCSRA,U2X_PIN);
    210a:	ab e2       	ldi	r26, 0x2B	; 43
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	eb e2       	ldi	r30, 0x2B	; 43
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8d 7f       	andi	r24, 0xFD	; 253
    2116:	8c 93       	st	X, r24
		Set_Bit (UCSRA, U2X_PIN);

	#endif

	/**************************** Character Size Congig *************************/
		Set_Bit(UCSRC_Var, URSEL_PIN);
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	80 68       	ori	r24, 0x80	; 128
    211c:	8b 83       	std	Y+3, r24	; 0x03
		Clear_Bit(UCSRC_Var, UCSZ0_PIN);
		Set_Bit(UCSRC_Var, UCSZ1_PIN);
		Clear_Bit(UCSRB, UCSZ2_PIN);

	#elif (Character_size == _8_bit_Data)
		Set_Bit(UCSRC_Var, UCSZ0_PIN);
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	82 60       	ori	r24, 0x02	; 2
    2122:	8b 83       	std	Y+3, r24	; 0x03
		Set_Bit(UCSRC_Var, UCSZ1_PIN);
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	84 60       	ori	r24, 0x04	; 4
    2128:	8b 83       	std	Y+3, r24	; 0x03
		Clear_Bit(UCSRB, UCSZ2_PIN);
    212a:	aa e2       	ldi	r26, 0x2A	; 42
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ea e2       	ldi	r30, 0x2A	; 42
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24

	/********************************* Stops Bits ********************************/

	#if (Stop_Bit == Stop_1_Bit)

		Clear_Bit(UCSRC_Var, USBS_PIN);
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	87 7f       	andi	r24, 0xF7	; 247
    213c:	8b 83       	std	Y+3, r24	; 0x03
	/*********************************Synch Mode *********************************/


	#if (Sync_mode == Aysnchronous_opreation)

		Clear_Bit(UCSRC_Var, UMSEL_PIN);
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	8f 7b       	andi	r24, 0xBF	; 191
    2142:	8b 83       	std	Y+3, r24	; 0x03

	/********************************Parity Mode**********************************/

	#if (parity_Mode == parity_Disabled)

		Clear_Bit(UCSRC_Var, UPM0_PIN);
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	8f 7e       	andi	r24, 0xEF	; 239
    2148:	8b 83       	std	Y+3, r24	; 0x03
		Clear_Bit(UCSRC_Var, UPM1_PIN);
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	8f 7d       	andi	r24, 0xDF	; 223
    214e:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	/********************** Set one to URSEL bit to UARSC ************************/


	UCSRC = UCSRC_Var;
    2150:	e0 e4       	ldi	r30, 0x40	; 64
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	80 83       	st	Z, r24
	/***** Now the config of URSC is finshed****************/


	/************************************** Write The Baud Rate on UBRR Reg *****************/

	UBRR_Var = BaudRateArray[Speed_Mode][F_cpu][Baud_Rate];
    2158:	80 91 7e 00 	lds	r24, 0x007E
    215c:	90 91 7f 00 	lds	r25, 0x007F
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (u8)(UBRR_Var>>8);
    2164:	e0 e4       	ldi	r30, 0x40	; 64
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	89 2f       	mov	r24, r25
    216e:	99 27       	eor	r25, r25
    2170:	80 83       	st	Z, r24
	UBRRL = (u8)(UBRR_Var);
    2172:	e9 e2       	ldi	r30, 0x29	; 41
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	80 83       	st	Z, r24

	/************************************ENBALBE Transmitter and Recvier ********************/

	Set_Bit(UCSRB,TXEN_PIN );
    217a:	aa e2       	ldi	r26, 0x2A	; 42
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	ea e2       	ldi	r30, 0x2A	; 42
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	88 60       	ori	r24, 0x08	; 8
    2186:	8c 93       	st	X, r24
	Set_Bit(UCSRB, RXEN_PIN);
    2188:	aa e2       	ldi	r26, 0x2A	; 42
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	ea e2       	ldi	r30, 0x2A	; 42
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 61       	ori	r24, 0x10	; 16
    2194:	8c 93       	st	X, r24


}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <USART_SendByte>:



 	 	 	 	 	 	 /*******************Sending and Reciveing data with polling Functions ***********************/

void USART_SendByte(u8 Data ) {
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	89 83       	std	Y+1, r24	; 0x01


	while (Get_Bit(UCSRA ,UDRE_PIN) == 0 ) ;
    21ae:	eb e2       	ldi	r30, 0x2B	; 43
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	82 95       	swap	r24
    21b6:	86 95       	lsr	r24
    21b8:	87 70       	andi	r24, 0x07	; 7
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	81 70       	andi	r24, 0x01	; 1
    21c0:	90 70       	andi	r25, 0x00	; 0
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	a1 f3       	breq	.-24     	; 0x21ae <USART_SendByte+0xc>

		UDR = Data ;
    21c6:	ec e2       	ldi	r30, 0x2C	; 44
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	80 83       	st	Z, r24

}
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <USART_ReciveByte>:

u8   USART_ReciveByte (void ){
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62


	while (Get_Bit(UCSRA ,RXC_PIN) == 0) ;
    21de:	eb e2       	ldi	r30, 0x2B	; 43
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	88 23       	and	r24, r24
    21e6:	dc f7       	brge	.-10     	; 0x21de <USART_ReciveByte+0x8>
		return UDR;
    21e8:	ec e2       	ldi	r30, 0x2C	; 44
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <USART_SendByte_NOBlock>:
/**********************Interrput*****************/
void USART_SendByte_NOBlock (u8 Data){
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01

		UDR = Data ;
    2200:	ec e2       	ldi	r30, 0x2C	; 44
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	80 83       	st	Z, r24

}
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <USART_RecByte_NOBlock>:

u8  USART_RecByte_NOBlock (void){
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62


	return UDR ;
    2218:	ec e2       	ldi	r30, 0x2C	; 44
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
}
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <RX_Interrput_Enbale>:

/********************************UART interrput  **********************************/


void RX_Interrput_Enbale (void ){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(UCSRB , RXCIE_PIN);
    222c:	aa e2       	ldi	r26, 0x2A	; 42
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	ea e2       	ldi	r30, 0x2A	; 42
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 68       	ori	r24, 0x80	; 128
    2238:	8c 93       	st	X, r24

}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <RX_Interrput_Disable>:

void RX_Interrput_Disable (void ){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(UCSRB , RXCIE_PIN);
    2248:	aa e2       	ldi	r26, 0x2A	; 42
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	ea e2       	ldi	r30, 0x2A	; 42
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	8c 93       	st	X, r24

}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <TX_Interrput_Enable>:

void TX_Interrput_Enable(void ){
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(UCSRB , TXCIE_PIN);
    2264:	aa e2       	ldi	r26, 0x2A	; 42
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ea e2       	ldi	r30, 0x2A	; 42
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	80 64       	ori	r24, 0x40	; 64
    2270:	8c 93       	st	X, r24

}
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <TX_Interrput_Disable>:

void TX_Interrput_Disable(void ){
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(UCSRB , TXCIE_PIN);
    2280:	aa e2       	ldi	r26, 0x2A	; 42
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	ea e2       	ldi	r30, 0x2A	; 42
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8f 7b       	andi	r24, 0xBF	; 191
    228c:	8c 93       	st	X, r24

}
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <Buffer_Interrput_Enable>:

void Buffer_Interrput_Enable (void ){
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(UCSRB , UDRIE_PIN);
    229c:	aa e2       	ldi	r26, 0x2A	; 42
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e2       	ldi	r30, 0x2A	; 42
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 62       	ori	r24, 0x20	; 32
    22a8:	8c 93       	st	X, r24
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <Buffer_Interrput_Disable>:

void Buffer_Interrput_Disable (void ){
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB , UDRIE_PIN);
    22b8:	aa e2       	ldi	r26, 0x2A	; 42
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	ea e2       	ldi	r30, 0x2A	; 42
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 7d       	andi	r24, 0xDF	; 223
    22c4:	8c 93       	st	X, r24

}
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <UART_TX_Callback>:
/*****************************Callback functions **********************************/

void UART_TX_Callback (void (*Local_Ptr)(void )) {
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <UART_TX_Callback+0x6>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01

	UART_TX_Ptr = Local_Ptr;
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	90 93 bc 00 	sts	0x00BC, r25
    22e2:	80 93 bb 00 	sts	0x00BB, r24

}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <UART_RX_Callback>:

void UART_RX_Callback (void (*Local_Ptr)(void )) {
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <UART_RX_Callback+0x6>
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01

	UART_RX_Ptr = Local_Ptr;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	90 93 be 00 	sts	0x00BE, r25
    2306:	80 93 bd 00 	sts	0x00BD, r24

}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <__vector_15>:
/************************ISR **********************************************/


void __vector_15(void)__attribute__((signal));
void __vector_15(){
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	2f 93       	push	r18
    2320:	3f 93       	push	r19
    2322:	4f 93       	push	r20
    2324:	5f 93       	push	r21
    2326:	6f 93       	push	r22
    2328:	7f 93       	push	r23
    232a:	8f 93       	push	r24
    232c:	9f 93       	push	r25
    232e:	af 93       	push	r26
    2330:	bf 93       	push	r27
    2332:	ef 93       	push	r30
    2334:	ff 93       	push	r31
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62

	if (UART_TX_Ptr != Null) {
    233e:	80 91 bb 00 	lds	r24, 0x00BB
    2342:	90 91 bc 00 	lds	r25, 0x00BC
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	29 f0       	breq	.+10     	; 0x2354 <__vector_15+0x40>
		UART_TX_Ptr() ;
    234a:	e0 91 bb 00 	lds	r30, 0x00BB
    234e:	f0 91 bc 00 	lds	r31, 0x00BC
    2352:	09 95       	icall
	}
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	ff 91       	pop	r31
    235a:	ef 91       	pop	r30
    235c:	bf 91       	pop	r27
    235e:	af 91       	pop	r26
    2360:	9f 91       	pop	r25
    2362:	8f 91       	pop	r24
    2364:	7f 91       	pop	r23
    2366:	6f 91       	pop	r22
    2368:	5f 91       	pop	r21
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	0f 90       	pop	r0
    2376:	1f 90       	pop	r1
    2378:	18 95       	reti

0000237a <__vector_13>:


void __vector_13(void)__attribute__((signal));
void __vector_13(){
    237a:	1f 92       	push	r1
    237c:	0f 92       	push	r0
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	0f 92       	push	r0
    2382:	11 24       	eor	r1, r1
    2384:	2f 93       	push	r18
    2386:	3f 93       	push	r19
    2388:	4f 93       	push	r20
    238a:	5f 93       	push	r21
    238c:	6f 93       	push	r22
    238e:	7f 93       	push	r23
    2390:	8f 93       	push	r24
    2392:	9f 93       	push	r25
    2394:	af 93       	push	r26
    2396:	bf 93       	push	r27
    2398:	ef 93       	push	r30
    239a:	ff 93       	push	r31
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62

	if (UART_RX_Ptr != Null) {
    23a4:	80 91 bd 00 	lds	r24, 0x00BD
    23a8:	90 91 be 00 	lds	r25, 0x00BE
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	29 f0       	breq	.+10     	; 0x23ba <__vector_13+0x40>
		UART_RX_Ptr() ;
    23b0:	e0 91 bd 00 	lds	r30, 0x00BD
    23b4:	f0 91 be 00 	lds	r31, 0x00BE
    23b8:	09 95       	icall
	}
}
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <main>:
#include "LCD_Interface.h"
#include "avr/delay.h"



int main() {
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	c4 56       	subi	r28, 0x64	; 100
    23ea:	d0 40       	sbci	r29, 0x00	; 0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61

	u8 Data [100] = {0} ;
    23f6:	84 e6       	ldi	r24, 0x64	; 100
    23f8:	fe 01       	movw	r30, r28
    23fa:	31 96       	adiw	r30, 0x01	; 1
    23fc:	df 01       	movw	r26, r30
    23fe:	98 2f       	mov	r25, r24
    2400:	1d 92       	st	X+, r1
    2402:	9a 95       	dec	r25
    2404:	e9 f7       	brne	.-6      	; 0x2400 <main+0x20>

	Dio_u8_SetPinDir(Group_B, PIN5, Dio_PinOutput);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	65 e0       	ldi	r22, 0x05	; 5
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 37 07 	call	0xe6e	; 0xe6e <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(Group_B, PIN6, Dio_PinOutput);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	66 e0       	ldi	r22, 0x06	; 6
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 37 07 	call	0xe6e	; 0xe6e <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(Group_B, PIN7, Dio_PinOutput);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	67 e0       	ldi	r22, 0x07	; 7
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 37 07 	call	0xe6e	; 0xe6e <Dio_u8_SetPinDir>
	LCD_Init();
    2424:	0e 94 00 0c 	call	0x1800	; 0x1800 <LCD_Init>
	USART_Init();
    2428:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <USART_Init>
	Global_interrput_Enable();
    242c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Global_interrput_Enable>
	UART_SendStr_Async("Omar");
    2430:	80 e6       	ldi	r24, 0x60	; 96
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_SendStr_Async>
    2438:	ff cf       	rjmp	.-2      	; 0x2438 <main+0x58>

0000243a <__udivmodsi4>:
    243a:	a1 e2       	ldi	r26, 0x21	; 33
    243c:	1a 2e       	mov	r1, r26
    243e:	aa 1b       	sub	r26, r26
    2440:	bb 1b       	sub	r27, r27
    2442:	fd 01       	movw	r30, r26
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <__udivmodsi4_ep>

00002446 <__udivmodsi4_loop>:
    2446:	aa 1f       	adc	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	ee 1f       	adc	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	a2 17       	cp	r26, r18
    2450:	b3 07       	cpc	r27, r19
    2452:	e4 07       	cpc	r30, r20
    2454:	f5 07       	cpc	r31, r21
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__udivmodsi4_ep>
    2458:	a2 1b       	sub	r26, r18
    245a:	b3 0b       	sbc	r27, r19
    245c:	e4 0b       	sbc	r30, r20
    245e:	f5 0b       	sbc	r31, r21

00002460 <__udivmodsi4_ep>:
    2460:	66 1f       	adc	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	1a 94       	dec	r1
    246a:	69 f7       	brne	.-38     	; 0x2446 <__udivmodsi4_loop>
    246c:	60 95       	com	r22
    246e:	70 95       	com	r23
    2470:	80 95       	com	r24
    2472:	90 95       	com	r25
    2474:	9b 01       	movw	r18, r22
    2476:	ac 01       	movw	r20, r24
    2478:	bd 01       	movw	r22, r26
    247a:	cf 01       	movw	r24, r30
    247c:	08 95       	ret

0000247e <__prologue_saves__>:
    247e:	2f 92       	push	r2
    2480:	3f 92       	push	r3
    2482:	4f 92       	push	r4
    2484:	5f 92       	push	r5
    2486:	6f 92       	push	r6
    2488:	7f 92       	push	r7
    248a:	8f 92       	push	r8
    248c:	9f 92       	push	r9
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	ca 1b       	sub	r28, r26
    24a8:	db 0b       	sbc	r29, r27
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	09 94       	ijmp

000024b6 <__epilogue_restores__>:
    24b6:	2a 88       	ldd	r2, Y+18	; 0x12
    24b8:	39 88       	ldd	r3, Y+17	; 0x11
    24ba:	48 88       	ldd	r4, Y+16	; 0x10
    24bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    24be:	6e 84       	ldd	r6, Y+14	; 0x0e
    24c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c8:	b9 84       	ldd	r11, Y+9	; 0x09
    24ca:	c8 84       	ldd	r12, Y+8	; 0x08
    24cc:	df 80       	ldd	r13, Y+7	; 0x07
    24ce:	ee 80       	ldd	r14, Y+6	; 0x06
    24d0:	fd 80       	ldd	r15, Y+5	; 0x05
    24d2:	0c 81       	ldd	r16, Y+4	; 0x04
    24d4:	1b 81       	ldd	r17, Y+3	; 0x03
    24d6:	aa 81       	ldd	r26, Y+2	; 0x02
    24d8:	b9 81       	ldd	r27, Y+1	; 0x01
    24da:	ce 0f       	add	r28, r30
    24dc:	d1 1d       	adc	r29, r1
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	ed 01       	movw	r28, r26
    24ea:	08 95       	ret

000024ec <_exit>:
    24ec:	f8 94       	cli

000024ee <__stop_program>:
    24ee:	ff cf       	rjmp	.-2      	; 0x24ee <__stop_program>
