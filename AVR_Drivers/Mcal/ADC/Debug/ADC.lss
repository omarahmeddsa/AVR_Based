
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002be0  00002c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800070  00800070  00002c84  2**0
                  ALLOC
  3 .stab         00002538  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c3  00000000  00000000  000051bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000667f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000692f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009463  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a210  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_10>
      2c:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <main>
      8a:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
static void (*ADC_Conversion)(void ) = Null ;

/*********************************************************************
 * Implemantion
 **********************************************************************/
void ADC_Init (Reference_Selection type , Prescaler scaler , Analog_Channel channel,ADC_Trigger_source Src){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
     b60:	2c 83       	std	Y+4, r18	; 0x04
	 // Accessing the Enum
	// Choose the Voltage Reference of the ADC
	switch (type){
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	3a 87       	std	Y+10, r19	; 0x0a
     b6a:	29 87       	std	Y+9, r18	; 0x09
     b6c:	89 85       	ldd	r24, Y+9	; 0x09
     b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	c1 f0       	breq	.+48     	; 0xba6 <ADC_Init+0x60>
     b76:	29 85       	ldd	r18, Y+9	; 0x09
     b78:	3a 85       	ldd	r19, Y+10	; 0x0a
     b7a:	23 30       	cpi	r18, 0x03	; 3
     b7c:	31 05       	cpc	r19, r1
     b7e:	11 f1       	breq	.+68     	; 0xbc4 <ADC_Init+0x7e>
     b80:	89 85       	ldd	r24, Y+9	; 0x09
     b82:	9a 85       	ldd	r25, Y+10	; 0x0a
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	61 f5       	brne	.+88     	; 0xbe0 <ADC_Init+0x9a>

	case AREF :
		Clear_Bit(ADMUX_u8 , REFS0);
     b88:	a7 e2       	ldi	r26, 0x27	; 39
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 7b       	andi	r24, 0xBF	; 191
     b94:	8c 93       	st	X, r24
		Clear_Bit(ADMUX_u8 , REFS1);
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	8c 93       	st	X, r24
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <ADC_Init+0x9a>
		break ;
	case AVCC:
		Set_Bit(ADMUX_u8 , REFS0);
     ba6:	a7 e2       	ldi	r26, 0x27	; 39
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e7 e2       	ldi	r30, 0x27	; 39
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	8c 93       	st	X, r24
		Clear_Bit(ADMUX_u8 , REFS1);
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <ADC_Init+0x9a>
		break;

	case Internal_2Volt :
		Set_Bit(ADMUX_u8 , REFS0);
     bc4:	a7 e2       	ldi	r26, 0x27	; 39
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e7 e2       	ldi	r30, 0x27	; 39
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	8c 93       	st	X, r24
		Set_Bit(ADMUX_u8 , REFS1);
     bd2:	a7 e2       	ldi	r26, 0x27	; 39
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e2       	ldi	r30, 0x27	; 39
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	8c 93       	st	X, r24
		break;
	}

	// choose between Left or Right Adjust

	Clear_Bit(ADMUX_u8, ADLAR);  // Right Adjusted
     be0:	a7 e2       	ldi	r26, 0x27	; 39
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e7 e2       	ldi	r30, 0x27	; 39
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8f 7d       	andi	r24, 0xDF	; 223
     bec:	8c 93       	st	X, r24


	switch (scaler){
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	38 87       	std	Y+8, r19	; 0x08
     bf6:	2f 83       	std	Y+7, r18	; 0x07
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	98 85       	ldd	r25, Y+8	; 0x08
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <ADC_Init+0xbe>
     c02:	6a c0       	rjmp	.+212    	; 0xcd8 <ADC_Init+0x192>
     c04:	2f 81       	ldd	r18, Y+7	; 0x07
     c06:	38 85       	ldd	r19, Y+8	; 0x08
     c08:	24 30       	cpi	r18, 0x04	; 4
     c0a:	31 05       	cpc	r19, r1
     c0c:	84 f4       	brge	.+32     	; 0xc2e <ADC_Init+0xe8>
     c0e:	8f 81       	ldd	r24, Y+7	; 0x07
     c10:	98 85       	ldd	r25, Y+8	; 0x08
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	a1 f1       	breq	.+104    	; 0xc80 <ADC_Init+0x13a>
     c18:	2f 81       	ldd	r18, Y+7	; 0x07
     c1a:	38 85       	ldd	r19, Y+8	; 0x08
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	0c f0       	brlt	.+2      	; 0xc24 <ADC_Init+0xde>
     c22:	44 c0       	rjmp	.+136    	; 0xcac <ADC_Init+0x166>
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	98 85       	ldd	r25, Y+8	; 0x08
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	a1 f0       	breq	.+40     	; 0xc54 <ADC_Init+0x10e>
     c2c:	ac c0       	rjmp	.+344    	; 0xd86 <ADC_Init+0x240>
     c2e:	2f 81       	ldd	r18, Y+7	; 0x07
     c30:	38 85       	ldd	r19, Y+8	; 0x08
     c32:	25 30       	cpi	r18, 0x05	; 5
     c34:	31 05       	cpc	r19, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <ADC_Init+0xf4>
     c38:	7b c0       	rjmp	.+246    	; 0xd30 <ADC_Init+0x1ea>
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	91 05       	cpc	r25, r1
     c42:	0c f4       	brge	.+2      	; 0xc46 <ADC_Init+0x100>
     c44:	5f c0       	rjmp	.+190    	; 0xd04 <ADC_Init+0x1be>
     c46:	2f 81       	ldd	r18, Y+7	; 0x07
     c48:	38 85       	ldd	r19, Y+8	; 0x08
     c4a:	26 30       	cpi	r18, 0x06	; 6
     c4c:	31 05       	cpc	r19, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <ADC_Init+0x10c>
     c50:	85 c0       	rjmp	.+266    	; 0xd5c <ADC_Init+0x216>
     c52:	99 c0       	rjmp	.+306    	; 0xd86 <ADC_Init+0x240>

	case Division_2 :
		Set_Bit(ADCSRA_u8, ADPS0);
     c54:	a6 e2       	ldi	r26, 0x26	; 38
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e6 e2       	ldi	r30, 0x26	; 38
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	81 60       	ori	r24, 0x01	; 1
     c60:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 ,ADPS1);
     c62:	a6 e2       	ldi	r26, 0x26	; 38
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e6 e2       	ldi	r30, 0x26	; 38
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8d 7f       	andi	r24, 0xFD	; 253
     c6e:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 , ADPS2);
     c70:	a6 e2       	ldi	r26, 0x26	; 38
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e6 e2       	ldi	r30, 0x26	; 38
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8b 7f       	andi	r24, 0xFB	; 251
     c7c:	8c 93       	st	X, r24
     c7e:	83 c0       	rjmp	.+262    	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_4 :
		Clear_Bit(ADCSRA_u8, ADPS0);
     c80:	a6 e2       	ldi	r26, 0x26	; 38
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e6 e2       	ldi	r30, 0x26	; 38
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 ,ADPS1);
     c8e:	a6 e2       	ldi	r26, 0x26	; 38
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e6 e2       	ldi	r30, 0x26	; 38
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 , ADPS2);
     c9c:	a6 e2       	ldi	r26, 0x26	; 38
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e6 e2       	ldi	r30, 0x26	; 38
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8b 7f       	andi	r24, 0xFB	; 251
     ca8:	8c 93       	st	X, r24
     caa:	6d c0       	rjmp	.+218    	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_8 :
		Set_Bit(ADCSRA_u8, ADPS0);
     cac:	a6 e2       	ldi	r26, 0x26	; 38
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e6 e2       	ldi	r30, 0x26	; 38
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 ,ADPS1);
     cba:	a6 e2       	ldi	r26, 0x26	; 38
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e6 e2       	ldi	r30, 0x26	; 38
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	82 60       	ori	r24, 0x02	; 2
     cc6:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 , ADPS2);
     cc8:	a6 e2       	ldi	r26, 0x26	; 38
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e6 e2       	ldi	r30, 0x26	; 38
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8b 7f       	andi	r24, 0xFB	; 251
     cd4:	8c 93       	st	X, r24
     cd6:	57 c0       	rjmp	.+174    	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_16 :
		Clear_Bit(ADCSRA_u8, ADPS0);
     cd8:	a6 e2       	ldi	r26, 0x26	; 38
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e6 e2       	ldi	r30, 0x26	; 38
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8e 7f       	andi	r24, 0xFE	; 254
     ce4:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 ,ADPS1);
     ce6:	a6 e2       	ldi	r26, 0x26	; 38
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 , ADPS2);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	41 c0       	rjmp	.+130    	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_32 :
		Set_Bit(ADCSRA_u8, ADPS0);
     d04:	a6 e2       	ldi	r26, 0x26	; 38
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e6 e2       	ldi	r30, 0x26	; 38
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
		Clear_Bit(ADCSRA_u8 ,ADPS1);
     d12:	a6 e2       	ldi	r26, 0x26	; 38
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e6 e2       	ldi	r30, 0x26	; 38
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8d 7f       	andi	r24, 0xFD	; 253
     d1e:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 , ADPS2);
     d20:	a6 e2       	ldi	r26, 0x26	; 38
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e6 e2       	ldi	r30, 0x26	; 38
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	84 60       	ori	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	2b c0       	rjmp	.+86     	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_64 :
		Clear_Bit(ADCSRA_u8, ADPS0);
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8e 7f       	andi	r24, 0xFE	; 254
     d3c:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 ,ADPS1);
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 , ADPS2);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	84 60       	ori	r24, 0x04	; 4
     d58:	8c 93       	st	X, r24
     d5a:	15 c0       	rjmp	.+42     	; 0xd86 <ADC_Init+0x240>
		break;
	case Division_128 :
		Set_Bit(ADCSRA_u8, ADPS0);
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 , ADPS1);
     d6a:	a6 e2       	ldi	r26, 0x26	; 38
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e6 e2       	ldi	r30, 0x26	; 38
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	8c 93       	st	X, r24
		Set_Bit(ADCSRA_u8 , ADPS2);
     d78:	a6 e2       	ldi	r26, 0x26	; 38
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	84 60       	ori	r24, 0x04	; 4
     d84:	8c 93       	st	X, r24
		break;
	}

	// Set the pre-scaler
	ADMUX_u8 &= ADMUX_Mask;
     d86:	a7 e2       	ldi	r26, 0x27	; 39
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e7 e2       	ldi	r30, 0x27	; 39
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 7e       	andi	r24, 0xE0	; 224
     d92:	8c 93       	st	X, r24
	ADMUX_u8 |= channel;
     d94:	a7 e2       	ldi	r26, 0x27	; 39
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e7 e2       	ldi	r30, 0x27	; 39
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	90 81       	ld	r25, Z
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	89 2b       	or	r24, r25
     da2:	8c 93       	st	X, r24

	switch (Src){
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3e 83       	std	Y+6, r19	; 0x06
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <ADC_Init+0x274>
     db8:	6a c0       	rjmp	.+212    	; 0xe8e <ADC_Init+0x348>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	24 30       	cpi	r18, 0x04	; 4
     dc0:	31 05       	cpc	r19, r1
     dc2:	84 f4       	brge	.+32     	; 0xde4 <ADC_Init+0x29e>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	91 05       	cpc	r25, r1
     dcc:	a1 f1       	breq	.+104    	; 0xe36 <ADC_Init+0x2f0>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	0c f0       	brlt	.+2      	; 0xdda <ADC_Init+0x294>
     dd8:	44 c0       	rjmp	.+136    	; 0xe62 <ADC_Init+0x31c>
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	a1 f0       	breq	.+40     	; 0xe0a <ADC_Init+0x2c4>
     de2:	ac c0       	rjmp	.+344    	; 0xf3c <ADC_Init+0x3f6>
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	25 30       	cpi	r18, 0x05	; 5
     dea:	31 05       	cpc	r19, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <ADC_Init+0x2aa>
     dee:	7b c0       	rjmp	.+246    	; 0xee6 <ADC_Init+0x3a0>
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	85 30       	cpi	r24, 0x05	; 5
     df6:	91 05       	cpc	r25, r1
     df8:	0c f4       	brge	.+2      	; 0xdfc <ADC_Init+0x2b6>
     dfa:	5f c0       	rjmp	.+190    	; 0xeba <ADC_Init+0x374>
     dfc:	2d 81       	ldd	r18, Y+5	; 0x05
     dfe:	3e 81       	ldd	r19, Y+6	; 0x06
     e00:	26 30       	cpi	r18, 0x06	; 6
     e02:	31 05       	cpc	r19, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <ADC_Init+0x2c2>
     e06:	85 c0       	rjmp	.+266    	; 0xf12 <ADC_Init+0x3cc>
     e08:	99 c0       	rjmp	.+306    	; 0xf3c <ADC_Init+0x3f6>

	case Free_Running_mode:

		Clear_Bit(SFIOR_u8, ADTS0);
     e0a:	a0 e5       	ldi	r26, 0x50	; 80
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e0 e5       	ldi	r30, 0x50	; 80
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS1);
     e18:	a0 e5       	ldi	r26, 0x50	; 80
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e0 e5       	ldi	r30, 0x50	; 80
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7b       	andi	r24, 0xBF	; 191
     e24:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS2);
     e26:	a0 e5       	ldi	r26, 0x50	; 80
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e0 e5       	ldi	r30, 0x50	; 80
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 77       	andi	r24, 0x7F	; 127
     e32:	8c 93       	st	X, r24
     e34:	83 c0       	rjmp	.+262    	; 0xf3c <ADC_Init+0x3f6>

		break;

	case Analog_Comp :

		Set_Bit(SFIOR_u8, ADTS0);
     e36:	a0 e5       	ldi	r26, 0x50	; 80
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e0 e5       	ldi	r30, 0x50	; 80
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 62       	ori	r24, 0x20	; 32
     e42:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS1);
     e44:	a0 e5       	ldi	r26, 0x50	; 80
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e5       	ldi	r30, 0x50	; 80
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS2);
     e52:	a0 e5       	ldi	r26, 0x50	; 80
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e5       	ldi	r30, 0x50	; 80
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
     e60:	6d c0       	rjmp	.+218    	; 0xf3c <ADC_Init+0x3f6>
		break;

	case EXTI0 :
		Clear_Bit(SFIOR_u8, ADTS0);
     e62:	a0 e5       	ldi	r26, 0x50	; 80
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e0 e5       	ldi	r30, 0x50	; 80
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	8c 93       	st	X, r24
		Set_Bit  (SFIOR_u8, ADTS1);
     e70:	a0 e5       	ldi	r26, 0x50	; 80
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e0 e5       	ldi	r30, 0x50	; 80
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 64       	ori	r24, 0x40	; 64
     e7c:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS2);
     e7e:	a0 e5       	ldi	r26, 0x50	; 80
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e0 e5       	ldi	r30, 0x50	; 80
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 77       	andi	r24, 0x7F	; 127
     e8a:	8c 93       	st	X, r24
     e8c:	57 c0       	rjmp	.+174    	; 0xf3c <ADC_Init+0x3f6>
		break;

	case Timer0_Comp :
		Set_Bit(SFIOR_u8, ADTS0);
     e8e:	a0 e5       	ldi	r26, 0x50	; 80
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e0 e5       	ldi	r30, 0x50	; 80
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 62       	ori	r24, 0x20	; 32
     e9a:	8c 93       	st	X, r24
		Set_Bit  (SFIOR_u8, ADTS1);
     e9c:	a0 e5       	ldi	r26, 0x50	; 80
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e0 e5       	ldi	r30, 0x50	; 80
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS2);
     eaa:	a0 e5       	ldi	r26, 0x50	; 80
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e0 e5       	ldi	r30, 0x50	; 80
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	8c 93       	st	X, r24
     eb8:	41 c0       	rjmp	.+130    	; 0xf3c <ADC_Init+0x3f6>
		break;

	case Timer0_OVF :
		Clear_Bit(SFIOR_u8, ADTS0);
     eba:	a0 e5       	ldi	r26, 0x50	; 80
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e0 e5       	ldi	r30, 0x50	; 80
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS1);
     ec8:	a0 e5       	ldi	r26, 0x50	; 80
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e0 e5       	ldi	r30, 0x50	; 80
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 7b       	andi	r24, 0xBF	; 191
     ed4:	8c 93       	st	X, r24
		Set_Bit(SFIOR_u8, ADTS2);
     ed6:	a0 e5       	ldi	r26, 0x50	; 80
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e0 e5       	ldi	r30, 0x50	; 80
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	8c 93       	st	X, r24
     ee4:	2b c0       	rjmp	.+86     	; 0xf3c <ADC_Init+0x3f6>
		break ;

	case Timer1_CompB :
		Set_Bit(SFIOR_u8, ADTS0);
     ee6:	a0 e5       	ldi	r26, 0x50	; 80
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e0 e5       	ldi	r30, 0x50	; 80
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	8c 93       	st	X, r24
		Clear_Bit(SFIOR_u8, ADTS1);
     ef4:	a0 e5       	ldi	r26, 0x50	; 80
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e0 e5       	ldi	r30, 0x50	; 80
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7b       	andi	r24, 0xBF	; 191
     f00:	8c 93       	st	X, r24
		Set_Bit(SFIOR_u8, ADTS2);
     f02:	a0 e5       	ldi	r26, 0x50	; 80
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e0 e5       	ldi	r30, 0x50	; 80
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	8c 93       	st	X, r24
     f10:	15 c0       	rjmp	.+42     	; 0xf3c <ADC_Init+0x3f6>
		break ;

	case Timer1_ICU:
		Set_Bit(SFIOR_u8, ADTS0);
     f12:	a0 e5       	ldi	r26, 0x50	; 80
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e0 e5       	ldi	r30, 0x50	; 80
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	8c 93       	st	X, r24
		Set_Bit  (SFIOR_u8, ADTS1);
     f20:	a0 e5       	ldi	r26, 0x50	; 80
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e0 e5       	ldi	r30, 0x50	; 80
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24
		Set_Bit(SFIOR_u8, ADTS2);
     f2e:	a0 e5       	ldi	r26, 0x50	; 80
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e0 e5       	ldi	r30, 0x50	; 80
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	8c 93       	st	X, r24
		break ;
	}
}
     f3c:	2a 96       	adiw	r28, 0x0a	; 10
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <ADC_GetResult_ASync>:


u16  ADC_GetResult_ASync( Analog_Channel channel){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <ADC_GetResult_ASync+0x6>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8b 83       	std	Y+3, r24	; 0x03

	u16 Result = 0 ;
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	19 82       	std	Y+1, r1	; 0x01
	// Set the pre-scaler
	ADMUX_u8 &= ADMUX_Mask;
     f60:	a7 e2       	ldi	r26, 0x27	; 39
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e2       	ldi	r30, 0x27	; 39
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 7e       	andi	r24, 0xE0	; 224
     f6c:	8c 93       	st	X, r24
	ADMUX_u8 |= channel;
     f6e:	a7 e2       	ldi	r26, 0x27	; 39
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e2       	ldi	r30, 0x27	; 39
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	90 81       	ld	r25, Z
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	89 2b       	or	r24, r25
     f7c:	8c 93       	st	X, r24

	Set_Bit (ADCSRA_u8 , ADSC);
     f7e:	a6 e2       	ldi	r26, 0x26	; 38
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e6 e2       	ldi	r30, 0x26	; 38
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	8c 93       	st	X, r24

	Result =  (ADCL_u8 )|(((u16)ADCH_u8 )<< 8);
     f8c:	e4 e2       	ldi	r30, 0x24	; 36
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	e5 e2       	ldi	r30, 0x25	; 37
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	98 2f       	mov	r25, r24
     fa2:	88 27       	eor	r24, r24
     fa4:	82 2b       	or	r24, r18
     fa6:	93 2b       	or	r25, r19
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01

	return Result;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <ADC_GetResult_Sync>:
u16  ADC_GetResult_Sync(Analog_Channel channel){
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <ADC_GetResult_Sync+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8b 83       	std	Y+3, r24	; 0x03


   u16 Result =0;
     fca:	1a 82       	std	Y+2, r1	; 0x02
     fcc:	19 82       	std	Y+1, r1	; 0x01
	// Set the pre-scaler
	ADMUX_u8 &= ADMUX_Mask;
     fce:	a7 e2       	ldi	r26, 0x27	; 39
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e7 e2       	ldi	r30, 0x27	; 39
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 7e       	andi	r24, 0xE0	; 224
     fda:	8c 93       	st	X, r24
	ADMUX_u8 |= channel;
     fdc:	a7 e2       	ldi	r26, 0x27	; 39
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e7 e2       	ldi	r30, 0x27	; 39
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	90 81       	ld	r25, Z
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	89 2b       	or	r24, r25
     fea:	8c 93       	st	X, r24

	Set_Bit (ADCSRA_u8 , ADSC);
     fec:	a6 e2       	ldi	r26, 0x26	; 38
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e6 e2       	ldi	r30, 0x26	; 38
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24

	//while (Get_Bit(ADCSRA_u8, ADSC));

	while ((Get_Bit(ADCSRA_u8 , ADIF))==0);
     ffa:	e6 e2       	ldi	r30, 0x26	; 38
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 95       	swap	r24
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	81 70       	andi	r24, 0x01	; 1
    100a:	90 70       	andi	r25, 0x00	; 0
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	a9 f3       	breq	.-22     	; 0xffa <ADC_GetResult_Sync+0x3e>


	Set_Bit(ADCSRA_u8,ADIF);
    1010:	a6 e2       	ldi	r26, 0x26	; 38
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e6 e2       	ldi	r30, 0x26	; 38
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 61       	ori	r24, 0x10	; 16
    101c:	8c 93       	st	X, r24
	Result =  (ADCL_u8 )|(((u16)ADCH_u8 )<< 8);
    101e:	e4 e2       	ldi	r30, 0x24	; 36
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	e5 e2       	ldi	r30, 0x25	; 37
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	98 2f       	mov	r25, r24
    1034:	88 27       	eor	r24, r24
    1036:	82 2b       	or	r24, r18
    1038:	93 2b       	or	r25, r19
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01



	return Result;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <ADC_Enable>:

/******************************************************
 * Enables
 ******************************************************/
void ADC_Enable(void ){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(ADCSRA_u8 , ADEN);
    1056:	a6 e2       	ldi	r26, 0x26	; 38
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e6 e2       	ldi	r30, 0x26	; 38
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24

}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <ADC_Disable>:

void ADC_Disable(void ){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(ADCSRA_u8 , ADEN);
    1072:	a6 e2       	ldi	r26, 0x26	; 38
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e2       	ldi	r30, 0x26	; 38
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 77       	andi	r24, 0x7F	; 127
    107e:	8c 93       	st	X, r24

}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <ADC_Start_Conversion>:

void ADC_Start_Conversion(void){
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(ADCSRA_u8, ADSC);
    108e:	a6 e2       	ldi	r26, 0x26	; 38
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e2       	ldi	r30, 0x26	; 38
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 64       	ori	r24, 0x40	; 64
    109a:	8c 93       	st	X, r24
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <ADC_AutoTriggerEnable>:

void  ADC_AutoTriggerEnable (void){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA_u8 , ADATE);
    10aa:	a6 e2       	ldi	r26, 0x26	; 38
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e6 e2       	ldi	r30, 0x26	; 38
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	8c 93       	st	X, r24
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <ADC_AutoTriggerDisable>:

void  ADC_AutoTriggerDisable (void){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA_u8 , ADATE);
    10c6:	a6 e2       	ldi	r26, 0x26	; 38
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e6 e2       	ldi	r30, 0x26	; 38
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8f 7d       	andi	r24, 0xDF	; 223
    10d2:	8c 93       	st	X, r24
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <ADC_InterruptEnable>:

void  ADC_InterruptEnable (void){
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(ADCSRA_u8 , ADIE);
    10e2:	a6 e2       	ldi	r26, 0x26	; 38
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e6 e2       	ldi	r30, 0x26	; 38
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	8c 93       	st	X, r24

}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <ADC_InterruptDisable>:

void  ADC_InterruptDisable (void){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA_u8 , ADIE);
    10fe:	a6 e2       	ldi	r26, 0x26	; 38
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e6 e2       	ldi	r30, 0x26	; 38
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	8c 93       	st	X, r24
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <ADC_Output_Calc>:
/****************************************************
 *
 * Service Function
 *****************************************************/
u16 ADC_Output_Calc(u16 MAX_Value , u16 MIN_Value, Analog_Channel channel){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	29 97       	sbiw	r28, 0x09	; 9
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	78 87       	std	Y+8, r23	; 0x08
    112c:	6f 83       	std	Y+7, r22	; 0x07
    112e:	49 87       	std	Y+9, r20	; 0x09
	// this function for mapping the value of the ADC- output
	u16  ADC_Output  ;
	u16 Result;
	ADC_Output = ADC_GetResult_ASync(channel);
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	0e 94 a7 07 	call	0xf4e	; 0xf4e <ADC_GetResult_ASync>
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03

	Result  = ((MAX_Value - MIN_Value) * ADC_Output ) / 1024;
    113a:	2d 81       	ldd	r18, Y+5	; 0x05
    113c:	3e 81       	ldd	r19, Y+6	; 0x06
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	28 1b       	sub	r18, r24
    1144:	39 0b       	sbc	r19, r25
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	ac 01       	movw	r20, r24
    114c:	24 9f       	mul	r18, r20
    114e:	c0 01       	movw	r24, r0
    1150:	25 9f       	mul	r18, r21
    1152:	90 0d       	add	r25, r0
    1154:	34 9f       	mul	r19, r20
    1156:	90 0d       	add	r25, r0
    1158:	11 24       	eor	r1, r1
    115a:	89 2f       	mov	r24, r25
    115c:	99 27       	eor	r25, r25
    115e:	86 95       	lsr	r24
    1160:	86 95       	lsr	r24
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01


	return Result;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
}
    116a:	29 96       	adiw	r28, 0x09	; 9
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <ADC_CallBack>:
/*********************************************************************
 * Callback Function
 ********************************************************************/
void ADC_CallBack(void (* Local_PTR)(void)){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <ADC_CallBack+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01

	ADC_Conversion = Local_PTR ;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	90 93 71 00 	sts	0x0071, r25
    1192:	80 93 70 00 	sts	0x0070, r24

}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <__vector_16>:

/*************************************************************************
 * ISR
 ************************************************************************/
void __vector_16(void)__attribute__((signal));
void __vector_16(){
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62

	if (ADC_Conversion != Null){
    11ca:	80 91 70 00 	lds	r24, 0x0070
    11ce:	90 91 71 00 	lds	r25, 0x0071
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <__vector_16+0x40>
		ADC_Conversion();
    11d6:	e0 91 70 00 	lds	r30, 0x0070
    11da:	f0 91 71 00 	lds	r31, 0x0071
    11de:	09 95       	icall
	}
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <Gobal_interrput_Enbale>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void Gobal_interrput_Enbale (void )
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,GobalInterrput_Pin);
    120e:	af e5       	ldi	r26, 0x5F	; 95
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e5       	ldi	r30, 0x5F	; 95
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	8c 93       	st	X, r24
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <Gobal_interrput_Disable>:

void Gobal_interrput_Disable (void )
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,GobalInterrput_Pin);
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	8c 93       	st	X, r24
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <Dio_u8_SetPortDir>:
void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <Dio_u8_SetPortDir+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <Dio_u8_SetPortDir+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	90 f5       	brcc	.+100    	; 0x12b8 <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <Dio_u8_SetPortDir+0x5e>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <Dio_u8_SetPortDir+0x3e>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <Dio_u8_SetPortDir+0x54>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <Dio_u8_SetPortDir+0x7a>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <Dio_u8_SetPortDir+0x68>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <Dio_u8_SetPortDir+0x72>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
    1292:	ea e3       	ldi	r30, 0x3A	; 58
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <Dio_u8_SetPortValue+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <Dio_u8_SetPortValue+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	90 f5       	brcc	.+100    	; 0x1340 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <Dio_u8_SetPortValue+0x5e>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <Dio_u8_SetPortValue+0x3e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <Dio_u8_SetPortValue+0x54>
    1302:	1e c0       	rjmp	.+60     	; 0x1340 <Dio_u8_SetPortValue+0x7a>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <Dio_u8_SetPortValue+0x68>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <Dio_u8_SetPortValue+0x72>
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
    131a:	eb e3       	ldi	r30, 0x3B	; 59
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <Dio_u8_GetportValue+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <Dio_u8_GetportValue+0x8>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	90 f5       	brcc	.+100    	; 0x13c6 <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3c 83       	std	Y+4, r19	; 0x04
    136a:	2b 83       	std	Y+3, r18	; 0x03
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	d1 f0       	breq	.+52     	; 0x13aa <Dio_u8_GetportValue+0x5c>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <Dio_u8_GetportValue+0x3c>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 f0       	breq	.+24     	; 0x13a0 <Dio_u8_GetportValue+0x52>
    1388:	1e c0       	rjmp	.+60     	; 0x13c6 <Dio_u8_GetportValue+0x78>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	81 f0       	breq	.+32     	; 0x13b4 <Dio_u8_GetportValue+0x66>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <Dio_u8_GetportValue+0x70>
    139e:	13 c0       	rjmp	.+38     	; 0x13c6 <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
    13aa:	e8 e3       	ldi	r30, 0x38	; 56
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <Dio_u8_SetPinDir+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Dio_u8_SetPinDir+0x8>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	6a 83       	std	Y+2, r22	; 0x02
    13e8:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	84 30       	cpi	r24, 0x04	; 4
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <Dio_u8_SetPinDir+0x1c>
    13f0:	d1 c0       	rjmp	.+418    	; 0x1594 <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3d 83       	std	Y+5, r19	; 0x05
    13fa:	2c 83       	std	Y+4, r18	; 0x04
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <Dio_u8_SetPinDir+0x32>
    1406:	43 c0       	rjmp	.+134    	; 0x148e <Dio_u8_SetPinDir+0xb8>
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	3d 81       	ldd	r19, Y+5	; 0x05
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	2c f4       	brge	.+10     	; 0x141c <Dio_u8_SetPinDir+0x46>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	71 f0       	breq	.+28     	; 0x1436 <Dio_u8_SetPinDir+0x60>
    141a:	bc c0       	rjmp	.+376    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <Dio_u8_SetPinDir+0x52>
    1426:	5f c0       	rjmp	.+190    	; 0x14e6 <Dio_u8_SetPinDir+0x110>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <Dio_u8_SetPinDir+0x5e>
    1432:	85 c0       	rjmp	.+266    	; 0x153e <Dio_u8_SetPinDir+0x168>
    1434:	af c0       	rjmp	.+350    	; 0x1594 <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a1 f4       	brne	.+40     	; 0x1464 <Dio_u8_SetPinDir+0x8e>
    143c:	aa e3       	ldi	r26, 0x3A	; 58
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ea e3       	ldi	r30, 0x3A	; 58
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <Dio_u8_SetPinDir+0x84>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <Dio_u8_SetPinDir+0x80>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	98 c0       	rjmp	.+304    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
    1464:	aa e3       	ldi	r26, 0x3A	; 58
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ea e3       	ldi	r30, 0x3A	; 58
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <Dio_u8_SetPinDir+0xac>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <Dio_u8_SetPinDir+0xa8>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	83 c0       	rjmp	.+262    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	a1 f4       	brne	.+40     	; 0x14bc <Dio_u8_SetPinDir+0xe6>
    1494:	a7 e3       	ldi	r26, 0x37	; 55
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e7 e3       	ldi	r30, 0x37	; 55
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <Dio_u8_SetPinDir+0xdc>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <Dio_u8_SetPinDir+0xd8>
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	6c c0       	rjmp	.+216    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
    14bc:	a7 e3       	ldi	r26, 0x37	; 55
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e7 e3       	ldi	r30, 0x37	; 55
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <Dio_u8_SetPinDir+0x104>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <Dio_u8_SetPinDir+0x100>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	57 c0       	rjmp	.+174    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	a1 f4       	brne	.+40     	; 0x1514 <Dio_u8_SetPinDir+0x13e>
    14ec:	a4 e3       	ldi	r26, 0x34	; 52
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e4 e3       	ldi	r30, 0x34	; 52
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <Dio_u8_SetPinDir+0x134>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <Dio_u8_SetPinDir+0x130>
    150e:	84 2b       	or	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	40 c0       	rjmp	.+128    	; 0x1594 <Dio_u8_SetPinDir+0x1be>
    1514:	a4 e3       	ldi	r26, 0x34	; 52
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e4 e3       	ldi	r30, 0x34	; 52
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <Dio_u8_SetPinDir+0x15c>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <Dio_u8_SetPinDir+0x158>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	2b c0       	rjmp	.+86     	; 0x1594 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <Dio_u8_SetPinDir+0x196>
    1544:	a1 e3       	ldi	r26, 0x31	; 49
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <Dio_u8_SetPinDir+0x18c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <Dio_u8_SetPinDir+0x188>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <Dio_u8_SetPinDir+0x1be>
    156c:	a1 e3       	ldi	r26, 0x31	; 49
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <Dio_u8_SetPinDir+0x1b4>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <Dio_u8_SetPinDir+0x1b0>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
			break;
		}
	}
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <Dio_u8_SetPinVal+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <Dio_u8_SetPinVal+0x8>
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02
    15b6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <Dio_u8_SetPinVal+0x1c>
    15be:	d1 c0       	rjmp	.+418    	; 0x1762 <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <Dio_u8_SetPinVal+0x32>
    15d4:	43 c0       	rjmp	.+134    	; 0x165c <Dio_u8_SetPinVal+0xb8>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <Dio_u8_SetPinVal+0x46>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	71 f0       	breq	.+28     	; 0x1604 <Dio_u8_SetPinVal+0x60>
    15e8:	bc c0       	rjmp	.+376    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <Dio_u8_SetPinVal+0x52>
    15f4:	5f c0       	rjmp	.+190    	; 0x16b4 <Dio_u8_SetPinVal+0x110>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <Dio_u8_SetPinVal+0x5e>
    1600:	85 c0       	rjmp	.+266    	; 0x170c <Dio_u8_SetPinVal+0x168>
    1602:	af c0       	rjmp	.+350    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	a1 f4       	brne	.+40     	; 0x1632 <Dio_u8_SetPinVal+0x8e>
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <Dio_u8_SetPinVal+0x84>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <Dio_u8_SetPinVal+0x80>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	98 c0       	rjmp	.+304    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
    1632:	ab e3       	ldi	r26, 0x3B	; 59
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	eb e3       	ldi	r30, 0x3B	; 59
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <Dio_u8_SetPinVal+0xac>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <Dio_u8_SetPinVal+0xa8>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	83 c0       	rjmp	.+262    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a1 f4       	brne	.+40     	; 0x168a <Dio_u8_SetPinVal+0xe6>
    1662:	a8 e3       	ldi	r26, 0x38	; 56
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <Dio_u8_SetPinVal+0xdc>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <Dio_u8_SetPinVal+0xd8>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	6c c0       	rjmp	.+216    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
    168a:	a8 e3       	ldi	r26, 0x38	; 56
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <Dio_u8_SetPinVal+0x104>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <Dio_u8_SetPinVal+0x100>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	57 c0       	rjmp	.+174    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <Dio_u8_SetPinVal+0x13e>
    16ba:	a5 e3       	ldi	r26, 0x35	; 53
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e3       	ldi	r30, 0x35	; 53
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <Dio_u8_SetPinVal+0x134>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <Dio_u8_SetPinVal+0x130>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	40 c0       	rjmp	.+128    	; 0x1762 <Dio_u8_SetPinVal+0x1be>
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <Dio_u8_SetPinVal+0x15c>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <Dio_u8_SetPinVal+0x158>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	2b c0       	rjmp	.+86     	; 0x1762 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	a1 f4       	brne	.+40     	; 0x173a <Dio_u8_SetPinVal+0x196>
    1712:	a2 e3       	ldi	r26, 0x32	; 50
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e2 e3       	ldi	r30, 0x32	; 50
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <Dio_u8_SetPinVal+0x18c>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <Dio_u8_SetPinVal+0x188>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <Dio_u8_SetPinVal+0x1be>
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <Dio_u8_SetPinVal+0x1b4>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <Dio_u8_SetPinVal+0x1b0>
    175c:	80 95       	com	r24
    175e:	84 23       	and	r24, r20
    1760:	8c 93       	st	X, r24
			break;
		}
	}
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <Dio_u8_GetPinVal+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <Dio_u8_GetPinVal+0x8>
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	08 f0       	brcs	.+2      	; 0x178c <Dio_u8_GetPinVal+0x1a>
    178a:	67 c0       	rjmp	.+206    	; 0x185a <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3d 83       	std	Y+5, r19	; 0x05
    1794:	2c 83       	std	Y+4, r18	; 0x04
    1796:	4c 81       	ldd	r20, Y+4	; 0x04
    1798:	5d 81       	ldd	r21, Y+5	; 0x05
    179a:	41 30       	cpi	r20, 0x01	; 1
    179c:	51 05       	cpc	r21, r1
    179e:	41 f1       	breq	.+80     	; 0x17f0 <Dio_u8_GetPinVal+0x7e>
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	91 05       	cpc	r25, r1
    17a8:	34 f4       	brge	.+12     	; 0x17b6 <Dio_u8_GetPinVal+0x44>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	21 15       	cp	r18, r1
    17b0:	31 05       	cpc	r19, r1
    17b2:	61 f0       	breq	.+24     	; 0x17cc <Dio_u8_GetPinVal+0x5a>
    17b4:	52 c0       	rjmp	.+164    	; 0x185a <Dio_u8_GetPinVal+0xe8>
    17b6:	4c 81       	ldd	r20, Y+4	; 0x04
    17b8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ba:	42 30       	cpi	r20, 0x02	; 2
    17bc:	51 05       	cpc	r21, r1
    17be:	51 f1       	breq	.+84     	; 0x1814 <Dio_u8_GetPinVal+0xa2>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	b9 f1       	breq	.+110    	; 0x1838 <Dio_u8_GetPinVal+0xc6>
    17ca:	47 c0       	rjmp	.+142    	; 0x185a <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
    17cc:	e9 e3       	ldi	r30, 0x39	; 57
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Dio_u8_GetPinVal+0x72>
    17e0:	55 95       	asr	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Dio_u8_GetPinVal+0x6e>
    17e8:	ca 01       	movw	r24, r20
    17ea:	81 70       	andi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	35 c0       	rjmp	.+106    	; 0x185a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
    17f0:	e6 e3       	ldi	r30, 0x36	; 54
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <Dio_u8_GetPinVal+0x96>
    1804:	55 95       	asr	r21
    1806:	47 95       	ror	r20
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <Dio_u8_GetPinVal+0x92>
    180c:	ca 01       	movw	r24, r20
    180e:	81 70       	andi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	23 c0       	rjmp	.+70     	; 0x185a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <Dio_u8_GetPinVal+0xba>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <Dio_u8_GetPinVal+0xb6>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	11 c0       	rjmp	.+34     	; 0x185a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
    1838:	e0 e3       	ldi	r30, 0x30	; 48
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <Dio_u8_GetPinVal+0xde>
    184c:	55 95       	asr	r21
    184e:	47 95       	ror	r20
    1850:	8a 95       	dec	r24
    1852:	e2 f7       	brpl	.-8      	; 0x184c <Dio_u8_GetPinVal+0xda>
    1854:	ca 01       	movw	r24, r20
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <Dio_u8_GetPortDir+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <Dio_u8_GetPortDir+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	90 f5       	brcc	.+100    	; 0x18e4 <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3c 83       	std	Y+4, r19	; 0x04
    1888:	2b 83       	std	Y+3, r18	; 0x03
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	d1 f0       	breq	.+52     	; 0x18c8 <Dio_u8_GetPortDir+0x5c>
    1894:	2b 81       	ldd	r18, Y+3	; 0x03
    1896:	3c 81       	ldd	r19, Y+4	; 0x04
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <Dio_u8_GetPortDir+0x3c>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	61 f0       	breq	.+24     	; 0x18be <Dio_u8_GetPortDir+0x52>
    18a6:	1e c0       	rjmp	.+60     	; 0x18e4 <Dio_u8_GetPortDir+0x78>
    18a8:	2b 81       	ldd	r18, Y+3	; 0x03
    18aa:	3c 81       	ldd	r19, Y+4	; 0x04
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	81 f0       	breq	.+32     	; 0x18d2 <Dio_u8_GetPortDir+0x66>
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	81 f0       	breq	.+32     	; 0x18dc <Dio_u8_GetPortDir+0x70>
    18bc:	13 c0       	rjmp	.+38     	; 0x18e4 <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
    18be:	ea e3       	ldi	r30, 0x3A	; 58
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
    18c8:	e7 e3       	ldi	r30, 0x37	; 55
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
    18dc:	e1 e3       	ldi	r30, 0x31	; 49
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <Dio_u8_GetPinDir+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <Dio_u8_GetPinDir+0x8>
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	8a 83       	std	Y+2, r24	; 0x02
    1904:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	08 f0       	brcs	.+2      	; 0x190e <Dio_u8_GetPinDir+0x1a>
    190c:	67 c0       	rjmp	.+206    	; 0x19dc <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3d 83       	std	Y+5, r19	; 0x05
    1916:	2c 83       	std	Y+4, r18	; 0x04
    1918:	4c 81       	ldd	r20, Y+4	; 0x04
    191a:	5d 81       	ldd	r21, Y+5	; 0x05
    191c:	41 30       	cpi	r20, 0x01	; 1
    191e:	51 05       	cpc	r21, r1
    1920:	41 f1       	breq	.+80     	; 0x1972 <Dio_u8_GetPinDir+0x7e>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	91 05       	cpc	r25, r1
    192a:	34 f4       	brge	.+12     	; 0x1938 <Dio_u8_GetPinDir+0x44>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	61 f0       	breq	.+24     	; 0x194e <Dio_u8_GetPinDir+0x5a>
    1936:	52 c0       	rjmp	.+164    	; 0x19dc <Dio_u8_GetPinDir+0xe8>
    1938:	4c 81       	ldd	r20, Y+4	; 0x04
    193a:	5d 81       	ldd	r21, Y+5	; 0x05
    193c:	42 30       	cpi	r20, 0x02	; 2
    193e:	51 05       	cpc	r21, r1
    1940:	51 f1       	breq	.+84     	; 0x1996 <Dio_u8_GetPinDir+0xa2>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	b9 f1       	breq	.+110    	; 0x19ba <Dio_u8_GetPinDir+0xc6>
    194c:	47 c0       	rjmp	.+142    	; 0x19dc <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
    194e:	ea e3       	ldi	r30, 0x3A	; 58
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a9 01       	movw	r20, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <Dio_u8_GetPinDir+0x72>
    1962:	55 95       	asr	r21
    1964:	47 95       	ror	r20
    1966:	8a 95       	dec	r24
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <Dio_u8_GetPinDir+0x6e>
    196a:	ca 01       	movw	r24, r20
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	35 c0       	rjmp	.+106    	; 0x19dc <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
    1972:	e7 e3       	ldi	r30, 0x37	; 55
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <Dio_u8_GetPinDir+0x96>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <Dio_u8_GetPinDir+0x92>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	23 c0       	rjmp	.+70     	; 0x19dc <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
    1996:	e4 e3       	ldi	r30, 0x34	; 52
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <Dio_u8_GetPinDir+0xba>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <Dio_u8_GetPinDir+0xb6>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	11 c0       	rjmp	.+34     	; 0x19dc <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
    19ba:	e1 e3       	ldi	r30, 0x31	; 49
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <Dio_u8_GetPinDir+0xde>
    19ce:	55 95       	asr	r21
    19d0:	47 95       	ror	r20
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <Dio_u8_GetPinDir+0xda>
    19d6:	ca 01       	movw	r24, r20
    19d8:	81 70       	andi	r24, 0x01	; 1
    19da:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
    19dc:	80 e0       	ldi	r24, 0x00	; 0
	}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <Dio_Pullup>:

void Dio_Pullup (u8 CopyPort_ID, u8 Copy_BitNum)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <Dio_Pullup+0x6>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <Dio_Pullup+0x8>
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	6a 83       	std	Y+2, r22	; 0x02
	if ((CopyPort_ID <= Group_D )&& (CopyPort_ID >= Group_A)){
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <Dio_Pullup+0x18>
    1a04:	4a c0       	rjmp	.+148    	; 0x1a9a <Dio_Pullup+0xac>

		switch (CopyPort_ID){
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3c 83       	std	Y+4, r19	; 0x04
    1a0e:	2b 83       	std	Y+3, r18	; 0x03
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	91 05       	cpc	r25, r1
    1a18:	01 f1       	breq	.+64     	; 0x1a5a <Dio_Pullup+0x6c>
    1a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <Dio_Pullup+0x40>
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	61 f0       	breq	.+24     	; 0x1a44 <Dio_Pullup+0x56>
    1a2c:	36 c0       	rjmp	.+108    	; 0x1a9a <Dio_Pullup+0xac>
    1a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a30:	3c 81       	ldd	r19, Y+4	; 0x04
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	31 05       	cpc	r19, r1
    1a36:	e1 f0       	breq	.+56     	; 0x1a70 <Dio_Pullup+0x82>
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	91 05       	cpc	r25, r1
    1a40:	11 f1       	breq	.+68     	; 0x1a86 <Dio_Pullup+0x98>
    1a42:	2b c0       	rjmp	.+86     	; 0x1a9a <Dio_Pullup+0xac>

		case Group_A:

			Dio_u8_SetPinDir(Group_A, Copy_BitNum, Dio_PinInput);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	6a 81       	ldd	r22, Y+2	; 0x02
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_A, Copy_BitNum,Dio_PinHigh);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	6a 81       	ldd	r22, Y+2	; 0x02
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
    1a58:	20 c0       	rjmp	.+64     	; 0x1a9a <Dio_Pullup+0xac>

			break;

		case Group_B:

			Dio_u8_SetPinDir(Group_B, Copy_BitNum, Dio_PinInput);
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_B, Copy_BitNum,Dio_PinHigh);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	6a 81       	ldd	r22, Y+2	; 0x02
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
    1a6e:	15 c0       	rjmp	.+42     	; 0x1a9a <Dio_Pullup+0xac>

			break;

		case Group_C:

			Dio_u8_SetPinDir(Group_C, Copy_BitNum, Dio_PinInput);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	6a 81       	ldd	r22, Y+2	; 0x02
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_C, Copy_BitNum,Dio_PinHigh);
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <Dio_Pullup+0xac>

			break;

		case Group_D:

			Dio_u8_SetPinDir(Group_D, Copy_BitNum, Dio_PinInput);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	6a 81       	ldd	r22, Y+2	; 0x02
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_D, Copy_BitNum,Dio_PinHigh);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	6a 81       	ldd	r22, Y+2	; 0x02
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>

			break;
		}
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <LCD_Send_FallingEdge>:
/************************************************************************
 *
 * Implementation
 *
 *************************************************************************/
void LCD_Send_FallingEdge () {
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	6c 97       	sbiw	r28, 0x1c	; 28
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinHigh);
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e4       	ldi	r27, 0x40	; 64
    1ace:	89 8f       	std	Y+25, r24	; 0x19
    1ad0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8d 8b       	std	Y+21, r24	; 0x15
    1af0:	9e 8b       	std	Y+22, r25	; 0x16
    1af2:	af 8b       	std	Y+23, r26	; 0x17
    1af4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <LCD_Send_FallingEdge+0x70>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <LCD_Send_FallingEdge+0xee>
	else if (__tmp > 65535)
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <LCD_Send_FallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	69 8d       	ldd	r22, Y+25	; 0x19
    1b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <LCD_Send_FallingEdge+0xd0>
    1b5a:	88 ec       	ldi	r24, 0xC8	; 200
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b62:	89 89       	ldd	r24, Y+17	; 0x11
    1b64:	9a 89       	ldd	r25, Y+18	; 0x12
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_Send_FallingEdge+0xbe>
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b70:	9c 89       	ldd	r25, Y+20	; 0x14
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <LCD_Send_FallingEdge+0xb2>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <LCD_Send_FallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	98 89       	ldd	r25, Y+16	; 0x10
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_Send_FallingEdge+0xfa>
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinLow);
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	66 e0       	ldi	r22, 0x06	; 6
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e0       	ldi	r26, 0x00	; 0
    1bba:	b0 e4       	ldi	r27, 0x40	; 64
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	9c 87       	std	Y+12, r25	; 0x0c
    1bc0:	ad 87       	std	Y+13, r26	; 0x0d
    1bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8f 83       	std	Y+7, r24	; 0x07
    1bde:	98 87       	std	Y+8, r25	; 0x08
    1be0:	a9 87       	std	Y+9, r26	; 0x09
    1be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <LCD_Send_FallingEdge+0x15e>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <LCD_Send_FallingEdge+0x1dc>
	else if (__tmp > 65535)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <LCD_Send_FallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <LCD_Send_FallingEdge+0x1be>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_Send_FallingEdge+0x1ac>
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <LCD_Send_FallingEdge+0x1a0>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <LCD_Send_FallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_Send_FallingEdge+0x1e8>
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    1c98:	6c 96       	adiw	r28, 0x1c	; 28
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <LCD_Send_Data>:
void LCD_Send_Data (u8 Copy_u8_Data) {
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_FallingEdge();


#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinHigh);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Data,4));
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	82 95       	swap	r24
    1cce:	8f 70       	andi	r24, 0x0F	; 15
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	91 70       	andi	r25, 0x01	; 1
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	49 2f       	mov	r20, r25
    1cda:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Data,5));
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	82 95       	swap	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	91 70       	andi	r25, 0x01	; 1
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	49 2f       	mov	r20, r25
    1cf0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Data,6));
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	82 95       	swap	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	86 95       	lsr	r24
    1cfc:	83 70       	andi	r24, 0x03	; 3
    1cfe:	98 2f       	mov	r25, r24
    1d00:	91 70       	andi	r25, 0x01	; 1
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	49 2f       	mov	r20, r25
    1d08:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Data,7));
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	98 2f       	mov	r25, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	99 27       	eor	r25, r25
    1d14:	99 1f       	adc	r25, r25
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1d20:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <LCD_Send_FallingEdge>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Data,0));
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	98 2f       	mov	r25, r24
    1d28:	91 70       	andi	r25, 0x01	; 1
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Data,1));
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	86 95       	lsr	r24
    1d38:	98 2f       	mov	r25, r24
    1d3a:	91 70       	andi	r25, 0x01	; 1
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	49 2f       	mov	r20, r25
    1d42:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Data,2));
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	86 95       	lsr	r24
    1d4a:	86 95       	lsr	r24
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	91 70       	andi	r25, 0x01	; 1
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	49 2f       	mov	r20, r25
    1d56:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Data,3));
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	86 95       	lsr	r24
    1d5e:	86 95       	lsr	r24
    1d60:	86 95       	lsr	r24
    1d62:	98 2f       	mov	r25, r24
    1d64:	91 70       	andi	r25, 0x01	; 1
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	63 e0       	ldi	r22, 0x03	; 3
    1d6a:	49 2f       	mov	r20, r25
    1d6c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1d70:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <LCD_Send_FallingEdge>


#endif

}
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <LCD_Send_Commoand>:

void LCD_Send_Commoand(u8 Copy_u8_Command){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_FallingEdge();


#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinLow);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	64 e0       	ldi	r22, 0x04	; 4
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	65 e0       	ldi	r22, 0x05	; 5
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Command,4));
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	82 95       	swap	r24
    1da0:	8f 70       	andi	r24, 0x0F	; 15
    1da2:	98 2f       	mov	r25, r24
    1da4:	91 70       	andi	r25, 0x01	; 1
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	49 2f       	mov	r20, r25
    1dac:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Command,5));
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	82 95       	swap	r24
    1db4:	86 95       	lsr	r24
    1db6:	87 70       	andi	r24, 0x07	; 7
    1db8:	98 2f       	mov	r25, r24
    1dba:	91 70       	andi	r25, 0x01	; 1
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	49 2f       	mov	r20, r25
    1dc2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Command,6));
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	82 95       	swap	r24
    1dca:	86 95       	lsr	r24
    1dcc:	86 95       	lsr	r24
    1dce:	83 70       	andi	r24, 0x03	; 3
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Command,7));
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	98 2f       	mov	r25, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	99 27       	eor	r25, r25
    1de6:	99 1f       	adc	r25, r25
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	49 2f       	mov	r20, r25
    1dee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1df2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <LCD_Send_FallingEdge>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Command,0));
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	98 2f       	mov	r25, r24
    1dfa:	91 70       	andi	r25, 0x01	; 1
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Command,1));
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	86 95       	lsr	r24
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	91 70       	andi	r25, 0x01	; 1
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	49 2f       	mov	r20, r25
    1e14:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Command,2));
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	86 95       	lsr	r24
    1e1c:	86 95       	lsr	r24
    1e1e:	98 2f       	mov	r25, r24
    1e20:	91 70       	andi	r25, 0x01	; 1
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	49 2f       	mov	r20, r25
    1e28:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Command,3));
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	86 95       	lsr	r24
    1e34:	98 2f       	mov	r25, r24
    1e36:	91 70       	andi	r25, 0x01	; 1
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	63 e0       	ldi	r22, 0x03	; 3
    1e3c:	49 2f       	mov	r20, r25
    1e3e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1e42:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <LCD_Send_FallingEdge>


#endif

}
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <LCD_Display_Clear>:

void LCD_Display_Clear (){
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2e 97       	sbiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61

	LCD_Send_Commoand(LCD_Display_clear);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e6e:	b1 e4       	ldi	r27, 0x41	; 65
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_Display_Clear+0x6c>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_Display_Clear+0xea>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_Display_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_Display_Clear+0xcc>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_Display_Clear+0xba>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_Display_Clear+0xae>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_Display_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_Display_Clear+0xf6>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    1f4c:	2e 96       	adiw	r28, 0x0e	; 14
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_Init>:

void LCD_Init (void){
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	c4 55       	subi	r28, 0x54	; 84
    1f6c:	d0 40       	sbci	r29, 0x00	; 0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61



#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RS, Dio_PinOutput);
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	64 e0       	ldi	r22, 0x04	; 4
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RW, Dio_PinOutput);
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	65 e0       	ldi	r22, 0x05	; 5
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_ENB, Dio_PinOutput);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	66 e0       	ldi	r22, 0x06	; 6
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Dio_u8_SetPinDir>
    1f96:	fe 01       	movw	r30, r28
    1f98:	ef 5a       	subi	r30, 0xAF	; 175
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a8 e4       	ldi	r26, 0x48	; 72
    1fa2:	b2 e4       	ldi	r27, 0x42	; 66
    1fa4:	80 83       	st	Z, r24
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	a2 83       	std	Z+2, r26	; 0x02
    1faa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	8e 01       	movw	r16, r28
    1fae:	03 5b       	subi	r16, 0xB3	; 179
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ef 5a       	subi	r30, 0xAF	; 175
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	80 83       	st	Z, r24
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	a2 83       	std	Z+2, r26	; 0x02
    1fd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e3 5b       	subi	r30, 0xB3	; 179
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	44 f4       	brge	.+16     	; 0x2008 <LCD_Init+0xaa>
		__ticks = 1;
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e5 5b       	subi	r30, 0xB5	; 181
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	64 c0       	rjmp	.+200    	; 0x20d0 <LCD_Init+0x172>
	else if (__tmp > 65535)
    2008:	fe 01       	movw	r30, r28
    200a:	e3 5b       	subi	r30, 0xB3	; 179
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	0c f0       	brlt	.+2      	; 0x2028 <LCD_Init+0xca>
    2026:	43 c0       	rjmp	.+134    	; 0x20ae <LCD_Init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	fe 01       	movw	r30, r28
    202a:	ef 5a       	subi	r30, 0xAF	; 175
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8e 01       	movw	r16, r28
    2048:	05 5b       	subi	r16, 0xB5	; 181
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	f8 01       	movw	r30, r16
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
    205e:	1f c0       	rjmp	.+62     	; 0x209e <LCD_Init+0x140>
    2060:	fe 01       	movw	r30, r28
    2062:	e7 5b       	subi	r30, 0xB7	; 183
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	88 ec       	ldi	r24, 0xC8	; 200
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
    206e:	fe 01       	movw	r30, r28
    2070:	e7 5b       	subi	r30, 0xB7	; 183
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_Init+0x11a>
    207c:	fe 01       	movw	r30, r28
    207e:	e7 5b       	subi	r30, 0xB7	; 183
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	de 01       	movw	r26, r28
    2088:	a5 5b       	subi	r26, 0xB5	; 181
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e5 5b       	subi	r30, 0xB5	; 181
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	9c 93       	st	X, r25
    209c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	fe 01       	movw	r30, r28
    20a0:	e5 5b       	subi	r30, 0xB5	; 181
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	d1 f6       	brne	.-76     	; 0x2060 <LCD_Init+0x102>
    20ac:	27 c0       	rjmp	.+78     	; 0x20fc <LCD_Init+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	8e 01       	movw	r16, r28
    20b0:	05 5b       	subi	r16, 0xB5	; 181
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	fe 01       	movw	r30, r28
    20b6:	e3 5b       	subi	r30, 0xB3	; 179
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	f8 01       	movw	r30, r16
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	de 01       	movw	r26, r28
    20d2:	a9 5b       	subi	r26, 0xB9	; 185
    20d4:	bf 4f       	sbci	r27, 0xFF	; 255
    20d6:	fe 01       	movw	r30, r28
    20d8:	e5 5b       	subi	r30, 0xB5	; 181
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	8d 93       	st	X+, r24
    20e2:	9c 93       	st	X, r25
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 5b       	subi	r30, 0xB9	; 185
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_Init+0x190>
    20f2:	fe 01       	movw	r30, r28
    20f4:	e9 5b       	subi	r30, 0xB9	; 185
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_Send_Commoand(0x33);
    20fc:	83 e3       	ldi	r24, 0x33	; 51
    20fe:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    2102:	fe 01       	movw	r30, r28
    2104:	ed 5b       	subi	r30, 0xBD	; 189
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a0 e8       	ldi	r26, 0x80	; 128
    210e:	bf e3       	ldi	r27, 0x3F	; 63
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	8e 01       	movw	r16, r28
    211a:	01 5c       	subi	r16, 0xC1	; 193
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	ed 5b       	subi	r30, 0xBD	; 189
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a ef       	ldi	r20, 0xFA	; 250
    2132:	54 e4       	ldi	r21, 0x44	; 68
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	f8 01       	movw	r30, r16
    213e:	80 83       	st	Z, r24
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	a2 83       	std	Z+2, r26	; 0x02
    2144:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2146:	fe 01       	movw	r30, r28
    2148:	ff 96       	adiw	r30, 0x3f	; 63
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <LCD_Init+0x20e>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9e af       	std	Y+62, r25	; 0x3e
    2168:	8d af       	std	Y+61, r24	; 0x3d
    216a:	46 c0       	rjmp	.+140    	; 0x21f8 <LCD_Init+0x29a>
	else if (__tmp > 65535)
    216c:	fe 01       	movw	r30, r28
    216e:	ff 96       	adiw	r30, 0x3f	; 63
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	3f ef       	ldi	r19, 0xFF	; 255
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	57 e4       	ldi	r21, 0x47	; 71
    2180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2184:	18 16       	cp	r1, r24
    2186:	64 f5       	brge	.+88     	; 0x21e0 <LCD_Init+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2188:	fe 01       	movw	r30, r28
    218a:	ed 5b       	subi	r30, 0xBD	; 189
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e af       	std	Y+62, r25	; 0x3e
    21b4:	8d af       	std	Y+61, r24	; 0x3d
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <LCD_Init+0x278>
    21b8:	88 ec       	ldi	r24, 0xC8	; 200
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9c af       	std	Y+60, r25	; 0x3c
    21be:	8b af       	std	Y+59, r24	; 0x3b
    21c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    21c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_Init+0x266>
    21c8:	9c af       	std	Y+60, r25	; 0x3c
    21ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9e af       	std	Y+62, r25	; 0x3e
    21d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <LCD_Init+0x25a>
    21de:	16 c0       	rjmp	.+44     	; 0x220c <LCD_Init+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	fe 01       	movw	r30, r28
    21e2:	ff 96       	adiw	r30, 0x3f	; 63
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e af       	std	Y+62, r25	; 0x3e
    21f6:	8d af       	std	Y+61, r24	; 0x3d
    21f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fc:	9a af       	std	Y+58, r25	; 0x3a
    21fe:	89 af       	std	Y+57, r24	; 0x39
    2200:	89 ad       	ldd	r24, Y+57	; 0x39
    2202:	9a ad       	ldd	r25, Y+58	; 0x3a
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_Init+0x2a6>
    2208:	9a af       	std	Y+58, r25	; 0x3a
    220a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_Send_Commoand(0x02);
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e8       	ldi	r26, 0x80	; 128
    2218:	bf e3       	ldi	r27, 0x3F	; 63
    221a:	8d ab       	std	Y+53, r24	; 0x35
    221c:	9e ab       	std	Y+54, r25	; 0x36
    221e:	af ab       	std	Y+55, r26	; 0x37
    2220:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6d a9       	ldd	r22, Y+53	; 0x35
    2224:	7e a9       	ldd	r23, Y+54	; 0x36
    2226:	8f a9       	ldd	r24, Y+55	; 0x37
    2228:	98 ad       	ldd	r25, Y+56	; 0x38
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	89 ab       	std	Y+49, r24	; 0x31
    223c:	9a ab       	std	Y+50, r25	; 0x32
    223e:	ab ab       	std	Y+51, r26	; 0x33
    2240:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2242:	69 a9       	ldd	r22, Y+49	; 0x31
    2244:	7a a9       	ldd	r23, Y+50	; 0x32
    2246:	8b a9       	ldd	r24, Y+51	; 0x33
    2248:	9c a9       	ldd	r25, Y+52	; 0x34
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <LCD_Init+0x306>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	98 ab       	std	Y+48, r25	; 0x30
    2260:	8f a7       	std	Y+47, r24	; 0x2f
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <LCD_Init+0x384>
	else if (__tmp > 65535)
    2264:	69 a9       	ldd	r22, Y+49	; 0x31
    2266:	7a a9       	ldd	r23, Y+50	; 0x32
    2268:	8b a9       	ldd	r24, Y+51	; 0x33
    226a:	9c a9       	ldd	r25, Y+52	; 0x34
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <LCD_Init+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6d a9       	ldd	r22, Y+53	; 0x35
    227e:	7e a9       	ldd	r23, Y+54	; 0x36
    2280:	8f a9       	ldd	r24, Y+55	; 0x37
    2282:	98 ad       	ldd	r25, Y+56	; 0x38
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	98 ab       	std	Y+48, r25	; 0x30
    22a2:	8f a7       	std	Y+47, r24	; 0x2f
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <LCD_Init+0x366>
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e a7       	std	Y+46, r25	; 0x2e
    22ac:	8d a7       	std	Y+45, r24	; 0x2d
    22ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_Init+0x354>
    22b6:	9e a7       	std	Y+46, r25	; 0x2e
    22b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    22bc:	98 a9       	ldd	r25, Y+48	; 0x30
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	98 ab       	std	Y+48, r25	; 0x30
    22c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <LCD_Init+0x348>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <LCD_Init+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	69 a9       	ldd	r22, Y+49	; 0x31
    22d0:	7a a9       	ldd	r23, Y+50	; 0x32
    22d2:	8b a9       	ldd	r24, Y+51	; 0x33
    22d4:	9c a9       	ldd	r25, Y+52	; 0x34
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	98 ab       	std	Y+48, r25	; 0x30
    22e0:	8f a7       	std	Y+47, r24	; 0x2f
    22e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e4:	98 a9       	ldd	r25, Y+48	; 0x30
    22e6:	9c a7       	std	Y+44, r25	; 0x2c
    22e8:	8b a7       	std	Y+43, r24	; 0x2b
    22ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_Init+0x390>
    22f2:	9c a7       	std	Y+44, r25	; 0x2c
    22f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_Send_Commoand(0x28);
    22f6:	88 e2       	ldi	r24, 0x28	; 40
    22f8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	8f a3       	std	Y+39, r24	; 0x27
    2306:	98 a7       	std	Y+40, r25	; 0x28
    2308:	a9 a7       	std	Y+41, r26	; 0x29
    230a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6f a1       	ldd	r22, Y+39	; 0x27
    230e:	78 a5       	ldd	r23, Y+40	; 0x28
    2310:	89 a5       	ldd	r24, Y+41	; 0x29
    2312:	9a a5       	ldd	r25, Y+42	; 0x2a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8b a3       	std	Y+35, r24	; 0x23
    2326:	9c a3       	std	Y+36, r25	; 0x24
    2328:	ad a3       	std	Y+37, r26	; 0x25
    232a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    232c:	6b a1       	ldd	r22, Y+35	; 0x23
    232e:	7c a1       	ldd	r23, Y+36	; 0x24
    2330:	8d a1       	ldd	r24, Y+37	; 0x25
    2332:	9e a1       	ldd	r25, Y+38	; 0x26
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_Init+0x3f0>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <LCD_Init+0x46e>
	else if (__tmp > 65535)
    234e:	6b a1       	ldd	r22, Y+35	; 0x23
    2350:	7c a1       	ldd	r23, Y+36	; 0x24
    2352:	8d a1       	ldd	r24, Y+37	; 0x25
    2354:	9e a1       	ldd	r25, Y+38	; 0x26
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <LCD_Init+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6f a1       	ldd	r22, Y+39	; 0x27
    2368:	78 a5       	ldd	r23, Y+40	; 0x28
    236a:	89 a5       	ldd	r24, Y+41	; 0x29
    236c:	9a a5       	ldd	r25, Y+42	; 0x2a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9a a3       	std	Y+34, r25	; 0x22
    238c:	89 a3       	std	Y+33, r24	; 0x21
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <LCD_Init+0x450>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	98 a3       	std	Y+32, r25	; 0x20
    2396:	8f 8f       	std	Y+31, r24	; 0x1f
    2398:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239a:	98 a1       	ldd	r25, Y+32	; 0x20
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_Init+0x43e>
    23a0:	98 a3       	std	Y+32, r25	; 0x20
    23a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	89 a1       	ldd	r24, Y+33	; 0x21
    23a6:	9a a1       	ldd	r25, Y+34	; 0x22
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9a a3       	std	Y+34, r25	; 0x22
    23ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	89 a1       	ldd	r24, Y+33	; 0x21
    23b0:	9a a1       	ldd	r25, Y+34	; 0x22
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <LCD_Init+0x432>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <LCD_Init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ba:	7c a1       	ldd	r23, Y+36	; 0x24
    23bc:	8d a1       	ldd	r24, Y+37	; 0x25
    23be:	9e a1       	ldd	r25, Y+38	; 0x26
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9a a3       	std	Y+34, r25	; 0x22
    23ca:	89 a3       	std	Y+33, r24	; 0x21
    23cc:	89 a1       	ldd	r24, Y+33	; 0x21
    23ce:	9a a1       	ldd	r25, Y+34	; 0x22
    23d0:	9e 8f       	std	Y+30, r25	; 0x1e
    23d2:	8d 8f       	std	Y+29, r24	; 0x1d
    23d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_Init+0x47a>
    23dc:	9e 8f       	std	Y+30, r25	; 0x1e
    23de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Send_Commoand(0x0c);
    23e0:	8c e0       	ldi	r24, 0x0C	; 12
    23e2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e8       	ldi	r26, 0x80	; 128
    23ec:	bf e3       	ldi	r27, 0x3F	; 63
    23ee:	89 8f       	std	Y+25, r24	; 0x19
    23f0:	9a 8f       	std	Y+26, r25	; 0x1a
    23f2:	ab 8f       	std	Y+27, r26	; 0x1b
    23f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	69 8d       	ldd	r22, Y+25	; 0x19
    23f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a ef       	ldi	r20, 0xFA	; 250
    2404:	54 e4       	ldi	r21, 0x44	; 68
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8d 8b       	std	Y+21, r24	; 0x15
    2410:	9e 8b       	std	Y+22, r25	; 0x16
    2412:	af 8b       	std	Y+23, r26	; 0x17
    2414:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_Init+0x4da>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 8b       	std	Y+20, r25	; 0x14
    2434:	8b 8b       	std	Y+19, r24	; 0x13
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <LCD_Init+0x558>
	else if (__tmp > 65535)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <LCD_Init+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	69 8d       	ldd	r22, Y+25	; 0x19
    2452:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2456:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <LCD_Init+0x53a>
    247a:	88 ec       	ldi	r24, 0xC8	; 200
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	89 8b       	std	Y+17, r24	; 0x11
    2482:	89 89       	ldd	r24, Y+17	; 0x11
    2484:	9a 89       	ldd	r25, Y+18	; 0x12
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_Init+0x528>
    248a:	9a 8b       	std	Y+18, r25	; 0x12
    248c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	8b 89       	ldd	r24, Y+19	; 0x13
    2490:	9c 89       	ldd	r25, Y+20	; 0x14
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9c 8b       	std	Y+20, r25	; 0x14
    2496:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	8b 89       	ldd	r24, Y+19	; 0x13
    249a:	9c 89       	ldd	r25, Y+20	; 0x14
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <LCD_Init+0x51c>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <LCD_Init+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6d 89       	ldd	r22, Y+21	; 0x15
    24a4:	7e 89       	ldd	r23, Y+22	; 0x16
    24a6:	8f 89       	ldd	r24, Y+23	; 0x17
    24a8:	98 8d       	ldd	r25, Y+24	; 0x18
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	98 8b       	std	Y+16, r25	; 0x10
    24bc:	8f 87       	std	Y+15, r24	; 0x0f
    24be:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c0:	98 89       	ldd	r25, Y+16	; 0x10
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_Init+0x564>
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Commoand(0x01);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 ef       	ldi	r26, 0xF0	; 240
    24d6:	b1 e4       	ldi	r27, 0x41	; 65
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	ad 87       	std	Y+13, r26	; 0x0d
    24de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8f 83       	std	Y+7, r24	; 0x07
    24fa:	98 87       	std	Y+8, r25	; 0x08
    24fc:	a9 87       	std	Y+9, r26	; 0x09
    24fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <LCD_Init+0x5c4>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <LCD_Init+0x642>
	else if (__tmp > 65535)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <LCD_Init+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <LCD_Init+0x624>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_Init+0x612>
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <LCD_Init+0x606>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <LCD_Init+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_Init+0x64e>
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	LCD_Send_Commoand(0x06);
    25b4:	86 e0       	ldi	r24, 0x06	; 6
    25b6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>

	LCD_Send_Commoand(0x80);
    25ba:	80 e8       	ldi	r24, 0x80	; 128
    25bc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>


#endif

}
    25c0:	cc 5a       	subi	r28, 0xAC	; 172
    25c2:	df 4f       	sbci	r29, 0xFF	; 255
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret

000025d8 <lCD_SetPostion>:


void lCD_SetPostion (u8 line , u8 x)

{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <lCD_SetPostion+0x6>
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	6a 83       	std	Y+2, r22	; 0x02

		if ((line >= 2 ) || (x >=15)){
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	18 f4       	brcc	.+6      	; 0x25f2 <lCD_SetPostion+0x1a>
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	8f 30       	cpi	r24, 0x0F	; 15
    25f0:	18 f0       	brcs	.+6      	; 0x25f8 <lCD_SetPostion+0x20>

			LCD_Send_Commoand (0x80);
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
		}

		if (line == 0){
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	88 23       	and	r24, r24
    25fc:	29 f4       	brne	.+10     	; 0x2608 <lCD_SetPostion+0x30>

			LCD_Send_Commoand(0x80 + x);
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	80 58       	subi	r24, 0x80	; 128
    2602:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <lCD_SetPostion+0x3e>

		}
		else if (line == 1) {
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	21 f4       	brne	.+8      	; 0x2616 <lCD_SetPostion+0x3e>

			LCD_Send_Commoand(0xC0 + x);
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	80 54       	subi	r24, 0x40	; 64
    2612:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_Send_Commoand>

		}
	}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <LCD_Send_String>:

void LCD_Send_String (u8 *PtrStr){
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <LCD_Send_String+0x6>
    2626:	0f 92       	push	r0
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	9b 83       	std	Y+3, r25	; 0x03
    262e:	8a 83       	std	Y+2, r24	; 0x02
u8 StrIterator = 0  ;
    2630:	19 82       	std	Y+1, r1	; 0x01
    2632:	0e c0       	rjmp	.+28     	; 0x2650 <LCD_Send_String+0x30>

	while (PtrStr [StrIterator] != '\0') {

		LCD_Send_Data(PtrStr[StrIterator]);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	80 81       	ld	r24, Z
    2646:	0e 94 55 0e 	call	0x1caa	; 0x1caa <LCD_Send_Data>

		StrIterator ++;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	89 83       	std	Y+1, r24	; 0x01
	}

void LCD_Send_String (u8 *PtrStr){
u8 StrIterator = 0  ;

	while (PtrStr [StrIterator] != '\0') {
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	39 f7       	brne	.-50     	; 0x2634 <LCD_Send_String+0x14>

		StrIterator ++;

	}

}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <LCD_WriteNumber>:


void LCD_WriteNumber(u32 Number)
{
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	60 97       	sbiw	r28, 0x10	; 16
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	6d 87       	std	Y+13, r22	; 0x0d
    268c:	7e 87       	std	Y+14, r23	; 0x0e
    268e:	8f 87       	std	Y+15, r24	; 0x0f
    2690:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,arr[10],j;
    2692:	1a 82       	std	Y+2, r1	; 0x02
	if(Number==0)
    2694:	8d 85       	ldd	r24, Y+13	; 0x0d
    2696:	9e 85       	ldd	r25, Y+14	; 0x0e
    2698:	af 85       	ldd	r26, Y+15	; 0x0f
    269a:	b8 89       	ldd	r27, Y+16	; 0x10
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	a1 05       	cpc	r26, r1
    26a0:	b1 05       	cpc	r27, r1
    26a2:	91 f5       	brne	.+100    	; 0x2708 <LCD_WriteNumber+0x96>
	LCD_Send_Data('0');
    26a4:	80 e3       	ldi	r24, 0x30	; 48
    26a6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <LCD_Send_Data>
    26aa:	4d c0       	rjmp	.+154    	; 0x2746 <LCD_WriteNumber+0xd4>
	else{
			while(Number)
			{
				arr[i]=Number%10+'0';
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	08 2f       	mov	r16, r24
    26b0:	10 e0       	ldi	r17, 0x00	; 0
    26b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b6:	af 85       	ldd	r26, Y+15	; 0x0f
    26b8:	b8 89       	ldd	r27, Y+16	; 0x10
    26ba:	2a e0       	ldi	r18, 0x0A	; 10
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	28 2f       	mov	r18, r24
    26d0:	20 5d       	subi	r18, 0xD0	; 208
    26d2:	ce 01       	movw	r24, r28
    26d4:	03 96       	adiw	r24, 0x03	; 3
    26d6:	fc 01       	movw	r30, r24
    26d8:	e0 0f       	add	r30, r16
    26da:	f1 1f       	adc	r31, r17
    26dc:	20 83       	st	Z, r18
				Number/=10;
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	af 85       	ldd	r26, Y+15	; 0x0f
    26e4:	b8 89       	ldd	r27, Y+16	; 0x10
    26e6:	2a e0       	ldi	r18, 0x0A	; 10
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
    26f6:	da 01       	movw	r26, r20
    26f8:	c9 01       	movw	r24, r18
    26fa:	8d 87       	std	Y+13, r24	; 0x0d
    26fc:	9e 87       	std	Y+14, r25	; 0x0e
    26fe:	af 87       	std	Y+15, r26	; 0x0f
    2700:	b8 8b       	std	Y+16, r27	; 0x10
				i++;
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i=0,arr[10],j;
	if(Number==0)
	LCD_Send_Data('0');
	else{
			while(Number)
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	af 85       	ldd	r26, Y+15	; 0x0f
    270e:	b8 89       	ldd	r27, Y+16	; 0x10
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	a1 05       	cpc	r26, r1
    2714:	b1 05       	cpc	r27, r1
    2716:	51 f6       	brne	.-108    	; 0x26ac <LCD_WriteNumber+0x3a>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	11 c0       	rjmp	.+34     	; 0x2740 <LCD_WriteNumber+0xce>
			{
				LCD_Send_Data(arr[j-1]);
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9c 01       	movw	r18, r24
    2726:	21 50       	subi	r18, 0x01	; 1
    2728:	30 40       	sbci	r19, 0x00	; 0
    272a:	ce 01       	movw	r24, r28
    272c:	03 96       	adiw	r24, 0x03	; 3
    272e:	fc 01       	movw	r30, r24
    2730:	e2 0f       	add	r30, r18
    2732:	f3 1f       	adc	r31, r19
    2734:	80 81       	ld	r24, Z
    2736:	0e 94 55 0e 	call	0x1caa	; 0x1caa <LCD_Send_Data>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	81 50       	subi	r24, 0x01	; 1
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	88 23       	and	r24, r24
    2744:	61 f7       	brne	.-40     	; 0x271e <LCD_WriteNumber+0xac>
			{
				LCD_Send_Data(arr[j-1]);
			}
	   }
}
    2746:	60 96       	adiw	r28, 0x10	; 16
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	08 95       	ret

0000275c <Timer0_init>:

/*****************************************************************************************
 * Implementation
 *
 ****************************************************************************************/
void Timer0_init (Timer0_Mode Mode , Timer0_Prescaler Scaler, OC0_Mode mode){
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	27 97       	sbiw	r28, 0x07	; 7
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	6a 83       	std	Y+2, r22	; 0x02
    2774:	4b 83       	std	Y+3, r20	; 0x03

	switch (Mode){
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3f 83       	std	Y+7, r19	; 0x07
    277e:	2e 83       	std	Y+6, r18	; 0x06
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	9f 81       	ldd	r25, Y+7	; 0x07
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	91 05       	cpc	r25, r1
    2788:	21 f1       	breq	.+72     	; 0x27d2 <Timer0_init+0x76>
    278a:	2e 81       	ldd	r18, Y+6	; 0x06
    278c:	3f 81       	ldd	r19, Y+7	; 0x07
    278e:	22 30       	cpi	r18, 0x02	; 2
    2790:	31 05       	cpc	r19, r1
    2792:	2c f4       	brge	.+10     	; 0x279e <Timer0_init+0x42>
    2794:	8e 81       	ldd	r24, Y+6	; 0x06
    2796:	9f 81       	ldd	r25, Y+7	; 0x07
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	61 f0       	breq	.+24     	; 0x27b4 <Timer0_init+0x58>
    279c:	46 c0       	rjmp	.+140    	; 0x282a <Timer0_init+0xce>
    279e:	2e 81       	ldd	r18, Y+6	; 0x06
    27a0:	3f 81       	ldd	r19, Y+7	; 0x07
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	31 05       	cpc	r19, r1
    27a6:	21 f1       	breq	.+72     	; 0x27f0 <Timer0_init+0x94>
    27a8:	8e 81       	ldd	r24, Y+6	; 0x06
    27aa:	9f 81       	ldd	r25, Y+7	; 0x07
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	91 05       	cpc	r25, r1
    27b0:	71 f1       	breq	.+92     	; 0x280e <Timer0_init+0xb2>
    27b2:	3b c0       	rjmp	.+118    	; 0x282a <Timer0_init+0xce>

	case Timer0_NormalMode :

		Clear_Bit(Timer0_TCCR0,WGM00);
    27b4:	a3 e5       	ldi	r26, 0x53	; 83
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e3 e5       	ldi	r30, 0x53	; 83
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	8f 7b       	andi	r24, 0xBF	; 191
    27c0:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    27c2:	a3 e5       	ldi	r26, 0x53	; 83
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e3 e5       	ldi	r30, 0x53	; 83
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	87 7f       	andi	r24, 0xF7	; 247
    27ce:	8c 93       	st	X, r24
    27d0:	2c c0       	rjmp	.+88     	; 0x282a <Timer0_init+0xce>

		break ;

	case Timer0_PWM_PhaseCorrect :

		Set_Bit(Timer0_TCCR0 , WGM00);
    27d2:	a3 e5       	ldi	r26, 0x53	; 83
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e3 e5       	ldi	r30, 0x53	; 83
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 64       	ori	r24, 0x40	; 64
    27de:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    27e0:	a3 e5       	ldi	r26, 0x53	; 83
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e3 e5       	ldi	r30, 0x53	; 83
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	87 7f       	andi	r24, 0xF7	; 247
    27ec:	8c 93       	st	X, r24
    27ee:	1d c0       	rjmp	.+58     	; 0x282a <Timer0_init+0xce>

		break;

	case Timer0_CTC :

		Clear_Bit(Timer0_TCCR0 , WGM00);
    27f0:	a3 e5       	ldi	r26, 0x53	; 83
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e3 e5       	ldi	r30, 0x53	; 83
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	8f 7b       	andi	r24, 0xBF	; 191
    27fc:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , WGM01);
    27fe:	a3 e5       	ldi	r26, 0x53	; 83
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e3 e5       	ldi	r30, 0x53	; 83
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	88 60       	ori	r24, 0x08	; 8
    280a:	8c 93       	st	X, r24
    280c:	0e c0       	rjmp	.+28     	; 0x282a <Timer0_init+0xce>

		break;

	case Timer0_FastPWM :

		 Set_Bit(Timer0_TCCR0 , WGM00);
    280e:	a3 e5       	ldi	r26, 0x53	; 83
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e3 e5       	ldi	r30, 0x53	; 83
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 64       	ori	r24, 0x40	; 64
    281a:	8c 93       	st	X, r24
		 Set_Bit(Timer0_TCCR0 , WGM01);
    281c:	a3 e5       	ldi	r26, 0x53	; 83
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e3 e5       	ldi	r30, 0x53	; 83
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	88 60       	ori	r24, 0x08	; 8
    2828:	8c 93       	st	X, r24

		break ;
	}
	/**Setting the Pre-scaler of the Clk**/

	Timer0_TCCR0 &= 0xF8;
    282a:	a3 e5       	ldi	r26, 0x53	; 83
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e3 e5       	ldi	r30, 0x53	; 83
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	88 7f       	andi	r24, 0xF8	; 248
    2836:	8c 93       	st	X, r24
	Timer0_TCCR0 |= Scaler;
    2838:	a3 e5       	ldi	r26, 0x53	; 83
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e3 e5       	ldi	r30, 0x53	; 83
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	90 81       	ld	r25, Z
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	89 2b       	or	r24, r25
    2846:	8c 93       	st	X, r24

	switch (mode) {
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	3d 83       	std	Y+5, r19	; 0x05
    2850:	2c 83       	std	Y+4, r18	; 0x04
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	91 05       	cpc	r25, r1
    285a:	21 f1       	breq	.+72     	; 0x28a4 <Timer0_init+0x148>
    285c:	2c 81       	ldd	r18, Y+4	; 0x04
    285e:	3d 81       	ldd	r19, Y+5	; 0x05
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	2c f4       	brge	.+10     	; 0x2870 <Timer0_init+0x114>
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	61 f0       	breq	.+24     	; 0x2886 <Timer0_init+0x12a>
    286e:	46 c0       	rjmp	.+140    	; 0x28fc <Timer0_init+0x1a0>
    2870:	2c 81       	ldd	r18, Y+4	; 0x04
    2872:	3d 81       	ldd	r19, Y+5	; 0x05
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	21 f1       	breq	.+72     	; 0x28c2 <Timer0_init+0x166>
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	83 30       	cpi	r24, 0x03	; 3
    2880:	91 05       	cpc	r25, r1
    2882:	71 f1       	breq	.+92     	; 0x28e0 <Timer0_init+0x184>
    2884:	3b c0       	rjmp	.+118    	; 0x28fc <Timer0_init+0x1a0>

	case OC0_Disconnected:

		Clear_Bit(Timer0_TCCR0 , COM00);
    2886:	a3 e5       	ldi	r26, 0x53	; 83
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e3 e5       	ldi	r30, 0x53	; 83
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8f 7e       	andi	r24, 0xEF	; 239
    2892:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    2894:	a3 e5       	ldi	r26, 0x53	; 83
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e3 e5       	ldi	r30, 0x53	; 83
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7d       	andi	r24, 0xDF	; 223
    28a0:	8c 93       	st	X, r24
    28a2:	2c c0       	rjmp	.+88     	; 0x28fc <Timer0_init+0x1a0>

		break;

	case Toggle_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    28a4:	a3 e5       	ldi	r26, 0x53	; 83
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e3 e5       	ldi	r30, 0x53	; 83
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 61       	ori	r24, 0x10	; 16
    28b0:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    28b2:	a3 e5       	ldi	r26, 0x53	; 83
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e3 e5       	ldi	r30, 0x53	; 83
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8f 7d       	andi	r24, 0xDF	; 223
    28be:	8c 93       	st	X, r24
    28c0:	1d c0       	rjmp	.+58     	; 0x28fc <Timer0_init+0x1a0>

		break ;

	case NonInverting_OC0 :

		Clear_Bit(Timer0_TCCR0 , COM00);
    28c2:	a3 e5       	ldi	r26, 0x53	; 83
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e3 e5       	ldi	r30, 0x53	; 83
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7e       	andi	r24, 0xEF	; 239
    28ce:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    28d0:	a3 e5       	ldi	r26, 0x53	; 83
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e3 e5       	ldi	r30, 0x53	; 83
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	80 62       	ori	r24, 0x20	; 32
    28dc:	8c 93       	st	X, r24
    28de:	0e c0       	rjmp	.+28     	; 0x28fc <Timer0_init+0x1a0>

		break;

	case Inverting_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    28e0:	a3 e5       	ldi	r26, 0x53	; 83
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e3 e5       	ldi	r30, 0x53	; 83
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	80 61       	ori	r24, 0x10	; 16
    28ec:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    28ee:	a3 e5       	ldi	r26, 0x53	; 83
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e3 e5       	ldi	r30, 0x53	; 83
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	80 62       	ori	r24, 0x20	; 32
    28fa:	8c 93       	st	X, r24

		break;
	}
}
    28fc:	27 96       	adiw	r28, 0x07	; 7
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <Timer0_OVF_Enable>:

void Timer0_OVF_Enable (void){
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_TOIE0);
    2916:	a9 e5       	ldi	r26, 0x59	; 89
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e9 e5       	ldi	r30, 0x59	; 89
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	81 60       	ori	r24, 0x01	; 1
    2922:	8c 93       	st	X, r24
}
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <Timer0_OVF_Disable>:

void Timer0_OVF_Disable (void){
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_TOIE0);
    2932:	a9 e5       	ldi	r26, 0x59	; 89
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e9 e5       	ldi	r30, 0x59	; 89
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	8e 7f       	andi	r24, 0xFE	; 254
    293e:	8c 93       	st	X, r24
}
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <Timer0_OC_Enable>:

void Timer0_OC_Enable (void){
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_OCIE0);
    294e:	a9 e5       	ldi	r26, 0x59	; 89
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 e5       	ldi	r30, 0x59	; 89
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	82 60       	ori	r24, 0x02	; 2
    295a:	8c 93       	st	X, r24

}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <Timer0_OC_Disable>:

void Timer0_OC_Disable (void){
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_OCIE0);
    296a:	a9 e5       	ldi	r26, 0x59	; 89
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e9 e5       	ldi	r30, 0x59	; 89
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	8d 7f       	andi	r24, 0xFD	; 253
    2976:	8c 93       	st	X, r24

}
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <Timer0_OVF_Callback>:
/********************************************************************************************
 * Callback Functions
 ********************************************************************************************/
void Timer0_OVF_Callback (void (* Local_PTR)(void ) ){
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <Timer0_OVF_Callback+0x6>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OVF = Local_PTR;
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	90 93 73 00 	sts	0x0073, r25
    2994:	80 93 72 00 	sts	0x0072, r24
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <Timer0_OC_CallBack>:

void Timer0_OC_CallBack (void (* Local_PTR)(void)) {
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <Timer0_OC_CallBack+0x6>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OC = Local_PTR;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	90 93 75 00 	sts	0x0075, r25
    29b8:	80 93 74 00 	sts	0x0074, r24
}
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <__vector_11>:
 * Timer0 ISR
 *********************************************************************************************/


void __vector_11(void)__attribute__((signal));
void __vector_11(){
    29c6:	1f 92       	push	r1
    29c8:	0f 92       	push	r0
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	0f 92       	push	r0
    29ce:	11 24       	eor	r1, r1
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OVF != Null){
    29f0:	80 91 72 00 	lds	r24, 0x0072
    29f4:	90 91 73 00 	lds	r25, 0x0073
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	29 f0       	breq	.+10     	; 0x2a06 <__vector_11+0x40>

		Timer0_OVF ();
    29fc:	e0 91 72 00 	lds	r30, 0x0072
    2a00:	f0 91 73 00 	lds	r31, 0x0073
    2a04:	09 95       	icall
	}
	}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(){
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OC!= Null){
    2a56:	80 91 74 00 	lds	r24, 0x0074
    2a5a:	90 91 75 00 	lds	r25, 0x0075
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	29 f0       	breq	.+10     	; 0x2a6c <__vector_10+0x40>

		Timer0_OC ();
    2a62:	e0 91 74 00 	lds	r30, 0x0074
    2a66:	f0 91 75 00 	lds	r31, 0x0075
    2a6a:	09 95       	icall
	}
	}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1
    2a90:	18 95       	reti

00002a92 <Read_ADC>:

void ADC_Calc(void);
volatile u16 ADC_Output ;
volatile u16 Result;

void Read_ADC (void){
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62

	ADC_Calc();
    2a9a:	0e 94 75 15 	call	0x2aea	; 0x2aea <ADC_Calc>



}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <main>:
void main (void ){
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62

	LCD_Init();
    2aac:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_Init>

	Gobal_interrput_Enbale();
    2ab0:	0e 94 03 09 	call	0x1206	; 0x1206 <Gobal_interrput_Enbale>

	ADC_Enable();
    2ab4:	0e 94 27 08 	call	0x104e	; 0x104e <ADC_Enable>

	ADC_Init(AVCC, Division_128, ADC0,Free_Running_mode);
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	66 e0       	ldi	r22, 0x06	; 6
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>

	ADC_AutoTriggerDisable();
    2ac4:	0e 94 5f 08 	call	0x10be	; 0x10be <ADC_AutoTriggerDisable>

	ADC_InterruptEnable();
    2ac8:	0e 94 6d 08 	call	0x10da	; 0x10da <ADC_InterruptEnable>

	ADC_CallBack( Read_ADC );
    2acc:	89 e4       	ldi	r24, 0x49	; 73
    2ace:	95 e1       	ldi	r25, 0x15	; 21
    2ad0:	0e 94 be 08 	call	0x117c	; 0x117c <ADC_CallBack>





	lCD_SetPostion(0, 0);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lCD_SetPostion>

	LCD_Send_String("Result:");
    2adc:	80 e6       	ldi	r24, 0x60	; 96
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 10 13 	call	0x2620	; 0x2620 <LCD_Send_String>

	while (1){

		ADC_Start_Conversion();
    2ae4:	0e 94 43 08 	call	0x1086	; 0x1086 <ADC_Start_Conversion>
    2ae8:	fd cf       	rjmp	.-6      	; 0x2ae4 <main+0x40>

00002aea <ADC_Calc>:


	}
}

void ADC_Calc(void){
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <ADC_Calc+0x6>
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62

	u16 Result;

	Result = ADC_Output_Calc(100,0, ADC0);
    2af4:	84 e6       	ldi	r24, 0x64	; 100
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 89 08 	call	0x1112	; 0x1112 <ADC_Output_Calc>
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01

	lCD_SetPostion(1, 0);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lCD_SetPostion>

	LCD_WriteNumber(Result);
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	cc 01       	movw	r24, r24
    2b14:	a0 e0       	ldi	r26, 0x00	; 0
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 39 13 	call	0x2672	; 0x2672 <LCD_WriteNumber>

}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <__udivmodsi4>:
    2b2a:	a1 e2       	ldi	r26, 0x21	; 33
    2b2c:	1a 2e       	mov	r1, r26
    2b2e:	aa 1b       	sub	r26, r26
    2b30:	bb 1b       	sub	r27, r27
    2b32:	fd 01       	movw	r30, r26
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <__udivmodsi4_ep>

00002b36 <__udivmodsi4_loop>:
    2b36:	aa 1f       	adc	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	ee 1f       	adc	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	a2 17       	cp	r26, r18
    2b40:	b3 07       	cpc	r27, r19
    2b42:	e4 07       	cpc	r30, r20
    2b44:	f5 07       	cpc	r31, r21
    2b46:	20 f0       	brcs	.+8      	; 0x2b50 <__udivmodsi4_ep>
    2b48:	a2 1b       	sub	r26, r18
    2b4a:	b3 0b       	sbc	r27, r19
    2b4c:	e4 0b       	sbc	r30, r20
    2b4e:	f5 0b       	sbc	r31, r21

00002b50 <__udivmodsi4_ep>:
    2b50:	66 1f       	adc	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	88 1f       	adc	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	1a 94       	dec	r1
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <__udivmodsi4_loop>
    2b5c:	60 95       	com	r22
    2b5e:	70 95       	com	r23
    2b60:	80 95       	com	r24
    2b62:	90 95       	com	r25
    2b64:	9b 01       	movw	r18, r22
    2b66:	ac 01       	movw	r20, r24
    2b68:	bd 01       	movw	r22, r26
    2b6a:	cf 01       	movw	r24, r30
    2b6c:	08 95       	ret

00002b6e <__prologue_saves__>:
    2b6e:	2f 92       	push	r2
    2b70:	3f 92       	push	r3
    2b72:	4f 92       	push	r4
    2b74:	5f 92       	push	r5
    2b76:	6f 92       	push	r6
    2b78:	7f 92       	push	r7
    2b7a:	8f 92       	push	r8
    2b7c:	9f 92       	push	r9
    2b7e:	af 92       	push	r10
    2b80:	bf 92       	push	r11
    2b82:	cf 92       	push	r12
    2b84:	df 92       	push	r13
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	ca 1b       	sub	r28, r26
    2b98:	db 0b       	sbc	r29, r27
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	09 94       	ijmp

00002ba6 <__epilogue_restores__>:
    2ba6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba8:	39 88       	ldd	r3, Y+17	; 0x11
    2baa:	48 88       	ldd	r4, Y+16	; 0x10
    2bac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2bba:	c8 84       	ldd	r12, Y+8	; 0x08
    2bbc:	df 80       	ldd	r13, Y+7	; 0x07
    2bbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2bc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2bc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2bc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bca:	ce 0f       	add	r28, r30
    2bcc:	d1 1d       	adc	r29, r1
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	ed 01       	movw	r28, r26
    2bda:	08 95       	ret

00002bdc <_exit>:
    2bdc:	f8 94       	cli

00002bde <__stop_program>:
    2bde:	ff cf       	rjmp	.-2      	; 0x2bde <__stop_program>
