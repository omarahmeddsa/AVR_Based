
Seven_Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00004014  000040a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000075  008000b4  008000b4  000040fc  2**0
                  ALLOC
  3 .stab         00003840  00000000  00000000  000040fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ae  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000912a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000929a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bdce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cf69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_6>
      1c:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_9>
      28:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_10>
      2c:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 1f 	call	0x3eca	; 0x3eca <main>
      8a:	0c 94 08 20 	jmp	0x4010	; 0x4010 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Gobal_interrput_Enbale>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void Gobal_interrput_Enbale (void )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,GobalInterrput_Pin);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Gobal_interrput_Disable>:

void Gobal_interrput_Disable (void )
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,GobalInterrput_Pin);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <Dio_u8_SetPortDir>:
void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <Dio_u8_SetPortDir+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <Dio_u8_SetPortDir+0x8>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	90 f5       	brcc	.+100    	; 0xbf8 <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3c 83       	std	Y+4, r19	; 0x04
     b9c:	2b 83       	std	Y+3, r18	; 0x03
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	d1 f0       	breq	.+52     	; 0xbdc <Dio_u8_SetPortDir+0x5e>
     ba8:	2b 81       	ldd	r18, Y+3	; 0x03
     baa:	3c 81       	ldd	r19, Y+4	; 0x04
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	2c f4       	brge	.+10     	; 0xbbc <Dio_u8_SetPortDir+0x3e>
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <Dio_u8_SetPortDir+0x54>
     bba:	1e c0       	rjmp	.+60     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
     bbc:	2b 81       	ldd	r18, Y+3	; 0x03
     bbe:	3c 81       	ldd	r19, Y+4	; 0x04
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	81 f0       	breq	.+32     	; 0xbe6 <Dio_u8_SetPortDir+0x68>
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	91 05       	cpc	r25, r1
     bce:	81 f0       	breq	.+32     	; 0xbf0 <Dio_u8_SetPortDir+0x72>
     bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	80 83       	st	Z, r24
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	80 83       	st	Z, r24
     be4:	09 c0       	rjmp	.+18     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
     be6:	e4 e3       	ldi	r30, 0x34	; 52
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	80 83       	st	Z, r24
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
     bf0:	e1 e3       	ldi	r30, 0x31	; 49
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	80 83       	st	Z, r24
			break;
		}
	}
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <Dio_u8_SetPortValue+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <Dio_u8_SetPortValue+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	90 f5       	brcc	.+100    	; 0xc80 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	3c 83       	std	Y+4, r19	; 0x04
     c24:	2b 83       	std	Y+3, r18	; 0x03
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	91 05       	cpc	r25, r1
     c2e:	d1 f0       	breq	.+52     	; 0xc64 <Dio_u8_SetPortValue+0x5e>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	22 30       	cpi	r18, 0x02	; 2
     c36:	31 05       	cpc	r19, r1
     c38:	2c f4       	brge	.+10     	; 0xc44 <Dio_u8_SetPortValue+0x3e>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	61 f0       	breq	.+24     	; 0xc5a <Dio_u8_SetPortValue+0x54>
     c42:	1e c0       	rjmp	.+60     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
     c44:	2b 81       	ldd	r18, Y+3	; 0x03
     c46:	3c 81       	ldd	r19, Y+4	; 0x04
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	31 05       	cpc	r19, r1
     c4c:	81 f0       	breq	.+32     	; 0xc6e <Dio_u8_SetPortValue+0x68>
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	91 05       	cpc	r25, r1
     c56:	81 f0       	breq	.+32     	; 0xc78 <Dio_u8_SetPortValue+0x72>
     c58:	13 c0       	rjmp	.+38     	; 0xc80 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
     c5a:	eb e3       	ldi	r30, 0x3B	; 59
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	80 83       	st	Z, r24
     c62:	0e c0       	rjmp	.+28     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
     c64:	e8 e3       	ldi	r30, 0x38	; 56
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	80 83       	st	Z, r24
     c6c:	09 c0       	rjmp	.+18     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
     c6e:	e5 e3       	ldi	r30, 0x35	; 53
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	80 83       	st	Z, r24
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
     c78:	e2 e3       	ldi	r30, 0x32	; 50
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	80 83       	st	Z, r24
			break;
		}
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <Dio_u8_GetportValue+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Dio_u8_GetportValue+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	90 f5       	brcc	.+100    	; 0xd06 <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3c 83       	std	Y+4, r19	; 0x04
     caa:	2b 83       	std	Y+3, r18	; 0x03
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	d1 f0       	breq	.+52     	; 0xcea <Dio_u8_GetportValue+0x5c>
     cb6:	2b 81       	ldd	r18, Y+3	; 0x03
     cb8:	3c 81       	ldd	r19, Y+4	; 0x04
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	2c f4       	brge	.+10     	; 0xcca <Dio_u8_GetportValue+0x3c>
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	61 f0       	breq	.+24     	; 0xce0 <Dio_u8_GetportValue+0x52>
     cc8:	1e c0       	rjmp	.+60     	; 0xd06 <Dio_u8_GetportValue+0x78>
     cca:	2b 81       	ldd	r18, Y+3	; 0x03
     ccc:	3c 81       	ldd	r19, Y+4	; 0x04
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <Dio_u8_GetportValue+0x66>
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	91 05       	cpc	r25, r1
     cdc:	81 f0       	breq	.+32     	; 0xcfe <Dio_u8_GetportValue+0x70>
     cde:	13 c0       	rjmp	.+38     	; 0xd06 <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
     ce0:	eb e3       	ldi	r30, 0x3B	; 59
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
     cea:	e8 e3       	ldi	r30, 0x38	; 56
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
     cf4:	e5 e3       	ldi	r30, 0x35	; 53
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <Dio_u8_SetPinDir+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <Dio_u8_SetPinDir+0x8>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	6a 83       	std	Y+2, r22	; 0x02
     d28:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <Dio_u8_SetPinDir+0x1c>
     d30:	d1 c0       	rjmp	.+418    	; 0xed4 <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3d 83       	std	Y+5, r19	; 0x05
     d3a:	2c 83       	std	Y+4, r18	; 0x04
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <Dio_u8_SetPinDir+0x32>
     d46:	43 c0       	rjmp	.+134    	; 0xdce <Dio_u8_SetPinDir+0xb8>
     d48:	2c 81       	ldd	r18, Y+4	; 0x04
     d4a:	3d 81       	ldd	r19, Y+5	; 0x05
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	2c f4       	brge	.+10     	; 0xd5c <Dio_u8_SetPinDir+0x46>
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	71 f0       	breq	.+28     	; 0xd76 <Dio_u8_SetPinDir+0x60>
     d5a:	bc c0       	rjmp	.+376    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <Dio_u8_SetPinDir+0x52>
     d66:	5f c0       	rjmp	.+190    	; 0xe26 <Dio_u8_SetPinDir+0x110>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_u8_SetPinDir+0x5e>
     d72:	85 c0       	rjmp	.+266    	; 0xe7e <Dio_u8_SetPinDir+0x168>
     d74:	af c0       	rjmp	.+350    	; 0xed4 <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	a1 f4       	brne	.+40     	; 0xda4 <Dio_u8_SetPinDir+0x8e>
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <Dio_u8_SetPinDir+0x84>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <Dio_u8_SetPinDir+0x80>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	98 c0       	rjmp	.+304    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     da4:	aa e3       	ldi	r26, 0x3A	; 58
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <Dio_u8_SetPinDir+0xac>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <Dio_u8_SetPinDir+0xa8>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	83 c0       	rjmp	.+262    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	a1 f4       	brne	.+40     	; 0xdfc <Dio_u8_SetPinDir+0xe6>
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <Dio_u8_SetPinDir+0xdc>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <Dio_u8_SetPinDir+0xd8>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	6c c0       	rjmp	.+216    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     dfc:	a7 e3       	ldi	r26, 0x37	; 55
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e3       	ldi	r30, 0x37	; 55
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <Dio_u8_SetPinDir+0x104>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <Dio_u8_SetPinDir+0x100>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	57 c0       	rjmp	.+174    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	a1 f4       	brne	.+40     	; 0xe54 <Dio_u8_SetPinDir+0x13e>
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <Dio_u8_SetPinDir+0x134>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <Dio_u8_SetPinDir+0x130>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <Dio_u8_SetPinDir+0x15c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <Dio_u8_SetPinDir+0x158>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	2b c0       	rjmp	.+86     	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	a1 f4       	brne	.+40     	; 0xeac <Dio_u8_SetPinDir+0x196>
     e84:	a1 e3       	ldi	r26, 0x31	; 49
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <Dio_u8_SetPinDir+0x18c>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <Dio_u8_SetPinDir+0x188>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <Dio_u8_SetPinDir+0x1b4>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <Dio_u8_SetPinDir+0x1b0>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
			break;
		}
	}
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <Dio_u8_SetPinVal+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <Dio_u8_SetPinVal+0x8>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	6a 83       	std	Y+2, r22	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	08 f0       	brcs	.+2      	; 0xf00 <Dio_u8_SetPinVal+0x1c>
     efe:	d1 c0       	rjmp	.+418    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <Dio_u8_SetPinVal+0x32>
     f14:	43 c0       	rjmp	.+134    	; 0xf9c <Dio_u8_SetPinVal+0xb8>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <Dio_u8_SetPinVal+0x46>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	71 f0       	breq	.+28     	; 0xf44 <Dio_u8_SetPinVal+0x60>
     f28:	bc c0       	rjmp	.+376    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <Dio_u8_SetPinVal+0x52>
     f34:	5f c0       	rjmp	.+190    	; 0xff4 <Dio_u8_SetPinVal+0x110>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <Dio_u8_SetPinVal+0x5e>
     f40:	85 c0       	rjmp	.+266    	; 0x104c <Dio_u8_SetPinVal+0x168>
     f42:	af c0       	rjmp	.+350    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	a1 f4       	brne	.+40     	; 0xf72 <Dio_u8_SetPinVal+0x8e>
     f4a:	ab e3       	ldi	r26, 0x3B	; 59
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb e3       	ldi	r30, 0x3B	; 59
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_u8_SetPinVal+0x84>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_u8_SetPinVal+0x80>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	98 c0       	rjmp	.+304    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <Dio_u8_SetPinVal+0xac>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <Dio_u8_SetPinVal+0xa8>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	83 c0       	rjmp	.+262    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <Dio_u8_SetPinVal+0xe6>
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <Dio_u8_SetPinVal+0xdc>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <Dio_u8_SetPinVal+0xd8>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	6c c0       	rjmp	.+216    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <Dio_u8_SetPinVal+0x104>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <Dio_u8_SetPinVal+0x100>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	57 c0       	rjmp	.+174    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <Dio_u8_SetPinVal+0x13e>
     ffa:	a5 e3       	ldi	r26, 0x35	; 53
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e3       	ldi	r30, 0x35	; 53
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <Dio_u8_SetPinVal+0x134>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <Dio_u8_SetPinVal+0x130>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Dio_u8_SetPinVal+0x15c>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <Dio_u8_SetPinVal+0x158>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	a1 f4       	brne	.+40     	; 0x107a <Dio_u8_SetPinVal+0x196>
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <Dio_u8_SetPinVal+0x18c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <Dio_u8_SetPinVal+0x188>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
    107a:	a2 e3       	ldi	r26, 0x32	; 50
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <Dio_u8_SetPinVal+0x1b4>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <Dio_u8_SetPinVal+0x1b0>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <Dio_u8_GetPinVal+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <Dio_u8_GetPinVal+0x8>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <Dio_u8_GetPinVal+0x1a>
    10ca:	67 c0       	rjmp	.+206    	; 0x119a <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	4c 81       	ldd	r20, Y+4	; 0x04
    10d8:	5d 81       	ldd	r21, Y+5	; 0x05
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	41 f1       	breq	.+80     	; 0x1130 <Dio_u8_GetPinVal+0x7e>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <Dio_u8_GetPinVal+0x44>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	61 f0       	breq	.+24     	; 0x110c <Dio_u8_GetPinVal+0x5a>
    10f4:	52 c0       	rjmp	.+164    	; 0x119a <Dio_u8_GetPinVal+0xe8>
    10f6:	4c 81       	ldd	r20, Y+4	; 0x04
    10f8:	5d 81       	ldd	r21, Y+5	; 0x05
    10fa:	42 30       	cpi	r20, 0x02	; 2
    10fc:	51 05       	cpc	r21, r1
    10fe:	51 f1       	breq	.+84     	; 0x1154 <Dio_u8_GetPinVal+0xa2>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	b9 f1       	breq	.+110    	; 0x1178 <Dio_u8_GetPinVal+0xc6>
    110a:	47 c0       	rjmp	.+142    	; 0x119a <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
    110c:	e9 e3       	ldi	r30, 0x39	; 57
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Dio_u8_GetPinVal+0x72>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Dio_u8_GetPinVal+0x6e>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	35 c0       	rjmp	.+106    	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
    1130:	e6 e3       	ldi	r30, 0x36	; 54
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <Dio_u8_GetPinVal+0x96>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <Dio_u8_GetPinVal+0x92>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	23 c0       	rjmp	.+70     	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <Dio_u8_GetPinVal+0xba>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <Dio_u8_GetPinVal+0xb6>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	11 c0       	rjmp	.+34     	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
    1178:	e0 e3       	ldi	r30, 0x30	; 48
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <Dio_u8_GetPinVal+0xde>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <Dio_u8_GetPinVal+0xda>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <Dio_u8_GetPortDir+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <Dio_u8_GetPortDir+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	90 f5       	brcc	.+100    	; 0x1224 <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3c 83       	std	Y+4, r19	; 0x04
    11c8:	2b 83       	std	Y+3, r18	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	d1 f0       	breq	.+52     	; 0x1208 <Dio_u8_GetPortDir+0x5c>
    11d4:	2b 81       	ldd	r18, Y+3	; 0x03
    11d6:	3c 81       	ldd	r19, Y+4	; 0x04
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <Dio_u8_GetPortDir+0x3c>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	61 f0       	breq	.+24     	; 0x11fe <Dio_u8_GetPortDir+0x52>
    11e6:	1e c0       	rjmp	.+60     	; 0x1224 <Dio_u8_GetPortDir+0x78>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <Dio_u8_GetPortDir+0x66>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <Dio_u8_GetPortDir+0x70>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
    1208:	e7 e3       	ldi	r30, 0x37	; 55
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <Dio_u8_GetPinDir+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <Dio_u8_GetPinDir+0x8>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f0       	brcs	.+2      	; 0x124e <Dio_u8_GetPinDir+0x1a>
    124c:	67 c0       	rjmp	.+206    	; 0x131c <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3d 83       	std	Y+5, r19	; 0x05
    1256:	2c 83       	std	Y+4, r18	; 0x04
    1258:	4c 81       	ldd	r20, Y+4	; 0x04
    125a:	5d 81       	ldd	r21, Y+5	; 0x05
    125c:	41 30       	cpi	r20, 0x01	; 1
    125e:	51 05       	cpc	r21, r1
    1260:	41 f1       	breq	.+80     	; 0x12b2 <Dio_u8_GetPinDir+0x7e>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	91 05       	cpc	r25, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <Dio_u8_GetPinDir+0x44>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <Dio_u8_GetPinDir+0x5a>
    1276:	52 c0       	rjmp	.+164    	; 0x131c <Dio_u8_GetPinDir+0xe8>
    1278:	4c 81       	ldd	r20, Y+4	; 0x04
    127a:	5d 81       	ldd	r21, Y+5	; 0x05
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	51 05       	cpc	r21, r1
    1280:	51 f1       	breq	.+84     	; 0x12d6 <Dio_u8_GetPinDir+0xa2>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	b9 f1       	breq	.+110    	; 0x12fa <Dio_u8_GetPinDir+0xc6>
    128c:	47 c0       	rjmp	.+142    	; 0x131c <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <Dio_u8_GetPinDir+0x72>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <Dio_u8_GetPinDir+0x6e>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	35 c0       	rjmp	.+106    	; 0x131c <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
    12b2:	e7 e3       	ldi	r30, 0x37	; 55
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <Dio_u8_GetPinDir+0x96>
    12c6:	55 95       	asr	r21
    12c8:	47 95       	ror	r20
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <Dio_u8_GetPinDir+0x92>
    12ce:	ca 01       	movw	r24, r20
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	23 c0       	rjmp	.+70     	; 0x131c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
    12d6:	e4 e3       	ldi	r30, 0x34	; 52
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <Dio_u8_GetPinDir+0xba>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <Dio_u8_GetPinDir+0xb6>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
    12fa:	e1 e3       	ldi	r30, 0x31	; 49
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <Dio_u8_GetPinDir+0xde>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <Dio_u8_GetPinDir+0xda>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
    131c:	80 e0       	ldi	r24, 0x00	; 0
	}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <Dio_Pullup>:

void Dio_Pullup (u8 CopyPort_ID, u8 Copy_BitNum)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <Dio_Pullup+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <Dio_Pullup+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	if ((CopyPort_ID <= Group_D )&& (CopyPort_ID >= Group_A)){
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <Dio_Pullup+0x18>
    1344:	4a c0       	rjmp	.+148    	; 0x13da <Dio_Pullup+0xac>

		switch (CopyPort_ID){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	01 f1       	breq	.+64     	; 0x139a <Dio_Pullup+0x6c>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <Dio_Pullup+0x40>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <Dio_Pullup+0x56>
    136c:	36 c0       	rjmp	.+108    	; 0x13da <Dio_Pullup+0xac>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	e1 f0       	breq	.+56     	; 0x13b0 <Dio_Pullup+0x82>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	11 f1       	breq	.+68     	; 0x13c6 <Dio_Pullup+0x98>
    1382:	2b c0       	rjmp	.+86     	; 0x13da <Dio_Pullup+0xac>

		case Group_A:

			Dio_u8_SetPinDir(Group_A, Copy_BitNum, Dio_PinInput);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	6a 81       	ldd	r22, Y+2	; 0x02
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_A, Copy_BitNum,Dio_PinHigh);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	6a 81       	ldd	r22, Y+2	; 0x02
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    1398:	20 c0       	rjmp	.+64     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_B:

			Dio_u8_SetPinDir(Group_B, Copy_BitNum, Dio_PinInput);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	6a 81       	ldd	r22, Y+2	; 0x02
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_B, Copy_BitNum,Dio_PinHigh);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	6a 81       	ldd	r22, Y+2	; 0x02
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_C:

			Dio_u8_SetPinDir(Group_C, Copy_BitNum, Dio_PinInput);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	6a 81       	ldd	r22, Y+2	; 0x02
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_C, Copy_BitNum,Dio_PinHigh);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	6a 81       	ldd	r22, Y+2	; 0x02
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    13c4:	0a c0       	rjmp	.+20     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_D:

			Dio_u8_SetPinDir(Group_D, Copy_BitNum, Dio_PinInput);
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	6a 81       	ldd	r22, Y+2	; 0x02
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_D, Copy_BitNum,Dio_PinHigh);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	6a 81       	ldd	r22, Y+2	; 0x02
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

			break;
		}
	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <KPD_Init>:
						   {'4','5','6','*'}, /* Row1 */
						   {'1','2','3','-'}, /* Row2 */
						   {'?','0','=','+'}  /* Row3 */};


void KPD_Init (void ) {
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62

	Dio_u8_SetPinDir(KPD_PORT, KPD_Row0, Dio_PinInput);
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row1, Dio_PinInput);
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row2, Dio_PinInput);
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Row3, Dio_PinInput);
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	63 e0       	ldi	r22, 0x03	; 3
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>

	Dio_u8_SetPinVal(KPD_PORT, KPD_Row0, Dio_PinHigh);
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row1, Dio_PinHigh);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row2, Dio_PinHigh);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	62 e0       	ldi	r22, 0x02	; 2
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Row3, Dio_PinHigh);
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	63 e0       	ldi	r22, 0x03	; 3
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinDir(KPD_PORT, KPD_Col0, Dio_PinOutput);
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	64 e0       	ldi	r22, 0x04	; 4
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col1, Dio_PinOutput);
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	65 e0       	ldi	r22, 0x05	; 5
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col2, Dio_PinOutput);
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	66 e0       	ldi	r22, 0x06	; 6
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(KPD_PORT, KPD_Col3, Dio_PinOutput);
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	67 e0       	ldi	r22, 0x07	; 7
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>

	Dio_u8_SetPinVal(KPD_PORT, KPD_Col0, Dio_PinHigh);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col1, Dio_PinHigh);
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	65 e0       	ldi	r22, 0x05	; 5
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col2, Dio_PinHigh);
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	66 e0       	ldi	r22, 0x06	; 6
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(KPD_PORT, KPD_Col3, Dio_PinHigh);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	67 e0       	ldi	r22, 0x07	; 7
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <KPD_PRESSED>:

u8 KPD_PRESSED (void ) {
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	62 97       	sbiw	r28, 0x12	; 18
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61

	u8 Loc_Returndata = '\0';
    14aa:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Loc_Getpressed ;
	u8 Row_Count ;
	u8 Col_count ;

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	8f 87       	std	Y+15, r24	; 0x0f
    14b0:	bd c0       	rjmp	.+378    	; 0x162c <KPD_PRESSED+0x196>

		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinLow);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

		for (Row_Count = KPD_ROW_INIT ; Row_Count < KPD_ROW_END +1 ; Row_Count ++ ){
    14bc:	18 8a       	std	Y+16, r1	; 0x10
    14be:	aa c0       	rjmp	.+340    	; 0x1614 <KPD_PRESSED+0x17e>


			Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	68 89       	ldd	r22, Y+16	; 0x10
    14c4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Dio_u8_GetPinVal>
    14c8:	89 8b       	std	Y+17, r24	; 0x11

			if (Loc_Getpressed == 0){
    14ca:	89 89       	ldd	r24, Y+17	; 0x11
    14cc:	88 23       	and	r24, r24
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <KPD_PRESSED+0x3c>
    14d0:	9e c0       	rjmp	.+316    	; 0x160e <KPD_PRESSED+0x178>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a8 e4       	ldi	r26, 0x48	; 72
    14d8:	b2 e4       	ldi	r27, 0x42	; 66
    14da:	8b 87       	std	Y+11, r24	; 0x0b
    14dc:	9c 87       	std	Y+12, r25	; 0x0c
    14de:	ad 87       	std	Y+13, r26	; 0x0d
    14e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a ef       	ldi	r20, 0xFA	; 250
    14f0:	54 e4       	ldi	r21, 0x44	; 68
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8f 83       	std	Y+7, r24	; 0x07
    14fc:	98 87       	std	Y+8, r25	; 0x08
    14fe:	a9 87       	std	Y+9, r26	; 0x09
    1500:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	78 85       	ldd	r23, Y+8	; 0x08
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <KPD_PRESSED+0x8e>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <KPD_PRESSED+0x10c>
	else if (__tmp > 65535)
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <KPD_PRESSED+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	6b 85       	ldd	r22, Y+11	; 0x0b
    153e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1540:	8d 85       	ldd	r24, Y+13	; 0x0d
    1542:	9e 85       	ldd	r25, Y+14	; 0x0e
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <KPD_PRESSED+0xee>
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <KPD_PRESSED+0xdc>
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <KPD_PRESSED+0xd0>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <KPD_PRESSED+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <KPD_PRESSED+0x118>
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	68 89       	ldd	r22, Y+16	; 0x10
    15ba:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Dio_u8_GetPinVal>
    15be:	89 8b       	std	Y+17, r24	; 0x11
				if (Loc_Getpressed == 0){
    15c0:	89 89       	ldd	r24, Y+17	; 0x11
    15c2:	88 23       	and	r24, r24
    15c4:	a9 f4       	brne	.+42     	; 0x15f0 <KPD_PRESSED+0x15a>
					Loc_Returndata = KPD_u8Buttons [Row_Count - KPD_ROW_INIT][Col_count - KPD_COL_INIT];
    15c6:	88 89       	ldd	r24, Y+16	; 0x10
    15c8:	48 2f       	mov	r20, r24
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	24 50       	subi	r18, 0x04	; 4
    15d6:	30 40       	sbci	r19, 0x00	; 0
    15d8:	ca 01       	movw	r24, r20
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	fc 01       	movw	r30, r24
    15e8:	e7 56       	subi	r30, 0x67	; 103
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 81       	ld	r24, Z
    15ee:	8a 8b       	std	Y+18, r24	; 0x12
				}
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	68 89       	ldd	r22, Y+16	; 0x10
    15f4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Dio_u8_GetPinVal>
    15f8:	89 8b       	std	Y+17, r24	; 0x11
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <KPD_PRESSED+0x170>
				while (Dio_PinLow == Loc_Getpressed){
					Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	68 89       	ldd	r22, Y+16	; 0x10
    1600:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Dio_u8_GetPinVal>
    1604:	89 8b       	std	Y+17, r24	; 0x11
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				if (Loc_Getpressed == 0){
					Loc_Returndata = KPD_u8Buttons [Row_Count - KPD_ROW_INIT][Col_count - KPD_COL_INIT];
				}
				Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				while (Dio_PinLow == Loc_Getpressed){
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	88 23       	and	r24, r24
    160a:	c1 f3       	breq	.-16     	; 0x15fc <KPD_PRESSED+0x166>
    160c:	07 c0       	rjmp	.+14     	; 0x161c <KPD_PRESSED+0x186>

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){

		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinLow);

		for (Row_Count = KPD_ROW_INIT ; Row_Count < KPD_ROW_END +1 ; Row_Count ++ ){
    160e:	88 89       	ldd	r24, Y+16	; 0x10
    1610:	8f 5f       	subi	r24, 0xFF	; 255
    1612:	88 8b       	std	Y+16, r24	; 0x10
    1614:	88 89       	ldd	r24, Y+16	; 0x10
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	08 f4       	brcc	.+2      	; 0x161c <KPD_PRESSED+0x186>
    161a:	52 cf       	rjmp	.-348    	; 0x14c0 <KPD_PRESSED+0x2a>
					Loc_Getpressed = Dio_u8_GetPinVal(KPD_PORT, Row_Count);
				}
				break ;
			}
		}
		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinHigh);
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	u8 Loc_Returndata = '\0';
	u8 Loc_Getpressed ;
	u8 Row_Count ;
	u8 Col_count ;

	for (Col_count = KPD_COL_INIT ;Col_count  < KPD_COL_END +1  ; Col_count ++ ){
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8f 87       	std	Y+15, r24	; 0x0f
    162c:	8f 85       	ldd	r24, Y+15	; 0x0f
    162e:	88 30       	cpi	r24, 0x08	; 8
    1630:	08 f4       	brcc	.+2      	; 0x1634 <KPD_PRESSED+0x19e>
    1632:	3f cf       	rjmp	.-386    	; 0x14b2 <KPD_PRESSED+0x1c>
			}
		}
		Dio_u8_SetPinVal(KPD_PORT, Col_count, Dio_PinHigh);

	}
	return Loc_Returndata;
    1634:	8a 89       	ldd	r24, Y+18	; 0x12

}
    1636:	62 96       	adiw	r28, 0x12	; 18
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <LCD_Send_FallingEdge>:
/************************************************************************
 *
 * Implementation
 *
 *************************************************************************/
void LCD_Send_FallingEdge () {
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	6c 97       	sbiw	r28, 0x1c	; 28
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinHigh);
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	66 e0       	ldi	r22, 0x06	; 6
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e4       	ldi	r27, 0x40	; 64
    166e:	89 8f       	std	Y+25, r24	; 0x19
    1670:	9a 8f       	std	Y+26, r25	; 0x1a
    1672:	ab 8f       	std	Y+27, r26	; 0x1b
    1674:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1676:	69 8d       	ldd	r22, Y+25	; 0x19
    1678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    167a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a ef       	ldi	r20, 0xFA	; 250
    1684:	54 e4       	ldi	r21, 0x44	; 68
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	8d 8b       	std	Y+21, r24	; 0x15
    1690:	9e 8b       	std	Y+22, r25	; 0x16
    1692:	af 8b       	std	Y+23, r26	; 0x17
    1694:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1696:	6d 89       	ldd	r22, Y+21	; 0x15
    1698:	7e 89       	ldd	r23, Y+22	; 0x16
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	98 8d       	ldd	r25, Y+24	; 0x18
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <LCD_Send_FallingEdge+0x70>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <LCD_Send_FallingEdge+0xee>
	else if (__tmp > 65535)
    16b8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ba:	7e 89       	ldd	r23, Y+22	; 0x16
    16bc:	8f 89       	ldd	r24, Y+23	; 0x17
    16be:	98 8d       	ldd	r25, Y+24	; 0x18
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	4c f5       	brge	.+82     	; 0x1722 <LCD_Send_FallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d0:	69 8d       	ldd	r22, Y+25	; 0x19
    16d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9c 8b       	std	Y+20, r25	; 0x14
    16f6:	8b 8b       	std	Y+19, r24	; 0x13
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <LCD_Send_FallingEdge+0xd0>
    16fa:	88 ec       	ldi	r24, 0xC8	; 200
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9a 8b       	std	Y+18, r25	; 0x12
    1700:	89 8b       	std	Y+17, r24	; 0x11
    1702:	89 89       	ldd	r24, Y+17	; 0x11
    1704:	9a 89       	ldd	r25, Y+18	; 0x12
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_Send_FallingEdge+0xbe>
    170a:	9a 8b       	std	Y+18, r25	; 0x12
    170c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170e:	8b 89       	ldd	r24, Y+19	; 0x13
    1710:	9c 89       	ldd	r25, Y+20	; 0x14
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	8b 89       	ldd	r24, Y+19	; 0x13
    171a:	9c 89       	ldd	r25, Y+20	; 0x14
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	69 f7       	brne	.-38     	; 0x16fa <LCD_Send_FallingEdge+0xb2>
    1720:	14 c0       	rjmp	.+40     	; 0x174a <LCD_Send_FallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1722:	6d 89       	ldd	r22, Y+21	; 0x15
    1724:	7e 89       	ldd	r23, Y+22	; 0x16
    1726:	8f 89       	ldd	r24, Y+23	; 0x17
    1728:	98 8d       	ldd	r25, Y+24	; 0x18
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9c 8b       	std	Y+20, r25	; 0x14
    1734:	8b 8b       	std	Y+19, r24	; 0x13
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	98 8b       	std	Y+16, r25	; 0x10
    173c:	8f 87       	std	Y+15, r24	; 0x0f
    173e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1740:	98 89       	ldd	r25, Y+16	; 0x10
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_Send_FallingEdge+0xfa>
    1746:	98 8b       	std	Y+16, r25	; 0x10
    1748:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinLow);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e0       	ldi	r26, 0x00	; 0
    175a:	b0 e4       	ldi	r27, 0x40	; 64
    175c:	8b 87       	std	Y+11, r24	; 0x0b
    175e:	9c 87       	std	Y+12, r25	; 0x0c
    1760:	ad 87       	std	Y+13, r26	; 0x0d
    1762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a ef       	ldi	r20, 0xFA	; 250
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8f 83       	std	Y+7, r24	; 0x07
    177e:	98 87       	std	Y+8, r25	; 0x08
    1780:	a9 87       	std	Y+9, r26	; 0x09
    1782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	2c f4       	brge	.+10     	; 0x17a6 <LCD_Send_FallingEdge+0x15e>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	3f c0       	rjmp	.+126    	; 0x1824 <LCD_Send_FallingEdge+0x1dc>
	else if (__tmp > 65535)
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	4c f5       	brge	.+82     	; 0x1810 <LCD_Send_FallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <LCD_Send_FallingEdge+0x1be>
    17e8:	88 ec       	ldi	r24, 0xC8	; 200
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_Send_FallingEdge+0x1ac>
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	69 f7       	brne	.-38     	; 0x17e8 <LCD_Send_FallingEdge+0x1a0>
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <LCD_Send_FallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_Send_FallingEdge+0x1e8>
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    1838:	6c 96       	adiw	r28, 0x1c	; 28
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <LCD_Send_Data>:
void LCD_Send_Data (u8 Copy_u8_Data) {
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_FallingEdge();


#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinHigh);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	65 e0       	ldi	r22, 0x05	; 5
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Data,4));
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	82 95       	swap	r24
    186e:	8f 70       	andi	r24, 0x0F	; 15
    1870:	98 2f       	mov	r25, r24
    1872:	91 70       	andi	r25, 0x01	; 1
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	49 2f       	mov	r20, r25
    187a:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Data,5));
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	82 95       	swap	r24
    1882:	86 95       	lsr	r24
    1884:	87 70       	andi	r24, 0x07	; 7
    1886:	98 2f       	mov	r25, r24
    1888:	91 70       	andi	r25, 0x01	; 1
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	49 2f       	mov	r20, r25
    1890:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Data,6));
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	83 70       	andi	r24, 0x03	; 3
    189e:	98 2f       	mov	r25, r24
    18a0:	91 70       	andi	r25, 0x01	; 1
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	49 2f       	mov	r20, r25
    18a8:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Data,7));
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	98 2f       	mov	r25, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	99 27       	eor	r25, r25
    18b4:	99 1f       	adc	r25, r25
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	49 2f       	mov	r20, r25
    18bc:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    18c0:	0e 94 24 0b 	call	0x1648	; 0x1648 <LCD_Send_FallingEdge>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Data,0));
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	98 2f       	mov	r25, r24
    18c8:	91 70       	andi	r25, 0x01	; 1
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	49 2f       	mov	r20, r25
    18d0:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Data,1));
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	86 95       	lsr	r24
    18d8:	98 2f       	mov	r25, r24
    18da:	91 70       	andi	r25, 0x01	; 1
    18dc:	82 e0       	ldi	r24, 0x02	; 2
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	49 2f       	mov	r20, r25
    18e2:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Data,2));
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	86 95       	lsr	r24
    18ea:	86 95       	lsr	r24
    18ec:	98 2f       	mov	r25, r24
    18ee:	91 70       	andi	r25, 0x01	; 1
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	62 e0       	ldi	r22, 0x02	; 2
    18f4:	49 2f       	mov	r20, r25
    18f6:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Data,3));
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	86 95       	lsr	r24
    18fe:	86 95       	lsr	r24
    1900:	86 95       	lsr	r24
    1902:	98 2f       	mov	r25, r24
    1904:	91 70       	andi	r25, 0x01	; 1
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	63 e0       	ldi	r22, 0x03	; 3
    190a:	49 2f       	mov	r20, r25
    190c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1910:	0e 94 24 0b 	call	0x1648	; 0x1648 <LCD_Send_FallingEdge>


#endif

}
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <LCD_Send_Commoand>:

void LCD_Send_Commoand(u8 Copy_u8_Command){
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_FallingEdge();


#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinLow);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	64 e0       	ldi	r22, 0x04	; 4
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	65 e0       	ldi	r22, 0x05	; 5
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Command,4));
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	82 95       	swap	r24
    1940:	8f 70       	andi	r24, 0x0F	; 15
    1942:	98 2f       	mov	r25, r24
    1944:	91 70       	andi	r25, 0x01	; 1
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	49 2f       	mov	r20, r25
    194c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Command,5));
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	82 95       	swap	r24
    1954:	86 95       	lsr	r24
    1956:	87 70       	andi	r24, 0x07	; 7
    1958:	98 2f       	mov	r25, r24
    195a:	91 70       	andi	r25, 0x01	; 1
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	49 2f       	mov	r20, r25
    1962:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Command,6));
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	82 95       	swap	r24
    196a:	86 95       	lsr	r24
    196c:	86 95       	lsr	r24
    196e:	83 70       	andi	r24, 0x03	; 3
    1970:	98 2f       	mov	r25, r24
    1972:	91 70       	andi	r25, 0x01	; 1
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	49 2f       	mov	r20, r25
    197a:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Command,7));
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	98 2f       	mov	r25, r24
    1982:	99 1f       	adc	r25, r25
    1984:	99 27       	eor	r25, r25
    1986:	99 1f       	adc	r25, r25
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	63 e0       	ldi	r22, 0x03	; 3
    198c:	49 2f       	mov	r20, r25
    198e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1992:	0e 94 24 0b 	call	0x1648	; 0x1648 <LCD_Send_FallingEdge>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Copy_u8_Command,0));
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	98 2f       	mov	r25, r24
    199a:	91 70       	andi	r25, 0x01	; 1
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	49 2f       	mov	r20, r25
    19a2:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Copy_u8_Command,1));
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	86 95       	lsr	r24
    19aa:	98 2f       	mov	r25, r24
    19ac:	91 70       	andi	r25, 0x01	; 1
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	49 2f       	mov	r20, r25
    19b4:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Copy_u8_Command,2));
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	86 95       	lsr	r24
    19bc:	86 95       	lsr	r24
    19be:	98 2f       	mov	r25, r24
    19c0:	91 70       	andi	r25, 0x01	; 1
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	62 e0       	ldi	r22, 0x02	; 2
    19c6:	49 2f       	mov	r20, r25
    19c8:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Copy_u8_Command,3));
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	86 95       	lsr	r24
    19d0:	86 95       	lsr	r24
    19d2:	86 95       	lsr	r24
    19d4:	98 2f       	mov	r25, r24
    19d6:	91 70       	andi	r25, 0x01	; 1
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	63 e0       	ldi	r22, 0x03	; 3
    19dc:	49 2f       	mov	r20, r25
    19de:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    19e2:	0e 94 24 0b 	call	0x1648	; 0x1648 <LCD_Send_FallingEdge>


#endif

}
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <LCD_Display_Clear>:

void LCD_Display_Clear (){
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	2e 97       	sbiw	r28, 0x0e	; 14
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61

	LCD_Send_Commoand(LCD_Display_clear);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a0e:	b1 e4       	ldi	r27, 0x41	; 65
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_Display_Clear+0x6c>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_Display_Clear+0xea>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_Display_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_Display_Clear+0xcc>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_Display_Clear+0xba>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_Display_Clear+0xae>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_Display_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_Display_Clear+0xf6>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    1aec:	2e 96       	adiw	r28, 0x0e	; 14
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <LCD_Init>:

void LCD_Init (void){
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	c4 55       	subi	r28, 0x54	; 84
    1b0c:	d0 40       	sbci	r29, 0x00	; 0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61



#elif LCD_MODE == LCD_4Bit_mode

	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RS, Dio_PinOutput);
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RW, Dio_PinOutput);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	65 e0       	ldi	r22, 0x05	; 5
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_ENB, Dio_PinOutput);
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	66 e0       	ldi	r22, 0x06	; 6
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
    1b36:	fe 01       	movw	r30, r28
    1b38:	ef 5a       	subi	r30, 0xAF	; 175
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a8 e4       	ldi	r26, 0x48	; 72
    1b42:	b2 e4       	ldi	r27, 0x42	; 66
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	03 5b       	subi	r16, 0xB3	; 179
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	ef 5a       	subi	r30, 0xAF	; 175
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a ef       	ldi	r20, 0xFA	; 250
    1b66:	54 e4       	ldi	r21, 0x44	; 68
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e3 5b       	subi	r30, 0xB3	; 179
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	44 f4       	brge	.+16     	; 0x1ba8 <LCD_Init+0xaa>
		__ticks = 1;
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e5 5b       	subi	r30, 0xB5	; 181
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
    1ba6:	64 c0       	rjmp	.+200    	; 0x1c70 <LCD_Init+0x172>
	else if (__tmp > 65535)
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e3 5b       	subi	r30, 0xB3	; 179
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	0c f0       	brlt	.+2      	; 0x1bc8 <LCD_Init+0xca>
    1bc6:	43 c0       	rjmp	.+134    	; 0x1c4e <LCD_Init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ef 5a       	subi	r30, 0xAF	; 175
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	8e 01       	movw	r16, r28
    1be8:	05 5b       	subi	r16, 0xB5	; 181
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	1f c0       	rjmp	.+62     	; 0x1c3e <LCD_Init+0x140>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e7 5b       	subi	r30, 0xB7	; 183
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	88 ec       	ldi	r24, 0xC8	; 200
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e7 5b       	subi	r30, 0xB7	; 183
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_Init+0x11a>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e7 5b       	subi	r30, 0xB7	; 183
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	de 01       	movw	r26, r28
    1c28:	a5 5b       	subi	r26, 0xB5	; 181
    1c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e5 5b       	subi	r30, 0xB5	; 181
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	11 96       	adiw	r26, 0x01	; 1
    1c3a:	9c 93       	st	X, r25
    1c3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e5 5b       	subi	r30, 0xB5	; 181
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	d1 f6       	brne	.-76     	; 0x1c00 <LCD_Init+0x102>
    1c4c:	27 c0       	rjmp	.+78     	; 0x1c9c <LCD_Init+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	05 5b       	subi	r16, 0xB5	; 181
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	e3 5b       	subi	r30, 0xB3	; 179
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	de 01       	movw	r26, r28
    1c72:	a9 5b       	subi	r26, 0xB9	; 185
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e5 5b       	subi	r30, 0xB5	; 181
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	8d 93       	st	X+, r24
    1c82:	9c 93       	st	X, r25
    1c84:	fe 01       	movw	r30, r28
    1c86:	e9 5b       	subi	r30, 0xB9	; 185
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_Init+0x190>
    1c92:	fe 01       	movw	r30, r28
    1c94:	e9 5b       	subi	r30, 0xB9	; 185
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_Send_Commoand(0x33);
    1c9c:	83 e3       	ldi	r24, 0x33	; 51
    1c9e:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ed 5b       	subi	r30, 0xBD	; 189
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e8       	ldi	r26, 0x80	; 128
    1cae:	bf e3       	ldi	r27, 0x3F	; 63
    1cb0:	80 83       	st	Z, r24
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	a2 83       	std	Z+2, r26	; 0x02
    1cb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	01 5c       	subi	r16, 0xC1	; 193
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 5b       	subi	r30, 0xBD	; 189
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	80 83       	st	Z, r24
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	a2 83       	std	Z+2, r26	; 0x02
    1ce4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ff 96       	adiw	r30, 0x3f	; 63
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_Init+0x20e>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9e af       	std	Y+62, r25	; 0x3e
    1d08:	8d af       	std	Y+61, r24	; 0x3d
    1d0a:	46 c0       	rjmp	.+140    	; 0x1d98 <LCD_Init+0x29a>
	else if (__tmp > 65535)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ff 96       	adiw	r30, 0x3f	; 63
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	64 f5       	brge	.+88     	; 0x1d80 <LCD_Init+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 5b       	subi	r30, 0xBD	; 189
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9e af       	std	Y+62, r25	; 0x3e
    1d54:	8d af       	std	Y+61, r24	; 0x3d
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_Init+0x278>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c af       	std	Y+60, r25	; 0x3c
    1d5e:	8b af       	std	Y+59, r24	; 0x3b
    1d60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_Init+0x266>
    1d68:	9c af       	std	Y+60, r25	; 0x3c
    1d6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9e af       	std	Y+62, r25	; 0x3e
    1d74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_Init+0x25a>
    1d7e:	16 c0       	rjmp	.+44     	; 0x1dac <LCD_Init+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	fe 01       	movw	r30, r28
    1d82:	ff 96       	adiw	r30, 0x3f	; 63
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e af       	std	Y+62, r25	; 0x3e
    1d96:	8d af       	std	Y+61, r24	; 0x3d
    1d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9c:	9a af       	std	Y+58, r25	; 0x3a
    1d9e:	89 af       	std	Y+57, r24	; 0x39
    1da0:	89 ad       	ldd	r24, Y+57	; 0x39
    1da2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_Init+0x2a6>
    1da8:	9a af       	std	Y+58, r25	; 0x3a
    1daa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_Send_Commoand(0x02);
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e8       	ldi	r26, 0x80	; 128
    1db8:	bf e3       	ldi	r27, 0x3F	; 63
    1dba:	8d ab       	std	Y+53, r24	; 0x35
    1dbc:	9e ab       	std	Y+54, r25	; 0x36
    1dbe:	af ab       	std	Y+55, r26	; 0x37
    1dc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	89 ab       	std	Y+49, r24	; 0x31
    1ddc:	9a ab       	std	Y+50, r25	; 0x32
    1dde:	ab ab       	std	Y+51, r26	; 0x33
    1de0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1de2:	69 a9       	ldd	r22, Y+49	; 0x31
    1de4:	7a a9       	ldd	r23, Y+50	; 0x32
    1de6:	8b a9       	ldd	r24, Y+51	; 0x33
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_Init+0x306>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	98 ab       	std	Y+48, r25	; 0x30
    1e00:	8f a7       	std	Y+47, r24	; 0x2f
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_Init+0x384>
	else if (__tmp > 65535)
    1e04:	69 a9       	ldd	r22, Y+49	; 0x31
    1e06:	7a a9       	ldd	r23, Y+50	; 0x32
    1e08:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_Init+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e20:	8f a9       	ldd	r24, Y+55	; 0x37
    1e22:	98 ad       	ldd	r25, Y+56	; 0x38
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	98 ab       	std	Y+48, r25	; 0x30
    1e42:	8f a7       	std	Y+47, r24	; 0x2f
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_Init+0x366>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9e a7       	std	Y+46, r25	; 0x2e
    1e4c:	8d a7       	std	Y+45, r24	; 0x2d
    1e4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_Init+0x354>
    1e56:	9e a7       	std	Y+46, r25	; 0x2e
    1e58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	98 ab       	std	Y+48, r25	; 0x30
    1e62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_Init+0x348>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <LCD_Init+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e70:	7a a9       	ldd	r23, Y+50	; 0x32
    1e72:	8b a9       	ldd	r24, Y+51	; 0x33
    1e74:	9c a9       	ldd	r25, Y+52	; 0x34
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	98 ab       	std	Y+48, r25	; 0x30
    1e80:	8f a7       	std	Y+47, r24	; 0x2f
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	9c a7       	std	Y+44, r25	; 0x2c
    1e88:	8b a7       	std	Y+43, r24	; 0x2b
    1e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_Init+0x390>
    1e92:	9c a7       	std	Y+44, r25	; 0x2c
    1e94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_Send_Commoand(0x28);
    1e96:	88 e2       	ldi	r24, 0x28	; 40
    1e98:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e8       	ldi	r26, 0x80	; 128
    1ea2:	bf e3       	ldi	r27, 0x3F	; 63
    1ea4:	8f a3       	std	Y+39, r24	; 0x27
    1ea6:	98 a7       	std	Y+40, r25	; 0x28
    1ea8:	a9 a7       	std	Y+41, r26	; 0x29
    1eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6f a1       	ldd	r22, Y+39	; 0x27
    1eae:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a ef       	ldi	r20, 0xFA	; 250
    1eba:	54 e4       	ldi	r21, 0x44	; 68
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8b a3       	std	Y+35, r24	; 0x23
    1ec6:	9c a3       	std	Y+36, r25	; 0x24
    1ec8:	ad a3       	std	Y+37, r26	; 0x25
    1eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ece:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <LCD_Init+0x3f0>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <LCD_Init+0x46e>
	else if (__tmp > 65535)
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <LCD_Init+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6f a1       	ldd	r22, Y+39	; 0x27
    1f08:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9a a3       	std	Y+34, r25	; 0x22
    1f2c:	89 a3       	std	Y+33, r24	; 0x21
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_Init+0x450>
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	98 a3       	std	Y+32, r25	; 0x20
    1f36:	8f 8f       	std	Y+31, r24	; 0x1f
    1f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_Init+0x43e>
    1f40:	98 a3       	std	Y+32, r25	; 0x20
    1f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9a a3       	std	Y+34, r25	; 0x22
    1f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f50:	9a a1       	ldd	r25, Y+34	; 0x22
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_Init+0x432>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <LCD_Init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9a a3       	std	Y+34, r25	; 0x22
    1f6a:	89 a3       	std	Y+33, r24	; 0x21
    1f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f70:	9e 8f       	std	Y+30, r25	; 0x1e
    1f72:	8d 8f       	std	Y+29, r24	; 0x1d
    1f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_Init+0x47a>
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Send_Commoand(0x0c);
    1f80:	8c e0       	ldi	r24, 0x0C	; 12
    1f82:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
    1f90:	9a 8f       	std	Y+26, r25	; 0x1a
    1f92:	ab 8f       	std	Y+27, r26	; 0x1b
    1f94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	69 8d       	ldd	r22, Y+25	; 0x19
    1f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8d 8b       	std	Y+21, r24	; 0x15
    1fb0:	9e 8b       	std	Y+22, r25	; 0x16
    1fb2:	af 8b       	std	Y+23, r26	; 0x17
    1fb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <LCD_Init+0x4da>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <LCD_Init+0x558>
	else if (__tmp > 65535)
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <LCD_Init+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	8b 8b       	std	Y+19, r24	; 0x13
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_Init+0x53a>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	89 8b       	std	Y+17, r24	; 0x11
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	9a 89       	ldd	r25, Y+18	; 0x12
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_Init+0x528>
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9c 8b       	std	Y+20, r25	; 0x14
    2036:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <LCD_Init+0x51c>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <LCD_Init+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	98 8b       	std	Y+16, r25	; 0x10
    205c:	8f 87       	std	Y+15, r24	; 0x0f
    205e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2060:	98 89       	ldd	r25, Y+16	; 0x10
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_Init+0x564>
    2066:	98 8b       	std	Y+16, r25	; 0x10
    2068:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Commoand(0x01);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 ef       	ldi	r26, 0xF0	; 240
    2076:	b1 e4       	ldi	r27, 0x41	; 65
    2078:	8b 87       	std	Y+11, r24	; 0x0b
    207a:	9c 87       	std	Y+12, r25	; 0x0c
    207c:	ad 87       	std	Y+13, r26	; 0x0d
    207e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	6b 85       	ldd	r22, Y+11	; 0x0b
    2082:	7c 85       	ldd	r23, Y+12	; 0x0c
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a ef       	ldi	r20, 0xFA	; 250
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8f 83       	std	Y+7, r24	; 0x07
    209a:	98 87       	std	Y+8, r25	; 0x08
    209c:	a9 87       	std	Y+9, r26	; 0x09
    209e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <LCD_Init+0x5c4>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <LCD_Init+0x642>
	else if (__tmp > 65535)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <LCD_Init+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <LCD_Init+0x624>
    2104:	88 ec       	ldi	r24, 0xC8	; 200
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_Init+0x612>
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <LCD_Init+0x606>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <LCD_Init+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_Init+0x64e>
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	LCD_Send_Commoand(0x06);
    2154:	86 e0       	ldi	r24, 0x06	; 6
    2156:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>

	LCD_Send_Commoand(0x80);
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>


#endif

}
    2160:	cc 5a       	subi	r28, 0xAC	; 172
    2162:	df 4f       	sbci	r29, 0xFF	; 255
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <lCD_SetPostion>:


void lCD_SetPostion (u8 line , u8 x)

{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <lCD_SetPostion+0x6>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02

		if ((line >= 2 ) || (x >=15)){
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	18 f4       	brcc	.+6      	; 0x2192 <lCD_SetPostion+0x1a>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	8f 30       	cpi	r24, 0x0F	; 15
    2190:	18 f0       	brcs	.+6      	; 0x2198 <lCD_SetPostion+0x20>

			LCD_Send_Commoand (0x80);
    2192:	80 e8       	ldi	r24, 0x80	; 128
    2194:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
		}

		if (line == 0){
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 23       	and	r24, r24
    219c:	29 f4       	brne	.+10     	; 0x21a8 <lCD_SetPostion+0x30>

			LCD_Send_Commoand(0x80 + x);
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	80 58       	subi	r24, 0x80	; 128
    21a2:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <lCD_SetPostion+0x3e>

		}
		else if (line == 1) {
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <lCD_SetPostion+0x3e>

			LCD_Send_Commoand(0xC0 + x);
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	80 54       	subi	r24, 0x40	; 64
    21b2:	0e 94 8e 0c 	call	0x191c	; 0x191c <LCD_Send_Commoand>

		}
	}
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_Send_String>:

void LCD_Send_String (u8 *PtrStr){
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <LCD_Send_String+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	9b 83       	std	Y+3, r25	; 0x03
    21ce:	8a 83       	std	Y+2, r24	; 0x02
u8 StrIterator = 0  ;
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <LCD_Send_String+0x30>

	while (PtrStr [StrIterator] != '\0') {

		LCD_Send_Data(PtrStr[StrIterator]);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	fc 01       	movw	r30, r24
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	80 81       	ld	r24, Z
    21e6:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_Send_Data>

		StrIterator ++;
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	89 83       	std	Y+1, r24	; 0x01
	}

void LCD_Send_String (u8 *PtrStr){
u8 StrIterator = 0  ;

	while (PtrStr [StrIterator] != '\0') {
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	fc 01       	movw	r30, r24
    21fc:	e2 0f       	add	r30, r18
    21fe:	f3 1f       	adc	r31, r19
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	39 f7       	brne	.-50     	; 0x21d4 <LCD_Send_String+0x14>

		StrIterator ++;

	}

}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_WriteNumber>:


void LCD_WriteNumber(u32 Number)
{
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	60 97       	sbiw	r28, 0x10	; 16
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	6d 87       	std	Y+13, r22	; 0x0d
    222c:	7e 87       	std	Y+14, r23	; 0x0e
    222e:	8f 87       	std	Y+15, r24	; 0x0f
    2230:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,arr[10],j;
    2232:	1a 82       	std	Y+2, r1	; 0x02
	if(Number==0)
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	af 85       	ldd	r26, Y+15	; 0x0f
    223a:	b8 89       	ldd	r27, Y+16	; 0x10
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	a1 05       	cpc	r26, r1
    2240:	b1 05       	cpc	r27, r1
    2242:	91 f5       	brne	.+100    	; 0x22a8 <LCD_WriteNumber+0x96>
	LCD_Send_Data('0');
    2244:	80 e3       	ldi	r24, 0x30	; 48
    2246:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_Send_Data>
    224a:	4d c0       	rjmp	.+154    	; 0x22e6 <LCD_WriteNumber+0xd4>
	else{
			while(Number)
			{
				arr[i]=Number%10+'0';
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	08 2f       	mov	r16, r24
    2250:	10 e0       	ldi	r17, 0x00	; 0
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	af 85       	ldd	r26, Y+15	; 0x0f
    2258:	b8 89       	ldd	r27, Y+16	; 0x10
    225a:	2a e0       	ldi	r18, 0x0A	; 10
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodsi4>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	28 2f       	mov	r18, r24
    2270:	20 5d       	subi	r18, 0xD0	; 208
    2272:	ce 01       	movw	r24, r28
    2274:	03 96       	adiw	r24, 0x03	; 3
    2276:	fc 01       	movw	r30, r24
    2278:	e0 0f       	add	r30, r16
    227a:	f1 1f       	adc	r31, r17
    227c:	20 83       	st	Z, r18
				Number/=10;
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	af 85       	ldd	r26, Y+15	; 0x0f
    2284:	b8 89       	ldd	r27, Y+16	; 0x10
    2286:	2a e0       	ldi	r18, 0x0A	; 10
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodsi4>
    2296:	da 01       	movw	r26, r20
    2298:	c9 01       	movw	r24, r18
    229a:	8d 87       	std	Y+13, r24	; 0x0d
    229c:	9e 87       	std	Y+14, r25	; 0x0e
    229e:	af 87       	std	Y+15, r26	; 0x0f
    22a0:	b8 8b       	std	Y+16, r27	; 0x10
				i++;
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i=0,arr[10],j;
	if(Number==0)
	LCD_Send_Data('0');
	else{
			while(Number)
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	af 85       	ldd	r26, Y+15	; 0x0f
    22ae:	b8 89       	ldd	r27, Y+16	; 0x10
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	a1 05       	cpc	r26, r1
    22b4:	b1 05       	cpc	r27, r1
    22b6:	51 f6       	brne	.-108    	; 0x224c <LCD_WriteNumber+0x3a>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	11 c0       	rjmp	.+34     	; 0x22e0 <LCD_WriteNumber+0xce>
			{
				LCD_Send_Data(arr[j-1]);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9c 01       	movw	r18, r24
    22c6:	21 50       	subi	r18, 0x01	; 1
    22c8:	30 40       	sbci	r19, 0x00	; 0
    22ca:	ce 01       	movw	r24, r28
    22cc:	03 96       	adiw	r24, 0x03	; 3
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	80 81       	ld	r24, Z
    22d6:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_Send_Data>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	88 23       	and	r24, r24
    22e4:	61 f7       	brne	.-40     	; 0x22be <LCD_WriteNumber+0xac>
			{
				LCD_Send_Data(arr[j-1]);
			}
	   }
}
    22e6:	60 96       	adiw	r28, 0x10	; 16
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	08 95       	ret

000022fc <SevenSegment_Init>:
#include "Bit_calc.h"
#include "Dio.h"
#include "Seven_Segment.h"


void SevenSegment_Init (void){
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62


	Dio_u8_SetPortDir(Seven_Segment_Dircetion, Dio_PortOutput);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	6f ef       	ldi	r22, 0xFF	; 255
    2308:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Dio_u8_SetPortDir>

}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <SevenSegment_Write>:

void SevenSegment_Write ( u8 Number){
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	60 97       	sbiw	r28, 0x10	; 16
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	8b 87       	std	Y+11, r24	; 0x0b
			 0b00110011,  // 4
			 0b01011011,  // 5
			 0b01011111 , // 6
			 0b01110000 , // 7
             0b01111111,  // 8
			 0b01111011}; // 9
    2328:	ce 01       	movw	r24, r28
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	9d 87       	std	Y+13, r25	; 0x0d
    232e:	8c 87       	std	Y+12, r24	; 0x0c
    2330:	e9 ea       	ldi	r30, 0xA9	; 169
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	ff 87       	std	Y+15, r31	; 0x0f
    2336:	ee 87       	std	Y+14, r30	; 0x0e
    2338:	fa e0       	ldi	r31, 0x0A	; 10
    233a:	f8 8b       	std	Y+16, r31	; 0x10
    233c:	ee 85       	ldd	r30, Y+14	; 0x0e
    233e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2340:	00 80       	ld	r0, Z
    2342:	8e 85       	ldd	r24, Y+14	; 0x0e
    2344:	9f 85       	ldd	r25, Y+15	; 0x0f
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	9f 87       	std	Y+15, r25	; 0x0f
    234a:	8e 87       	std	Y+14, r24	; 0x0e
    234c:	ec 85       	ldd	r30, Y+12	; 0x0c
    234e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2350:	00 82       	st	Z, r0
    2352:	8c 85       	ldd	r24, Y+12	; 0x0c
    2354:	9d 85       	ldd	r25, Y+13	; 0x0d
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	9d 87       	std	Y+13, r25	; 0x0d
    235a:	8c 87       	std	Y+12, r24	; 0x0c
    235c:	98 89       	ldd	r25, Y+16	; 0x10
    235e:	91 50       	subi	r25, 0x01	; 1
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	e8 89       	ldd	r30, Y+16	; 0x10
    2364:	ee 23       	and	r30, r30
    2366:	51 f7       	brne	.-44     	; 0x233c <SevenSegment_Write+0x2a>



	Seven_Segment_PORT = arr[Number];
    2368:	a8 e3       	ldi	r26, 0x38	; 56
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	8b 85       	ldd	r24, Y+11	; 0x0b
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	8c 93       	st	X, r24
	                                      0b1000000, // display '8'
	                                      0b1000110}; // display '9'
			Seven_Segment_PORT = array[Number];

	#endif
}
    2380:	60 96       	adiw	r28, 0x10	; 16
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <Timer0_init>:

/*****************************************************************************************
 * Implementation
 *
 ****************************************************************************************/
void Timer0_init (Timer0_Mode Mode , Timer0_Prescaler Scaler, OC0_Mode mode){
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	27 97       	sbiw	r28, 0x07	; 7
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6a 83       	std	Y+2, r22	; 0x02
    23aa:	4b 83       	std	Y+3, r20	; 0x03

	switch (Mode){
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	3f 83       	std	Y+7, r19	; 0x07
    23b4:	2e 83       	std	Y+6, r18	; 0x06
    23b6:	8e 81       	ldd	r24, Y+6	; 0x06
    23b8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	91 05       	cpc	r25, r1
    23be:	21 f1       	breq	.+72     	; 0x2408 <Timer0_init+0x76>
    23c0:	2e 81       	ldd	r18, Y+6	; 0x06
    23c2:	3f 81       	ldd	r19, Y+7	; 0x07
    23c4:	22 30       	cpi	r18, 0x02	; 2
    23c6:	31 05       	cpc	r19, r1
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <Timer0_init+0x42>
    23ca:	8e 81       	ldd	r24, Y+6	; 0x06
    23cc:	9f 81       	ldd	r25, Y+7	; 0x07
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	61 f0       	breq	.+24     	; 0x23ea <Timer0_init+0x58>
    23d2:	46 c0       	rjmp	.+140    	; 0x2460 <Timer0_init+0xce>
    23d4:	2e 81       	ldd	r18, Y+6	; 0x06
    23d6:	3f 81       	ldd	r19, Y+7	; 0x07
    23d8:	22 30       	cpi	r18, 0x02	; 2
    23da:	31 05       	cpc	r19, r1
    23dc:	21 f1       	breq	.+72     	; 0x2426 <Timer0_init+0x94>
    23de:	8e 81       	ldd	r24, Y+6	; 0x06
    23e0:	9f 81       	ldd	r25, Y+7	; 0x07
    23e2:	83 30       	cpi	r24, 0x03	; 3
    23e4:	91 05       	cpc	r25, r1
    23e6:	71 f1       	breq	.+92     	; 0x2444 <Timer0_init+0xb2>
    23e8:	3b c0       	rjmp	.+118    	; 0x2460 <Timer0_init+0xce>

	case Timer0_NormalMode :

		Clear_Bit(Timer0_TCCR0,WGM00);
    23ea:	a3 e5       	ldi	r26, 0x53	; 83
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e3 e5       	ldi	r30, 0x53	; 83
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 7b       	andi	r24, 0xBF	; 191
    23f6:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    23f8:	a3 e5       	ldi	r26, 0x53	; 83
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e3 e5       	ldi	r30, 0x53	; 83
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	87 7f       	andi	r24, 0xF7	; 247
    2404:	8c 93       	st	X, r24
    2406:	2c c0       	rjmp	.+88     	; 0x2460 <Timer0_init+0xce>

		break ;

	case Timer0_PWM_PhaseCorrect :

		Set_Bit(Timer0_TCCR0 , WGM00);
    2408:	a3 e5       	ldi	r26, 0x53	; 83
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e3 e5       	ldi	r30, 0x53	; 83
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	80 64       	ori	r24, 0x40	; 64
    2414:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    2416:	a3 e5       	ldi	r26, 0x53	; 83
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e3 e5       	ldi	r30, 0x53	; 83
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	87 7f       	andi	r24, 0xF7	; 247
    2422:	8c 93       	st	X, r24
    2424:	1d c0       	rjmp	.+58     	; 0x2460 <Timer0_init+0xce>

		break;

	case Timer0_CTC :

		Clear_Bit(Timer0_TCCR0 , WGM00);
    2426:	a3 e5       	ldi	r26, 0x53	; 83
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e3 e5       	ldi	r30, 0x53	; 83
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8f 7b       	andi	r24, 0xBF	; 191
    2432:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , WGM01);
    2434:	a3 e5       	ldi	r26, 0x53	; 83
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e3 e5       	ldi	r30, 0x53	; 83
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	88 60       	ori	r24, 0x08	; 8
    2440:	8c 93       	st	X, r24
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <Timer0_init+0xce>

		break;

	case Timer0_FastPWM :

		 Set_Bit(Timer0_TCCR0 , WGM00);
    2444:	a3 e5       	ldi	r26, 0x53	; 83
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e3 e5       	ldi	r30, 0x53	; 83
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	80 64       	ori	r24, 0x40	; 64
    2450:	8c 93       	st	X, r24
		 Set_Bit(Timer0_TCCR0 , WGM01);
    2452:	a3 e5       	ldi	r26, 0x53	; 83
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e3 e5       	ldi	r30, 0x53	; 83
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	88 60       	ori	r24, 0x08	; 8
    245e:	8c 93       	st	X, r24

		break ;
	}
	/**Setting the Pre-scaler of the Clk**/

	Timer0_TCCR0 &= 0xF8;
    2460:	a3 e5       	ldi	r26, 0x53	; 83
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e3 e5       	ldi	r30, 0x53	; 83
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	88 7f       	andi	r24, 0xF8	; 248
    246c:	8c 93       	st	X, r24
	Timer0_TCCR0 |= Scaler;
    246e:	a3 e5       	ldi	r26, 0x53	; 83
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e3 e5       	ldi	r30, 0x53	; 83
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	90 81       	ld	r25, Z
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	89 2b       	or	r24, r25
    247c:	8c 93       	st	X, r24

	switch (mode) {
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	3d 83       	std	Y+5, r19	; 0x05
    2486:	2c 83       	std	Y+4, r18	; 0x04
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	21 f1       	breq	.+72     	; 0x24da <Timer0_init+0x148>
    2492:	2c 81       	ldd	r18, Y+4	; 0x04
    2494:	3d 81       	ldd	r19, Y+5	; 0x05
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	2c f4       	brge	.+10     	; 0x24a6 <Timer0_init+0x114>
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	9d 81       	ldd	r25, Y+5	; 0x05
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	61 f0       	breq	.+24     	; 0x24bc <Timer0_init+0x12a>
    24a4:	46 c0       	rjmp	.+140    	; 0x2532 <Timer0_init+0x1a0>
    24a6:	2c 81       	ldd	r18, Y+4	; 0x04
    24a8:	3d 81       	ldd	r19, Y+5	; 0x05
    24aa:	22 30       	cpi	r18, 0x02	; 2
    24ac:	31 05       	cpc	r19, r1
    24ae:	21 f1       	breq	.+72     	; 0x24f8 <Timer0_init+0x166>
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	83 30       	cpi	r24, 0x03	; 3
    24b6:	91 05       	cpc	r25, r1
    24b8:	71 f1       	breq	.+92     	; 0x2516 <Timer0_init+0x184>
    24ba:	3b c0       	rjmp	.+118    	; 0x2532 <Timer0_init+0x1a0>

	case OC0_Disconnected:

		Clear_Bit(Timer0_TCCR0 , COM00);
    24bc:	a3 e5       	ldi	r26, 0x53	; 83
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e3 e5       	ldi	r30, 0x53	; 83
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7e       	andi	r24, 0xEF	; 239
    24c8:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    24ca:	a3 e5       	ldi	r26, 0x53	; 83
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e3 e5       	ldi	r30, 0x53	; 83
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	8c 93       	st	X, r24
    24d8:	2c c0       	rjmp	.+88     	; 0x2532 <Timer0_init+0x1a0>

		break;

	case Toggle_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    24da:	a3 e5       	ldi	r26, 0x53	; 83
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e3 e5       	ldi	r30, 0x53	; 83
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	80 61       	ori	r24, 0x10	; 16
    24e6:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    24e8:	a3 e5       	ldi	r26, 0x53	; 83
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e3 e5       	ldi	r30, 0x53	; 83
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 7d       	andi	r24, 0xDF	; 223
    24f4:	8c 93       	st	X, r24
    24f6:	1d c0       	rjmp	.+58     	; 0x2532 <Timer0_init+0x1a0>

		break ;

	case NonInverting_OC0 :

		Clear_Bit(Timer0_TCCR0 , COM00);
    24f8:	a3 e5       	ldi	r26, 0x53	; 83
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e3 e5       	ldi	r30, 0x53	; 83
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8f 7e       	andi	r24, 0xEF	; 239
    2504:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    2506:	a3 e5       	ldi	r26, 0x53	; 83
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e3 e5       	ldi	r30, 0x53	; 83
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	80 62       	ori	r24, 0x20	; 32
    2512:	8c 93       	st	X, r24
    2514:	0e c0       	rjmp	.+28     	; 0x2532 <Timer0_init+0x1a0>

		break;

	case Inverting_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    2516:	a3 e5       	ldi	r26, 0x53	; 83
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e3 e5       	ldi	r30, 0x53	; 83
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	80 61       	ori	r24, 0x10	; 16
    2522:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    2524:	a3 e5       	ldi	r26, 0x53	; 83
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e3 e5       	ldi	r30, 0x53	; 83
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 62       	ori	r24, 0x20	; 32
    2530:	8c 93       	st	X, r24

		break;
	}
}
    2532:	27 96       	adiw	r28, 0x07	; 7
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <Timer0_OVF_Enable>:

void Timer0_OVF_Enable (void){
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_TOIE0);
    254c:	a9 e5       	ldi	r26, 0x59	; 89
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e9 e5       	ldi	r30, 0x59	; 89
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	81 60       	ori	r24, 0x01	; 1
    2558:	8c 93       	st	X, r24
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <Timer0_OVF_Disable>:

void Timer0_OVF_Disable (void){
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_TOIE0);
    2568:	a9 e5       	ldi	r26, 0x59	; 89
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e9 e5       	ldi	r30, 0x59	; 89
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8e 7f       	andi	r24, 0xFE	; 254
    2574:	8c 93       	st	X, r24
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <Timer0_OC_Enable>:

void Timer0_OC_Enable (void){
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_OCIE0);
    2584:	a9 e5       	ldi	r26, 0x59	; 89
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 e5       	ldi	r30, 0x59	; 89
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	8c 93       	st	X, r24

}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <Timer0_OC_Disable>:

void Timer0_OC_Disable (void){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_OCIE0);
    25a0:	a9 e5       	ldi	r26, 0x59	; 89
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e9 e5       	ldi	r30, 0x59	; 89
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	8d 7f       	andi	r24, 0xFD	; 253
    25ac:	8c 93       	st	X, r24

}
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <Timer0_OVF_Callback>:
/********************************************************************************************
 * Callback Functions
 ********************************************************************************************/
void Timer0_OVF_Callback (void (* Local_PTR)(void ) ){
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <Timer0_OVF_Callback+0x6>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OVF = Local_PTR;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	90 93 b5 00 	sts	0x00B5, r25
    25ca:	80 93 b4 00 	sts	0x00B4, r24
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <Timer0_OC_CallBack>:

void Timer0_OC_CallBack (void (* Local_PTR)(void)) {
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <Timer0_OC_CallBack+0x6>
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OC = Local_PTR;
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	90 93 b7 00 	sts	0x00B7, r25
    25ee:	80 93 b6 00 	sts	0x00B6, r24
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <__vector_11>:
 * Timer0 ISR
 *********************************************************************************************/


void __vector_11(void)__attribute__((signal));
void __vector_11(){
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	0f 92       	push	r0
    2604:	11 24       	eor	r1, r1
    2606:	2f 93       	push	r18
    2608:	3f 93       	push	r19
    260a:	4f 93       	push	r20
    260c:	5f 93       	push	r21
    260e:	6f 93       	push	r22
    2610:	7f 93       	push	r23
    2612:	8f 93       	push	r24
    2614:	9f 93       	push	r25
    2616:	af 93       	push	r26
    2618:	bf 93       	push	r27
    261a:	ef 93       	push	r30
    261c:	ff 93       	push	r31
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OVF != Null){
    2626:	80 91 b4 00 	lds	r24, 0x00B4
    262a:	90 91 b5 00 	lds	r25, 0x00B5
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	29 f0       	breq	.+10     	; 0x263c <__vector_11+0x40>

		Timer0_OVF ();
    2632:	e0 91 b4 00 	lds	r30, 0x00B4
    2636:	f0 91 b5 00 	lds	r31, 0x00B5
    263a:	09 95       	icall
	}
	}
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	7f 91       	pop	r23
    264e:	6f 91       	pop	r22
    2650:	5f 91       	pop	r21
    2652:	4f 91       	pop	r20
    2654:	3f 91       	pop	r19
    2656:	2f 91       	pop	r18
    2658:	0f 90       	pop	r0
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	0f 90       	pop	r0
    265e:	1f 90       	pop	r1
    2660:	18 95       	reti

00002662 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(){
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	2f 93       	push	r18
    266e:	3f 93       	push	r19
    2670:	4f 93       	push	r20
    2672:	5f 93       	push	r21
    2674:	6f 93       	push	r22
    2676:	7f 93       	push	r23
    2678:	8f 93       	push	r24
    267a:	9f 93       	push	r25
    267c:	af 93       	push	r26
    267e:	bf 93       	push	r27
    2680:	ef 93       	push	r30
    2682:	ff 93       	push	r31
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OC!= Null){
    268c:	80 91 b6 00 	lds	r24, 0x00B6
    2690:	90 91 b7 00 	lds	r25, 0x00B7
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	29 f0       	breq	.+10     	; 0x26a2 <__vector_10+0x40>

		Timer0_OC ();
    2698:	e0 91 b6 00 	lds	r30, 0x00B6
    269c:	f0 91 b7 00 	lds	r31, 0x00B7
    26a0:	09 95       	icall
	}
	}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	0f 90       	pop	r0
    26c4:	1f 90       	pop	r1
    26c6:	18 95       	reti

000026c8 <Timer_1_Init>:
/**************************************************************************
 * Functions
 *
 **************************************************************************/

void Timer_1_Init (Prescaler_Modes scaler, Timer1_Mode Form_Mode,Timer1_OCA_B OCA_MODE,Timer1_OCA_B OCB_MODE){
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	2a 97       	sbiw	r28, 0x0a	; 10
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	6a 83       	std	Y+2, r22	; 0x02
    26e0:	4b 83       	std	Y+3, r20	; 0x03
    26e2:	2c 83       	std	Y+4, r18	; 0x04



	//Set The Wave Generation Mode

	switch (Form_Mode){
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3a 87       	std	Y+10, r19	; 0x0a
    26ec:	29 87       	std	Y+9, r18	; 0x09
    26ee:	89 85       	ldd	r24, Y+9	; 0x09
    26f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f2:	82 30       	cpi	r24, 0x02	; 2
    26f4:	91 05       	cpc	r25, r1
    26f6:	09 f4       	brne	.+2      	; 0x26fa <Timer_1_Init+0x32>
    26f8:	5c c0       	rjmp	.+184    	; 0x27b2 <Timer_1_Init+0xea>
    26fa:	29 85       	ldd	r18, Y+9	; 0x09
    26fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    26fe:	23 30       	cpi	r18, 0x03	; 3
    2700:	31 05       	cpc	r19, r1
    2702:	54 f4       	brge	.+20     	; 0x2718 <Timer_1_Init+0x50>
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	c9 f0       	breq	.+50     	; 0x273e <Timer_1_Init+0x76>
    270c:	29 85       	ldd	r18, Y+9	; 0x09
    270e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2710:	21 30       	cpi	r18, 0x01	; 1
    2712:	31 05       	cpc	r19, r1
    2714:	89 f1       	breq	.+98     	; 0x2778 <Timer_1_Init+0xb0>
    2716:	c0 c0       	rjmp	.+384    	; 0x2898 <Timer_1_Init+0x1d0>
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	84 30       	cpi	r24, 0x04	; 4
    271e:	91 05       	cpc	r25, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <Timer_1_Init+0x5c>
    2722:	81 c0       	rjmp	.+258    	; 0x2826 <Timer_1_Init+0x15e>
    2724:	29 85       	ldd	r18, Y+9	; 0x09
    2726:	3a 85       	ldd	r19, Y+10	; 0x0a
    2728:	24 30       	cpi	r18, 0x04	; 4
    272a:	31 05       	cpc	r19, r1
    272c:	0c f4       	brge	.+2      	; 0x2730 <Timer_1_Init+0x68>
    272e:	5e c0       	rjmp	.+188    	; 0x27ec <Timer_1_Init+0x124>
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	85 30       	cpi	r24, 0x05	; 5
    2736:	91 05       	cpc	r25, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <Timer_1_Init+0x74>
    273a:	92 c0       	rjmp	.+292    	; 0x2860 <Timer_1_Init+0x198>
    273c:	ad c0       	rjmp	.+346    	; 0x2898 <Timer_1_Init+0x1d0>
	case Normal_Mode :
		Clear_Bit(Timer1_TCCR1A, WGM10);
    273e:	af e4       	ldi	r26, 0x4F	; 79
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	ef e4       	ldi	r30, 0x4F	; 79
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8e 7f       	andi	r24, 0xFE	; 254
    274a:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A, WGM11);
    274c:	af e4       	ldi	r26, 0x4F	; 79
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	ef e4       	ldi	r30, 0x4F	; 79
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8d 7f       	andi	r24, 0xFD	; 253
    2758:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM12);
    275a:	ae e4       	ldi	r26, 0x4E	; 78
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ee e4       	ldi	r30, 0x4E	; 78
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	87 7f       	andi	r24, 0xF7	; 247
    2766:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM13);
    2768:	ae e4       	ldi	r26, 0x4E	; 78
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ee e4       	ldi	r30, 0x4E	; 78
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8f 7e       	andi	r24, 0xEF	; 239
    2774:	8c 93       	st	X, r24
    2776:	90 c0       	rjmp	.+288    	; 0x2898 <Timer_1_Init+0x1d0>
		break;

	case PWM_PhaseCorrect :

		Set_Bit(Timer1_TCCR1A,   WGM10);
    2778:	af e4       	ldi	r26, 0x4F	; 79
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ef e4       	ldi	r30, 0x4F	; 79
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	81 60       	ori	r24, 0x01	; 1
    2784:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,   WGM11);
    2786:	af e4       	ldi	r26, 0x4F	; 79
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ef e4       	ldi	r30, 0x4F	; 79
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	82 60       	ori	r24, 0x02	; 2
    2792:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM12);
    2794:	ae e4       	ldi	r26, 0x4E	; 78
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ee e4       	ldi	r30, 0x4E	; 78
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	87 7f       	andi	r24, 0xF7	; 247
    27a0:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM13);
    27a2:	ae e4       	ldi	r26, 0x4E	; 78
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ee e4       	ldi	r30, 0x4E	; 78
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 7e       	andi	r24, 0xEF	; 239
    27ae:	8c 93       	st	X, r24
    27b0:	73 c0       	rjmp	.+230    	; 0x2898 <Timer_1_Init+0x1d0>

		break;

	case CTC_ICR1 :

		Clear_Bit(Timer1_TCCR1A, WGM10);
    27b2:	af e4       	ldi	r26, 0x4F	; 79
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ef e4       	ldi	r30, 0x4F	; 79
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8e 7f       	andi	r24, 0xFE	; 254
    27be:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A, WGM11);
    27c0:	af e4       	ldi	r26, 0x4F	; 79
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	ef e4       	ldi	r30, 0x4F	; 79
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8d 7f       	andi	r24, 0xFD	; 253
    27cc:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM12);
    27ce:	ae e4       	ldi	r26, 0x4E	; 78
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ee e4       	ldi	r30, 0x4E	; 78
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	88 60       	ori	r24, 0x08	; 8
    27da:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM13);
    27dc:	ae e4       	ldi	r26, 0x4E	; 78
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ee e4       	ldi	r30, 0x4E	; 78
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	80 61       	ori	r24, 0x10	; 16
    27e8:	8c 93       	st	X, r24
    27ea:	56 c0       	rjmp	.+172    	; 0x2898 <Timer_1_Init+0x1d0>

		break;

	case PWM_Phase_Frequency_Correct_ICR1:

		Clear_Bit(Timer1_TCCR1A, WGM10);
    27ec:	af e4       	ldi	r26, 0x4F	; 79
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ef e4       	ldi	r30, 0x4F	; 79
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8e 7f       	andi	r24, 0xFE	; 254
    27f8:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A, WGM11);
    27fa:	af e4       	ldi	r26, 0x4F	; 79
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ef e4       	ldi	r30, 0x4F	; 79
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8d 7f       	andi	r24, 0xFD	; 253
    2806:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM12);
    2808:	ae e4       	ldi	r26, 0x4E	; 78
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ee e4       	ldi	r30, 0x4E	; 78
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	87 7f       	andi	r24, 0xF7	; 247
    2814:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM13);
    2816:	ae e4       	ldi	r26, 0x4E	; 78
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ee e4       	ldi	r30, 0x4E	; 78
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 61       	ori	r24, 0x10	; 16
    2822:	8c 93       	st	X, r24
    2824:	39 c0       	rjmp	.+114    	; 0x2898 <Timer_1_Init+0x1d0>

		break;

	case PWM_PhaseCorrect_ICR1:

		Clear_Bit(Timer1_TCCR1A, WGM10);
    2826:	af e4       	ldi	r26, 0x4F	; 79
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ef e4       	ldi	r30, 0x4F	; 79
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8e 7f       	andi	r24, 0xFE	; 254
    2832:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,   WGM11);
    2834:	af e4       	ldi	r26, 0x4F	; 79
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ef e4       	ldi	r30, 0x4F	; 79
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	82 60       	ori	r24, 0x02	; 2
    2840:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1B, WGM12);
    2842:	ae e4       	ldi	r26, 0x4E	; 78
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ee e4       	ldi	r30, 0x4E	; 78
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	87 7f       	andi	r24, 0xF7	; 247
    284e:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM13);
    2850:	ae e4       	ldi	r26, 0x4E	; 78
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ee e4       	ldi	r30, 0x4E	; 78
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 61       	ori	r24, 0x10	; 16
    285c:	8c 93       	st	X, r24
    285e:	1c c0       	rjmp	.+56     	; 0x2898 <Timer_1_Init+0x1d0>

		break ;

	case FastPWM_ICR1A:

		Clear_Bit(Timer1_TCCR1A, WGM10);
    2860:	af e4       	ldi	r26, 0x4F	; 79
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	ef e4       	ldi	r30, 0x4F	; 79
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8e 7f       	andi	r24, 0xFE	; 254
    286c:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,   WGM11);
    286e:	af e4       	ldi	r26, 0x4F	; 79
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ef e4       	ldi	r30, 0x4F	; 79
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	82 60       	ori	r24, 0x02	; 2
    287a:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM12);
    287c:	ae e4       	ldi	r26, 0x4E	; 78
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ee e4       	ldi	r30, 0x4E	; 78
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	88 60       	ori	r24, 0x08	; 8
    2888:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1B,   WGM13);
    288a:	ae e4       	ldi	r26, 0x4E	; 78
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ee e4       	ldi	r30, 0x4E	; 78
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 61       	ori	r24, 0x10	; 16
    2896:	8c 93       	st	X, r24

		break ;
	}
	// Set The Pre-scaler
	// The register of the pre-scaler is TCCR1B
	Timer1_TCCR1B &= Timre1_Prescaler_Mask;
    2898:	ae e4       	ldi	r26, 0x4E	; 78
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ee e4       	ldi	r30, 0x4E	; 78
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	88 7f       	andi	r24, 0xF8	; 248
    28a4:	8c 93       	st	X, r24
	Timer1_TCCR1B |= scaler;
    28a6:	ae e4       	ldi	r26, 0x4E	; 78
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ee e4       	ldi	r30, 0x4E	; 78
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	90 81       	ld	r25, Z
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	89 2b       	or	r24, r25
    28b4:	8c 93       	st	X, r24

	switch (OCA_MODE){
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	38 87       	std	Y+8, r19	; 0x08
    28be:	2f 83       	std	Y+7, r18	; 0x07
    28c0:	8f 81       	ldd	r24, Y+7	; 0x07
    28c2:	98 85       	ldd	r25, Y+8	; 0x08
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	91 05       	cpc	r25, r1
    28c8:	21 f1       	breq	.+72     	; 0x2912 <Timer_1_Init+0x24a>
    28ca:	2f 81       	ldd	r18, Y+7	; 0x07
    28cc:	38 85       	ldd	r19, Y+8	; 0x08
    28ce:	22 30       	cpi	r18, 0x02	; 2
    28d0:	31 05       	cpc	r19, r1
    28d2:	2c f4       	brge	.+10     	; 0x28de <Timer_1_Init+0x216>
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	61 f0       	breq	.+24     	; 0x28f4 <Timer_1_Init+0x22c>
    28dc:	46 c0       	rjmp	.+140    	; 0x296a <Timer_1_Init+0x2a2>
    28de:	2f 81       	ldd	r18, Y+7	; 0x07
    28e0:	38 85       	ldd	r19, Y+8	; 0x08
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	21 f1       	breq	.+72     	; 0x2930 <Timer_1_Init+0x268>
    28e8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ea:	98 85       	ldd	r25, Y+8	; 0x08
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	91 05       	cpc	r25, r1
    28f0:	71 f1       	breq	.+92     	; 0x294e <Timer_1_Init+0x286>
    28f2:	3b c0       	rjmp	.+118    	; 0x296a <Timer_1_Init+0x2a2>

	case OC_DISCONNECTED:

		Clear_Bit(Timer1_TCCR1A,COM1A0);
    28f4:	af e4       	ldi	r26, 0x4F	; 79
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ef e4       	ldi	r30, 0x4F	; 79
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8f 7b       	andi	r24, 0xBF	; 191
    2900:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A,COM1A1);
    2902:	af e4       	ldi	r26, 0x4F	; 79
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ef e4       	ldi	r30, 0x4F	; 79
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8f 77       	andi	r24, 0x7F	; 127
    290e:	8c 93       	st	X, r24
    2910:	2c c0       	rjmp	.+88     	; 0x296a <Timer_1_Init+0x2a2>

		break;

	case Toggle_OC:

		Set_Bit(Timer1_TCCR1A,COM1A0);
    2912:	af e4       	ldi	r26, 0x4F	; 79
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ef e4       	ldi	r30, 0x4F	; 79
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	80 64       	ori	r24, 0x40	; 64
    291e:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A,COM1A1);
    2920:	af e4       	ldi	r26, 0x4F	; 79
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ef e4       	ldi	r30, 0x4F	; 79
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8f 77       	andi	r24, 0x7F	; 127
    292c:	8c 93       	st	X, r24
    292e:	1d c0       	rjmp	.+58     	; 0x296a <Timer_1_Init+0x2a2>

		break;

	case NonInverting_OC:

		Clear_Bit(Timer1_TCCR1A,COM1A0);
    2930:	af e4       	ldi	r26, 0x4F	; 79
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ef e4       	ldi	r30, 0x4F	; 79
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	8f 7b       	andi	r24, 0xBF	; 191
    293c:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,COM1A1);
    293e:	af e4       	ldi	r26, 0x4F	; 79
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	ef e4       	ldi	r30, 0x4F	; 79
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	8c 93       	st	X, r24
    294c:	0e c0       	rjmp	.+28     	; 0x296a <Timer_1_Init+0x2a2>

		break;

	case Inverting_OC :

		Set_Bit(Timer1_TCCR1A,COM1A0);
    294e:	af e4       	ldi	r26, 0x4F	; 79
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ef e4       	ldi	r30, 0x4F	; 79
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	80 64       	ori	r24, 0x40	; 64
    295a:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,COM1A1);
    295c:	af e4       	ldi	r26, 0x4F	; 79
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	ef e4       	ldi	r30, 0x4F	; 79
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	80 68       	ori	r24, 0x80	; 128
    2968:	8c 93       	st	X, r24

		break ;
	}

	switch (OCB_MODE){
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	3e 83       	std	Y+6, r19	; 0x06
    2972:	2d 83       	std	Y+5, r18	; 0x05
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	81 30       	cpi	r24, 0x01	; 1
    297a:	91 05       	cpc	r25, r1
    297c:	21 f1       	breq	.+72     	; 0x29c6 <Timer_1_Init+0x2fe>
    297e:	2d 81       	ldd	r18, Y+5	; 0x05
    2980:	3e 81       	ldd	r19, Y+6	; 0x06
    2982:	22 30       	cpi	r18, 0x02	; 2
    2984:	31 05       	cpc	r19, r1
    2986:	2c f4       	brge	.+10     	; 0x2992 <Timer_1_Init+0x2ca>
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	61 f0       	breq	.+24     	; 0x29a8 <Timer_1_Init+0x2e0>
    2990:	46 c0       	rjmp	.+140    	; 0x2a1e <Timer_1_Init+0x356>
    2992:	2d 81       	ldd	r18, Y+5	; 0x05
    2994:	3e 81       	ldd	r19, Y+6	; 0x06
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	21 f1       	breq	.+72     	; 0x29e4 <Timer_1_Init+0x31c>
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	83 30       	cpi	r24, 0x03	; 3
    29a2:	91 05       	cpc	r25, r1
    29a4:	71 f1       	breq	.+92     	; 0x2a02 <Timer_1_Init+0x33a>
    29a6:	3b c0       	rjmp	.+118    	; 0x2a1e <Timer_1_Init+0x356>

	case OC_DISCONNECTED:

		Clear_Bit(Timer1_TCCR1A,COM1B0);
    29a8:	af e4       	ldi	r26, 0x4F	; 79
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ef e4       	ldi	r30, 0x4F	; 79
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8f 7e       	andi	r24, 0xEF	; 239
    29b4:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A,COM1B1);
    29b6:	af e4       	ldi	r26, 0x4F	; 79
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	ef e4       	ldi	r30, 0x4F	; 79
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 7d       	andi	r24, 0xDF	; 223
    29c2:	8c 93       	st	X, r24
    29c4:	2c c0       	rjmp	.+88     	; 0x2a1e <Timer_1_Init+0x356>

		break;

	case Toggle_OC:

		Set_Bit(Timer1_TCCR1A,COM1B0);
    29c6:	af e4       	ldi	r26, 0x4F	; 79
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	ef e4       	ldi	r30, 0x4F	; 79
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	80 61       	ori	r24, 0x10	; 16
    29d2:	8c 93       	st	X, r24
		Clear_Bit(Timer1_TCCR1A,COM1B1);
    29d4:	af e4       	ldi	r26, 0x4F	; 79
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ef e4       	ldi	r30, 0x4F	; 79
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	8f 7d       	andi	r24, 0xDF	; 223
    29e0:	8c 93       	st	X, r24
    29e2:	1d c0       	rjmp	.+58     	; 0x2a1e <Timer_1_Init+0x356>

		break;

	case NonInverting_OC:

		Clear_Bit(Timer1_TCCR1A,COM1B0);
    29e4:	af e4       	ldi	r26, 0x4F	; 79
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	ef e4       	ldi	r30, 0x4F	; 79
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8f 7e       	andi	r24, 0xEF	; 239
    29f0:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,COM1B1);
    29f2:	af e4       	ldi	r26, 0x4F	; 79
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	ef e4       	ldi	r30, 0x4F	; 79
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	80 62       	ori	r24, 0x20	; 32
    29fe:	8c 93       	st	X, r24
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <Timer_1_Init+0x356>

		break;

	case Inverting_OC :

		Set_Bit(Timer1_TCCR1A,COM1B0);
    2a02:	af e4       	ldi	r26, 0x4F	; 79
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	ef e4       	ldi	r30, 0x4F	; 79
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	80 61       	ori	r24, 0x10	; 16
    2a0e:	8c 93       	st	X, r24
		Set_Bit(Timer1_TCCR1A,COM1B1);
    2a10:	af e4       	ldi	r26, 0x4F	; 79
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ef e4       	ldi	r30, 0x4F	; 79
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	80 62       	ori	r24, 0x20	; 32
    2a1c:	8c 93       	st	X, r24

		break ;
	}

}
    2a1e:	2a 96       	adiw	r28, 0x0a	; 10
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <PWM_Init>:
void PWM_Init (void ){
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62


	Timer_1_Init(CLK_8, FastPWM_ICR1A, NonInverting_OC	, OC_DISCONNECTED);
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	65 e0       	ldi	r22, 0x05	; 5
    2a3c:	42 e0       	ldi	r20, 0x02	; 2
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Timer_1_Init>


}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <ICU_Init>:



void ICU_Init (u8 Copy_Trigger_Edge){
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <ICU_Init+0x6>
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_Trigger_Edge){
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3b 83       	std	Y+3, r19	; 0x03
    2a60:	2a 83       	std	Y+2, r18	; 0x02
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	91 05       	cpc	r25, r1
    2a6a:	69 f0       	breq	.+26     	; 0x2a86 <ICU_Init+0x3c>
    2a6c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a6e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a70:	23 30       	cpi	r18, 0x03	; 3
    2a72:	31 05       	cpc	r19, r1
    2a74:	79 f4       	brne	.+30     	; 0x2a94 <ICU_Init+0x4a>

	case Rising_Edge :

		Set_Bit(Timer1_TCCR1B , ICES1);
    2a76:	ae e4       	ldi	r26, 0x4E	; 78
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	ee e4       	ldi	r30, 0x4E	; 78
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 64       	ori	r24, 0x40	; 64
    2a82:	8c 93       	st	X, r24
    2a84:	07 c0       	rjmp	.+14     	; 0x2a94 <ICU_Init+0x4a>
		break;


	case Falling_Edge:

		Clear_Bit(Timer1_TCCR1B , ICES1);
    2a86:	ae e4       	ldi	r26, 0x4E	; 78
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	ee e4       	ldi	r30, 0x4E	; 78
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	8f 7b       	andi	r24, 0xBF	; 191
    2a92:	8c 93       	st	X, r24

		break;

	}

}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <Timer1_OVF_ENB>:


/*******************************
 * Enables
 ******************************/
void Timer1_OVF_ENB (void){
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK, TOIE1);
    2aa8:	a9 e5       	ldi	r26, 0x59	; 89
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e9 e5       	ldi	r30, 0x59	; 89
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	84 60       	ori	r24, 0x04	; 4
    2ab4:	8c 93       	st	X, r24

}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <Timer1_OVF_DIS>:

void Timer1_OVF_DIS (void){
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK, TOIE1);
    2ac4:	a9 e5       	ldi	r26, 0x59	; 89
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e9 e5       	ldi	r30, 0x59	; 89
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	8b 7f       	andi	r24, 0xFB	; 251
    2ad0:	8c 93       	st	X, r24
}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Timer1_OCA_ENB>:

void Timer1_OCA_ENB (void){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK, OCIE1A);
    2ae0:	a9 e5       	ldi	r26, 0x59	; 89
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e9 e5       	ldi	r30, 0x59	; 89
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 61       	ori	r24, 0x10	; 16
    2aec:	8c 93       	st	X, r24
}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <Timer1_OCA_DIS>:

void Timer1_OCA_DIS (void){
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK, OCIE1B);
    2afc:	a9 e5       	ldi	r26, 0x59	; 89
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e9 e5       	ldi	r30, 0x59	; 89
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	88 60       	ori	r24, 0x08	; 8
    2b08:	8c 93       	st	X, r24
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <Timer1_OCB_ENB>:

void Timer1_OCB_ENB (void ){
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK, OCIE1B);
    2b18:	a9 e5       	ldi	r26, 0x59	; 89
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e9 e5       	ldi	r30, 0x59	; 89
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	88 60       	ori	r24, 0x08	; 8
    2b24:	8c 93       	st	X, r24

}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <Timer1_OCB_DIS>:


void Timer1_OCB_DIS (void ){
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK, OCIE1B);
    2b34:	a9 e5       	ldi	r26, 0x59	; 89
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e9 e5       	ldi	r30, 0x59	; 89
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	87 7f       	andi	r24, 0xF7	; 247
    2b40:	8c 93       	st	X, r24

}
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <Timer1_ICU_ENB>:

void Timer1_ICU_ENB (void){
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , TICIE1);
    2b50:	a9 e5       	ldi	r26, 0x59	; 89
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e9 e5       	ldi	r30, 0x59	; 89
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 62       	ori	r24, 0x20	; 32
    2b5c:	8c 93       	st	X, r24

}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <Timer1_ICU_DIS>:

void Timer1_ICU_DIS (void){
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , TICIE1);
    2b6c:	a9 e5       	ldi	r26, 0x59	; 89
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e9 e5       	ldi	r30, 0x59	; 89
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8f 7d       	andi	r24, 0xDF	; 223
    2b78:	8c 93       	st	X, r24

}
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <Timer1_OVF_Callback>:

/*******************************************
 * Callback Functions
 *******************************************/

void Timer1_OVF_Callback (void (*Local_PTR)(void)){
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <Timer1_OVF_Callback+0x6>
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	9a 83       	std	Y+2, r25	; 0x02
    2b8c:	89 83       	std	Y+1, r24	; 0x01

	Timer1_OVF = Local_PTR ;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	90 93 b9 00 	sts	0x00B9, r25
    2b96:	80 93 b8 00 	sts	0x00B8, r24

}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <TImer1_OCA_Callback>:

void TImer1_OCA_Callback (void (*Local_PTR)(void)){
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <TImer1_OCA_Callback+0x6>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01

	Timer1_OCA = Local_PTR;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	90 93 bb 00 	sts	0x00BB, r25
    2bba:	80 93 ba 00 	sts	0x00BA, r24

}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <Timer1_ICU_Callback>:

void Timer1_ICU_Callback (void (*Local_PTR)(void)){
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <Timer1_ICU_Callback+0x6>
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01

	Timer1_ICU = Local_PTR;
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	90 93 bd 00 	sts	0x00BD, r25
    2bde:	80 93 bc 00 	sts	0x00BC, r24
}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <__vector_6>:
 *
 * ISR
 **************************************************/

void __vector_6(void)__attribute__((signal));
void __vector_6(){
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62

	if (Timer1_ICU!= Null){
    2c16:	80 91 bc 00 	lds	r24, 0x00BC
    2c1a:	90 91 bd 00 	lds	r25, 0x00BD
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	29 f0       	breq	.+10     	; 0x2c2c <__vector_6+0x40>

		Timer1_ICU ();
    2c22:	e0 91 bc 00 	lds	r30, 0x00BC
    2c26:	f0 91 bd 00 	lds	r31, 0x00BD
    2c2a:	09 95       	icall
	}
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0
    2c4e:	1f 90       	pop	r1
    2c50:	18 95       	reti

00002c52 <__vector_7>:

void __vector_7(void)__attribute__((signal));
void __vector_7(){
    2c52:	1f 92       	push	r1
    2c54:	0f 92       	push	r0
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	0f 92       	push	r0
    2c5a:	11 24       	eor	r1, r1
    2c5c:	2f 93       	push	r18
    2c5e:	3f 93       	push	r19
    2c60:	4f 93       	push	r20
    2c62:	5f 93       	push	r21
    2c64:	6f 93       	push	r22
    2c66:	7f 93       	push	r23
    2c68:	8f 93       	push	r24
    2c6a:	9f 93       	push	r25
    2c6c:	af 93       	push	r26
    2c6e:	bf 93       	push	r27
    2c70:	ef 93       	push	r30
    2c72:	ff 93       	push	r31
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62

	if (Timer1_OCA!= Null){
    2c7c:	80 91 ba 00 	lds	r24, 0x00BA
    2c80:	90 91 bb 00 	lds	r25, 0x00BB
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	29 f0       	breq	.+10     	; 0x2c92 <__vector_7+0x40>

		Timer1_OCA ();
    2c88:	e0 91 ba 00 	lds	r30, 0x00BA
    2c8c:	f0 91 bb 00 	lds	r31, 0x00BB
    2c90:	09 95       	icall
	}
}
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	ff 91       	pop	r31
    2c98:	ef 91       	pop	r30
    2c9a:	bf 91       	pop	r27
    2c9c:	af 91       	pop	r26
    2c9e:	9f 91       	pop	r25
    2ca0:	8f 91       	pop	r24
    2ca2:	7f 91       	pop	r23
    2ca4:	6f 91       	pop	r22
    2ca6:	5f 91       	pop	r21
    2ca8:	4f 91       	pop	r20
    2caa:	3f 91       	pop	r19
    2cac:	2f 91       	pop	r18
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_9>:

void __vector_9(void)__attribute__((signal));
void __vector_9(){
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	2f 93       	push	r18
    2cc4:	3f 93       	push	r19
    2cc6:	4f 93       	push	r20
    2cc8:	5f 93       	push	r21
    2cca:	6f 93       	push	r22
    2ccc:	7f 93       	push	r23
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	ef 93       	push	r30
    2cd8:	ff 93       	push	r31
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62

	if (Timer1_OVF!= Null){
    2ce2:	80 91 b8 00 	lds	r24, 0x00B8
    2ce6:	90 91 b9 00 	lds	r25, 0x00B9
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	29 f0       	breq	.+10     	; 0x2cf8 <__vector_9+0x40>

		Timer1_OVF ();
    2cee:	e0 91 b8 00 	lds	r30, 0x00B8
    2cf2:	f0 91 b9 00 	lds	r31, 0x00B9
    2cf6:	09 95       	icall
	}
}
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	ff 91       	pop	r31
    2cfe:	ef 91       	pop	r30
    2d00:	bf 91       	pop	r27
    2d02:	af 91       	pop	r26
    2d04:	9f 91       	pop	r25
    2d06:	8f 91       	pop	r24
    2d08:	7f 91       	pop	r23
    2d0a:	6f 91       	pop	r22
    2d0c:	5f 91       	pop	r21
    2d0e:	4f 91       	pop	r20
    2d10:	3f 91       	pop	r19
    2d12:	2f 91       	pop	r18
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	0f 90       	pop	r0
    2d1a:	1f 90       	pop	r1
    2d1c:	18 95       	reti

00002d1e <PWM_Freq_KHZ>:


/*Service Function*/
void PWM_Freq_KHZ (u16 Freq, u8 DutyCycle){
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <PWM_Freq_KHZ+0x6>
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <PWM_Freq_KHZ+0x8>
    2d26:	0f 92       	push	r0
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	6d 83       	std	Y+5, r22	; 0x05

	u16 TimeInMicro ;
	TimeInMicro = 1000 / Freq ;
    2d32:	88 ee       	ldi	r24, 0xE8	; 232
    2d34:	93 e0       	ldi	r25, 0x03	; 3
    2d36:	2b 81       	ldd	r18, Y+3	; 0x03
    2d38:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodhi4>
    2d40:	cb 01       	movw	r24, r22
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01

	if (TimeInMicro == 0)
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	81 f0       	breq	.+32     	; 0x2d6e <PWM_Freq_KHZ+0x50>
	{

	}

	else if (TimeInMicro >= 1){
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	41 f0       	breq	.+16     	; 0x2d66 <PWM_Freq_KHZ+0x48>

		Timer1_u16_ICR1 = TimeInMicro - 1 ;
    2d56:	e6 e4       	ldi	r30, 0x46	; 70
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <PWM_Freq_KHZ+0x50>
	}
	else {
		Timer1_u16_ICR1 = 0;
    2d66:	e6 e4       	ldi	r30, 0x46	; 70
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	11 82       	std	Z+1, r1	; 0x01
    2d6c:	10 82       	st	Z, r1
	}

	if (DutyCycle <=100){
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	85 36       	cpi	r24, 0x65	; 101
    2d72:	b0 f4       	brcc	.+44     	; 0x2da0 <PWM_Freq_KHZ+0x82>

		Timer1_u16_OCR1A = (((DutyCycle /100) * TimeInMicro) -1);
    2d74:	ea e4       	ldi	r30, 0x4A	; 74
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	94 e6       	ldi	r25, 0x64	; 100
    2d7c:	69 2f       	mov	r22, r25
    2d7e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	24 9f       	mul	r18, r20
    2d8e:	c0 01       	movw	r24, r0
    2d90:	25 9f       	mul	r18, r21
    2d92:	90 0d       	add	r25, r0
    2d94:	34 9f       	mul	r19, r20
    2d96:	90 0d       	add	r25, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
	}
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <Clock>:
/*****************************************************
 * Implementation
 *****************************************************/


void Clock (void){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
 * Put 0 Zero in each counter when its period ended
 **/
	static u16 flag ;
	static u16 KPD_Counter ;

	flag ++ ;
    2db8:	80 91 26 01 	lds	r24, 0x0126
    2dbc:	90 91 27 01 	lds	r25, 0x0127
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	90 93 27 01 	sts	0x0127, r25
    2dc6:	80 93 26 01 	sts	0x0126, r24

	KPD_Counter ++;
    2dca:	80 91 24 01 	lds	r24, 0x0124
    2dce:	90 91 25 01 	lds	r25, 0x0125
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	90 93 25 01 	sts	0x0125, r25
    2dd8:	80 93 24 01 	sts	0x0124, r24

		if (KPD_Counter == 1000){
    2ddc:	80 91 24 01 	lds	r24, 0x0124
    2de0:	90 91 25 01 	lds	r25, 0x0125
    2de4:	23 e0       	ldi	r18, 0x03	; 3
    2de6:	88 3e       	cpi	r24, 0xE8	; 232
    2de8:	92 07       	cpc	r25, r18
    2dea:	31 f4       	brne	.+12     	; 0x2df8 <Clock+0x48>
			Set_Clock();
    2dec:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <Set_Clock>
			KPD_Counter = 0;
    2df0:	10 92 25 01 	sts	0x0125, r1
    2df4:	10 92 24 01 	sts	0x0124, r1
		}
		if (flag == 10000){
    2df8:	80 91 26 01 	lds	r24, 0x0126
    2dfc:	90 91 27 01 	lds	r25, 0x0127
    2e00:	27 e2       	ldi	r18, 0x27	; 39
    2e02:	80 31       	cpi	r24, 0x10	; 16
    2e04:	92 07       	cpc	r25, r18
    2e06:	51 f4       	brne	.+20     	; 0x2e1c <Clock+0x6c>
			Sec ++;
    2e08:	80 91 28 01 	lds	r24, 0x0128
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 28 01 	sts	0x0128, r24
			flag = 0;
    2e12:	10 92 27 01 	sts	0x0127, r1
    2e16:	10 92 26 01 	sts	0x0126, r1
    2e1a:	1e c0       	rjmp	.+60     	; 0x2e58 <Clock+0xa8>
			}
		else if (Sec >= 60){
    2e1c:	80 91 28 01 	lds	r24, 0x0128
    2e20:	8c 33       	cpi	r24, 0x3C	; 60
    2e22:	40 f0       	brcs	.+16     	; 0x2e34 <Clock+0x84>

			min_Clock ++;
    2e24:	80 91 22 01 	lds	r24, 0x0122
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	80 93 22 01 	sts	0x0122, r24
			Sec = 0;
    2e2e:	10 92 28 01 	sts	0x0128, r1
    2e32:	12 c0       	rjmp	.+36     	; 0x2e58 <Clock+0xa8>
			}

		else if (min_Clock >= 60){
    2e34:	80 91 22 01 	lds	r24, 0x0122
    2e38:	8c 33       	cpi	r24, 0x3C	; 60
    2e3a:	40 f0       	brcs	.+16     	; 0x2e4c <Clock+0x9c>

			Hrs ++;
    2e3c:	80 91 23 01 	lds	r24, 0x0123
    2e40:	8f 5f       	subi	r24, 0xFF	; 255
    2e42:	80 93 23 01 	sts	0x0123, r24
			min_Clock = 0;
    2e46:	10 92 22 01 	sts	0x0122, r1
    2e4a:	06 c0       	rjmp	.+12     	; 0x2e58 <Clock+0xa8>
			}

		else if (Hrs >= 24){
    2e4c:	80 91 23 01 	lds	r24, 0x0123
    2e50:	88 31       	cpi	r24, 0x18	; 24
    2e52:	10 f0       	brcs	.+4      	; 0x2e58 <Clock+0xa8>
			Hrs = 0;
    2e54:	10 92 23 01 	sts	0x0123, r1
		}
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <Set_Clock>:

void Set_Clock (void){
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	c4 55       	subi	r28, 0x54	; 84
    2e6c:	d0 40       	sbci	r29, 0x00	; 0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
/****************
 * This Function check the inputs of Key Pad
 * and update the clock set with it to adjust it
 */

		array [0] = KPD_PRESSED();
    2e78:	0e 94 4b 0a 	call	0x1496	; 0x1496 <KPD_PRESSED>
    2e7c:	80 93 be 00 	sts	0x00BE, r24

		if (array [0] != '\0'){
    2e80:	80 91 be 00 	lds	r24, 0x00BE
    2e84:	88 23       	and	r24, r24
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <Set_Clock+0x2c>
    2e88:	ca c3       	rjmp	.+1940   	; 0x361e <Set_Clock+0x7c0>

			if (array [0] == '1'){
    2e8a:	80 91 be 00 	lds	r24, 0x00BE
    2e8e:	81 33       	cpi	r24, 0x31	; 49
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <Set_Clock+0x36>
    2e92:	c2 c3       	rjmp	.+1924   	; 0x3618 <Set_Clock+0x7ba>


				lCD_SetPostion(1, 0);
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	60 e0       	ldi	r22, 0x00	; 0
    2e98:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>

				LCD_WriteNumber(1);
    2e9c:	61 e0       	ldi	r22, 0x01	; 1
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_WriteNumber>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ef 5a       	subi	r30, 0xAF	; 175
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	aa ef       	ldi	r26, 0xFA	; 250
    2eb4:	b3 e4       	ldi	r27, 0x43	; 67
    2eb6:	80 83       	st	Z, r24
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	a2 83       	std	Z+2, r26	; 0x02
    2ebc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	03 5b       	subi	r16, 0xB3	; 179
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ef 5a       	subi	r30, 0xAF	; 175
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 83       	st	Z, r24
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	a2 83       	std	Z+2, r26	; 0x02
    2eea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 5b       	subi	r30, 0xB3	; 179
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	44 f4       	brge	.+16     	; 0x2f1a <Set_Clock+0xbc>
		__ticks = 1;
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e5 5b       	subi	r30, 0xB5	; 181
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    2f18:	64 c0       	rjmp	.+200    	; 0x2fe2 <Set_Clock+0x184>
	else if (__tmp > 65535)
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e3 5b       	subi	r30, 0xB3	; 179
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	3f ef       	ldi	r19, 0xFF	; 255
    2f2c:	4f e7       	ldi	r20, 0x7F	; 127
    2f2e:	57 e4       	ldi	r21, 0x47	; 71
    2f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f34:	18 16       	cp	r1, r24
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <Set_Clock+0xdc>
    2f38:	43 c0       	rjmp	.+134    	; 0x2fc0 <Set_Clock+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ef 5a       	subi	r30, 0xAF	; 175
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8e 01       	movw	r16, r28
    2f5a:	05 5b       	subi	r16, 0xB5	; 181
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	1f c0       	rjmp	.+62     	; 0x2fb0 <Set_Clock+0x152>
    2f72:	fe 01       	movw	r30, r28
    2f74:	e7 5b       	subi	r30, 0xB7	; 183
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	e7 5b       	subi	r30, 0xB7	; 183
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <Set_Clock+0x12c>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e7 5b       	subi	r30, 0xB7	; 183
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	de 01       	movw	r26, r28
    2f9a:	a5 5b       	subi	r26, 0xB5	; 181
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e5 5b       	subi	r30, 0xB5	; 181
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	11 96       	adiw	r26, 0x01	; 1
    2fac:	9c 93       	st	X, r25
    2fae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e5 5b       	subi	r30, 0xB5	; 181
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	d1 f6       	brne	.-76     	; 0x2f72 <Set_Clock+0x114>
    2fbe:	27 c0       	rjmp	.+78     	; 0x300e <Set_Clock+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	05 5b       	subi	r16, 0xB5	; 181
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e3 5b       	subi	r30, 0xB3	; 179
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
    2fe2:	de 01       	movw	r26, r28
    2fe4:	a9 5b       	subi	r26, 0xB9	; 185
    2fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 5b       	subi	r30, 0xB5	; 181
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	8d 93       	st	X+, r24
    2ff4:	9c 93       	st	X, r25
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e9 5b       	subi	r30, 0xB9	; 185
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <Set_Clock+0x1a2>
    3004:	fe 01       	movw	r30, r28
    3006:	e9 5b       	subi	r30, 0xB9	; 185
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24

				_delay_ms(500);

				LCD_Display_Clear();
    300e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_Display_Clear>


				lCD_SetPostion(0, 0);
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	60 e0       	ldi	r22, 0x00	; 0
    3016:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_String("Set Hrs");
    301a:	80 e6       	ldi	r24, 0x60	; 96
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>

				do {
					array [1] = KPD_PRESSED();
    3022:	0e 94 4b 0a 	call	0x1496	; 0x1496 <KPD_PRESSED>
    3026:	80 93 bf 00 	sts	0x00BF, r24

				} while (array [1] == '\0');
    302a:	80 91 bf 00 	lds	r24, 0x00BF
    302e:	88 23       	and	r24, r24
    3030:	c1 f3       	breq	.-16     	; 0x3022 <Set_Clock+0x1c4>


					lCD_SetPostion(1, 0);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
					LCD_Send_String(&array[1]);
    303a:	8f eb       	ldi	r24, 0xBF	; 191
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
    3042:	fe 01       	movw	r30, r28
    3044:	ed 5b       	subi	r30, 0xBD	; 189
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	aa ef       	ldi	r26, 0xFA	; 250
    304e:	b3 e4       	ldi	r27, 0x43	; 67
    3050:	80 83       	st	Z, r24
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	a2 83       	std	Z+2, r26	; 0x02
    3056:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3058:	8e 01       	movw	r16, r28
    305a:	01 5c       	subi	r16, 0xC1	; 193
    305c:	1f 4f       	sbci	r17, 0xFF	; 255
    305e:	fe 01       	movw	r30, r28
    3060:	ed 5b       	subi	r30, 0xBD	; 189
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	4a ef       	ldi	r20, 0xFA	; 250
    3072:	54 e4       	ldi	r21, 0x44	; 68
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	f8 01       	movw	r30, r16
    307e:	80 83       	st	Z, r24
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	a2 83       	std	Z+2, r26	; 0x02
    3084:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3086:	fe 01       	movw	r30, r28
    3088:	ff 96       	adiw	r30, 0x3f	; 63
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e8       	ldi	r20, 0x80	; 128
    3098:	5f e3       	ldi	r21, 0x3F	; 63
    309a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    309e:	88 23       	and	r24, r24
    30a0:	2c f4       	brge	.+10     	; 0x30ac <Set_Clock+0x24e>
		__ticks = 1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9e af       	std	Y+62, r25	; 0x3e
    30a8:	8d af       	std	Y+61, r24	; 0x3d
    30aa:	46 c0       	rjmp	.+140    	; 0x3138 <Set_Clock+0x2da>
	else if (__tmp > 65535)
    30ac:	fe 01       	movw	r30, r28
    30ae:	ff 96       	adiw	r30, 0x3f	; 63
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	64 f5       	brge	.+88     	; 0x3120 <Set_Clock+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	fe 01       	movw	r30, r28
    30ca:	ed 5b       	subi	r30, 0xBD	; 189
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e af       	std	Y+62, r25	; 0x3e
    30f4:	8d af       	std	Y+61, r24	; 0x3d
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <Set_Clock+0x2b8>
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9c af       	std	Y+60, r25	; 0x3c
    30fe:	8b af       	std	Y+59, r24	; 0x3b
    3100:	8b ad       	ldd	r24, Y+59	; 0x3b
    3102:	9c ad       	ldd	r25, Y+60	; 0x3c
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <Set_Clock+0x2a6>
    3108:	9c af       	std	Y+60, r25	; 0x3c
    310a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8d ad       	ldd	r24, Y+61	; 0x3d
    310e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	9e af       	std	Y+62, r25	; 0x3e
    3114:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8d ad       	ldd	r24, Y+61	; 0x3d
    3118:	9e ad       	ldd	r25, Y+62	; 0x3e
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <Set_Clock+0x29a>
    311e:	16 c0       	rjmp	.+44     	; 0x314c <Set_Clock+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	fe 01       	movw	r30, r28
    3122:	ff 96       	adiw	r30, 0x3f	; 63
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	93 81       	ldd	r25, Z+3	; 0x03
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9e af       	std	Y+62, r25	; 0x3e
    3136:	8d af       	std	Y+61, r24	; 0x3d
    3138:	8d ad       	ldd	r24, Y+61	; 0x3d
    313a:	9e ad       	ldd	r25, Y+62	; 0x3e
    313c:	9a af       	std	Y+58, r25	; 0x3a
    313e:	89 af       	std	Y+57, r24	; 0x39
    3140:	89 ad       	ldd	r24, Y+57	; 0x39
    3142:	9a ad       	ldd	r25, Y+58	; 0x3a
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <Set_Clock+0x2e6>
    3148:	9a af       	std	Y+58, r25	; 0x3a
    314a:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(500);

				do {
					array [2] = KPD_PRESSED();
    314c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <KPD_PRESSED>
    3150:	80 93 c0 00 	sts	0x00C0, r24

					} while (array [2] == '\0');
    3154:	80 91 c0 00 	lds	r24, 0x00C0
    3158:	88 23       	and	r24, r24
    315a:	c1 f3       	breq	.-16     	; 0x314c <Set_Clock+0x2ee>



					lCD_SetPostion(1, 1);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
					LCD_Send_String(&array[2]);
    3164:	80 ec       	ldi	r24, 0xC0	; 192
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a8 ec       	ldi	r26, 0xC8	; 200
    3172:	b2 e4       	ldi	r27, 0x42	; 66
    3174:	8d ab       	std	Y+53, r24	; 0x35
    3176:	9e ab       	std	Y+54, r25	; 0x36
    3178:	af ab       	std	Y+55, r26	; 0x37
    317a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6d a9       	ldd	r22, Y+53	; 0x35
    317e:	7e a9       	ldd	r23, Y+54	; 0x36
    3180:	8f a9       	ldd	r24, Y+55	; 0x37
    3182:	98 ad       	ldd	r25, Y+56	; 0x38
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a ef       	ldi	r20, 0xFA	; 250
    318a:	54 e4       	ldi	r21, 0x44	; 68
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	89 ab       	std	Y+49, r24	; 0x31
    3196:	9a ab       	std	Y+50, r25	; 0x32
    3198:	ab ab       	std	Y+51, r26	; 0x33
    319a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    319c:	69 a9       	ldd	r22, Y+49	; 0x31
    319e:	7a a9       	ldd	r23, Y+50	; 0x32
    31a0:	8b a9       	ldd	r24, Y+51	; 0x33
    31a2:	9c a9       	ldd	r25, Y+52	; 0x34
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <Set_Clock+0x360>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	98 ab       	std	Y+48, r25	; 0x30
    31ba:	8f a7       	std	Y+47, r24	; 0x2f
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <Set_Clock+0x3de>
	else if (__tmp > 65535)
    31be:	69 a9       	ldd	r22, Y+49	; 0x31
    31c0:	7a a9       	ldd	r23, Y+50	; 0x32
    31c2:	8b a9       	ldd	r24, Y+51	; 0x33
    31c4:	9c a9       	ldd	r25, Y+52	; 0x34
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <Set_Clock+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6d a9       	ldd	r22, Y+53	; 0x35
    31d8:	7e a9       	ldd	r23, Y+54	; 0x36
    31da:	8f a9       	ldd	r24, Y+55	; 0x37
    31dc:	98 ad       	ldd	r25, Y+56	; 0x38
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	98 ab       	std	Y+48, r25	; 0x30
    31fc:	8f a7       	std	Y+47, r24	; 0x2f
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <Set_Clock+0x3c0>
    3200:	88 ec       	ldi	r24, 0xC8	; 200
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9e a7       	std	Y+46, r25	; 0x2e
    3206:	8d a7       	std	Y+45, r24	; 0x2d
    3208:	8d a5       	ldd	r24, Y+45	; 0x2d
    320a:	9e a5       	ldd	r25, Y+46	; 0x2e
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <Set_Clock+0x3ae>
    3210:	9e a7       	std	Y+46, r25	; 0x2e
    3212:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8f a5       	ldd	r24, Y+47	; 0x2f
    3216:	98 a9       	ldd	r25, Y+48	; 0x30
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	98 ab       	std	Y+48, r25	; 0x30
    321c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3220:	98 a9       	ldd	r25, Y+48	; 0x30
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <Set_Clock+0x3a2>
    3226:	14 c0       	rjmp	.+40     	; 0x3250 <Set_Clock+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	69 a9       	ldd	r22, Y+49	; 0x31
    322a:	7a a9       	ldd	r23, Y+50	; 0x32
    322c:	8b a9       	ldd	r24, Y+51	; 0x33
    322e:	9c a9       	ldd	r25, Y+52	; 0x34
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	98 ab       	std	Y+48, r25	; 0x30
    323a:	8f a7       	std	Y+47, r24	; 0x2f
    323c:	8f a5       	ldd	r24, Y+47	; 0x2f
    323e:	98 a9       	ldd	r25, Y+48	; 0x30
    3240:	9c a7       	std	Y+44, r25	; 0x2c
    3242:	8b a7       	std	Y+43, r24	; 0x2b
    3244:	8b a5       	ldd	r24, Y+43	; 0x2b
    3246:	9c a5       	ldd	r25, Y+44	; 0x2c
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <Set_Clock+0x3ea>
    324c:	9c a7       	std	Y+44, r25	; 0x2c
    324e:	8b a7       	std	Y+43, r24	; 0x2b



				_delay_ms(100);

				LCD_Display_Clear();
    3250:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_Display_Clear>

				lCD_SetPostion(0, 0);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_String("Set Min");
    325c:	88 e6       	ldi	r24, 0x68	; 104
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>

				do {
					array [3] = KPD_PRESSED();
    3264:	0e 94 4b 0a 	call	0x1496	; 0x1496 <KPD_PRESSED>
    3268:	80 93 c1 00 	sts	0x00C1, r24

				} while (array [3] == '\0');
    326c:	80 91 c1 00 	lds	r24, 0x00C1
    3270:	88 23       	and	r24, r24
    3272:	c1 f3       	breq	.-16     	; 0x3264 <Set_Clock+0x406>

				lCD_SetPostion(1, 0);
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_String(&array[3]);
    327c:	81 ec       	ldi	r24, 0xC1	; 193
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	aa ef       	ldi	r26, 0xFA	; 250
    328a:	b3 e4       	ldi	r27, 0x43	; 67
    328c:	8f a3       	std	Y+39, r24	; 0x27
    328e:	98 a7       	std	Y+40, r25	; 0x28
    3290:	a9 a7       	std	Y+41, r26	; 0x29
    3292:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6f a1       	ldd	r22, Y+39	; 0x27
    3296:	78 a5       	ldd	r23, Y+40	; 0x28
    3298:	89 a5       	ldd	r24, Y+41	; 0x29
    329a:	9a a5       	ldd	r25, Y+42	; 0x2a
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	8b a3       	std	Y+35, r24	; 0x23
    32ae:	9c a3       	std	Y+36, r25	; 0x24
    32b0:	ad a3       	std	Y+37, r26	; 0x25
    32b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32b4:	6b a1       	ldd	r22, Y+35	; 0x23
    32b6:	7c a1       	ldd	r23, Y+36	; 0x24
    32b8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ba:	9e a1       	ldd	r25, Y+38	; 0x26
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <Set_Clock+0x478>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9a a3       	std	Y+34, r25	; 0x22
    32d2:	89 a3       	std	Y+33, r24	; 0x21
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <Set_Clock+0x4f6>
	else if (__tmp > 65535)
    32d6:	6b a1       	ldd	r22, Y+35	; 0x23
    32d8:	7c a1       	ldd	r23, Y+36	; 0x24
    32da:	8d a1       	ldd	r24, Y+37	; 0x25
    32dc:	9e a1       	ldd	r25, Y+38	; 0x26
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <Set_Clock+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6f a1       	ldd	r22, Y+39	; 0x27
    32f0:	78 a5       	ldd	r23, Y+40	; 0x28
    32f2:	89 a5       	ldd	r24, Y+41	; 0x29
    32f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9a a3       	std	Y+34, r25	; 0x22
    3314:	89 a3       	std	Y+33, r24	; 0x21
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <Set_Clock+0x4d8>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	98 a3       	std	Y+32, r25	; 0x20
    331e:	8f 8f       	std	Y+31, r24	; 0x1f
    3320:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3322:	98 a1       	ldd	r25, Y+32	; 0x20
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <Set_Clock+0x4c6>
    3328:	98 a3       	std	Y+32, r25	; 0x20
    332a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	89 a1       	ldd	r24, Y+33	; 0x21
    332e:	9a a1       	ldd	r25, Y+34	; 0x22
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9a a3       	std	Y+34, r25	; 0x22
    3334:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	89 a1       	ldd	r24, Y+33	; 0x21
    3338:	9a a1       	ldd	r25, Y+34	; 0x22
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <Set_Clock+0x4ba>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <Set_Clock+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	6b a1       	ldd	r22, Y+35	; 0x23
    3342:	7c a1       	ldd	r23, Y+36	; 0x24
    3344:	8d a1       	ldd	r24, Y+37	; 0x25
    3346:	9e a1       	ldd	r25, Y+38	; 0x26
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9a a3       	std	Y+34, r25	; 0x22
    3352:	89 a3       	std	Y+33, r24	; 0x21
    3354:	89 a1       	ldd	r24, Y+33	; 0x21
    3356:	9a a1       	ldd	r25, Y+34	; 0x22
    3358:	9e 8f       	std	Y+30, r25	; 0x1e
    335a:	8d 8f       	std	Y+29, r24	; 0x1d
    335c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    335e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <Set_Clock+0x502>
    3364:	9e 8f       	std	Y+30, r25	; 0x1e
    3366:	8d 8f       	std	Y+29, r24	; 0x1d


				_delay_ms(500);

				do {
					array [4] = KPD_PRESSED();
    3368:	0e 94 4b 0a 	call	0x1496	; 0x1496 <KPD_PRESSED>
    336c:	80 93 c2 00 	sts	0x00C2, r24

				} while (array [4] == '\0');
    3370:	80 91 c2 00 	lds	r24, 0x00C2
    3374:	88 23       	and	r24, r24
    3376:	c1 f3       	breq	.-16     	; 0x3368 <Set_Clock+0x50a>



					lCD_SetPostion(1, 1);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
					LCD_Send_String(&array[4]);
    3380:	82 ec       	ldi	r24, 0xC2	; 194
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	aa ef       	ldi	r26, 0xFA	; 250
    338e:	b3 e4       	ldi	r27, 0x43	; 67
    3390:	89 8f       	std	Y+25, r24	; 0x19
    3392:	9a 8f       	std	Y+26, r25	; 0x1a
    3394:	ab 8f       	std	Y+27, r26	; 0x1b
    3396:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3398:	69 8d       	ldd	r22, Y+25	; 0x19
    339a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a ef       	ldi	r20, 0xFA	; 250
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8d 8b       	std	Y+21, r24	; 0x15
    33b2:	9e 8b       	std	Y+22, r25	; 0x16
    33b4:	af 8b       	std	Y+23, r26	; 0x17
    33b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33b8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ba:	7e 89       	ldd	r23, Y+22	; 0x16
    33bc:	8f 89       	ldd	r24, Y+23	; 0x17
    33be:	98 8d       	ldd	r25, Y+24	; 0x18
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e8       	ldi	r20, 0x80	; 128
    33c6:	5f e3       	ldi	r21, 0x3F	; 63
    33c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	2c f4       	brge	.+10     	; 0x33da <Set_Clock+0x57c>
		__ticks = 1;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9c 8b       	std	Y+20, r25	; 0x14
    33d6:	8b 8b       	std	Y+19, r24	; 0x13
    33d8:	3f c0       	rjmp	.+126    	; 0x3458 <Set_Clock+0x5fa>
	else if (__tmp > 65535)
    33da:	6d 89       	ldd	r22, Y+21	; 0x15
    33dc:	7e 89       	ldd	r23, Y+22	; 0x16
    33de:	8f 89       	ldd	r24, Y+23	; 0x17
    33e0:	98 8d       	ldd	r25, Y+24	; 0x18
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	3f ef       	ldi	r19, 0xFF	; 255
    33e6:	4f e7       	ldi	r20, 0x7F	; 127
    33e8:	57 e4       	ldi	r21, 0x47	; 71
    33ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ee:	18 16       	cp	r1, r24
    33f0:	4c f5       	brge	.+82     	; 0x3444 <Set_Clock+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f2:	69 8d       	ldd	r22, Y+25	; 0x19
    33f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e2       	ldi	r20, 0x20	; 32
    3400:	51 e4       	ldi	r21, 0x41	; 65
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9c 8b       	std	Y+20, r25	; 0x14
    3418:	8b 8b       	std	Y+19, r24	; 0x13
    341a:	0f c0       	rjmp	.+30     	; 0x343a <Set_Clock+0x5dc>
    341c:	88 ec       	ldi	r24, 0xC8	; 200
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9a 8b       	std	Y+18, r25	; 0x12
    3422:	89 8b       	std	Y+17, r24	; 0x11
    3424:	89 89       	ldd	r24, Y+17	; 0x11
    3426:	9a 89       	ldd	r25, Y+18	; 0x12
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <Set_Clock+0x5ca>
    342c:	9a 8b       	std	Y+18, r25	; 0x12
    342e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3430:	8b 89       	ldd	r24, Y+19	; 0x13
    3432:	9c 89       	ldd	r25, Y+20	; 0x14
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	9c 8b       	std	Y+20, r25	; 0x14
    3438:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343a:	8b 89       	ldd	r24, Y+19	; 0x13
    343c:	9c 89       	ldd	r25, Y+20	; 0x14
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	69 f7       	brne	.-38     	; 0x341c <Set_Clock+0x5be>
    3442:	14 c0       	rjmp	.+40     	; 0x346c <Set_Clock+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3444:	6d 89       	ldd	r22, Y+21	; 0x15
    3446:	7e 89       	ldd	r23, Y+22	; 0x16
    3448:	8f 89       	ldd	r24, Y+23	; 0x17
    344a:	98 8d       	ldd	r25, Y+24	; 0x18
    344c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	9c 8b       	std	Y+20, r25	; 0x14
    3456:	8b 8b       	std	Y+19, r24	; 0x13
    3458:	8b 89       	ldd	r24, Y+19	; 0x13
    345a:	9c 89       	ldd	r25, Y+20	; 0x14
    345c:	98 8b       	std	Y+16, r25	; 0x10
    345e:	8f 87       	std	Y+15, r24	; 0x0f
    3460:	8f 85       	ldd	r24, Y+15	; 0x0f
    3462:	98 89       	ldd	r25, Y+16	; 0x10
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <Set_Clock+0x606>
    3468:	98 8b       	std	Y+16, r25	; 0x10
    346a:	8f 87       	std	Y+15, r24	; 0x0f


				_delay_ms(500);

				LCD_Display_Clear();
    346c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_Display_Clear>
				lCD_SetPostion(0, 0);
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_String("The Clock");
    3478:	80 e7       	ldi	r24, 0x70	; 112
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
				Hrs = ((array[1] -48)* 10)+ (array[2] - 48);
    3480:	80 91 bf 00 	lds	r24, 0x00BF
    3484:	88 2f       	mov	r24, r24
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9c 01       	movw	r18, r24
    348a:	22 0f       	add	r18, r18
    348c:	33 1f       	adc	r19, r19
    348e:	c9 01       	movw	r24, r18
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	82 0f       	add	r24, r18
    349a:	93 1f       	adc	r25, r19
    349c:	98 2f       	mov	r25, r24
    349e:	80 91 c0 00 	lds	r24, 0x00C0
    34a2:	89 0f       	add	r24, r25
    34a4:	80 51       	subi	r24, 0x10	; 16
    34a6:	80 93 23 01 	sts	0x0123, r24
				lCD_SetPostion(1, 0);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_WriteNumber(Hrs);
    34b2:	80 91 23 01 	lds	r24, 0x0123
    34b6:	88 2f       	mov	r24, r24
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_WriteNumber>

				lCD_SetPostion(1, 2);
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	62 e0       	ldi	r22, 0x02	; 2
    34ca:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_Data(':');
    34ce:	8a e3       	ldi	r24, 0x3A	; 58
    34d0:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_Send_Data>

				min_Clock = ((array[3] -48)* 10)+ (array[4] - 48);
    34d4:	80 91 c1 00 	lds	r24, 0x00C1
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	9c 01       	movw	r18, r24
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	c9 01       	movw	r24, r18
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	82 0f       	add	r24, r18
    34ee:	93 1f       	adc	r25, r19
    34f0:	98 2f       	mov	r25, r24
    34f2:	80 91 c2 00 	lds	r24, 0x00C2
    34f6:	89 0f       	add	r24, r25
    34f8:	80 51       	subi	r24, 0x10	; 16
    34fa:	80 93 22 01 	sts	0x0122, r24
				lCD_SetPostion(1, 3);
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	63 e0       	ldi	r22, 0x03	; 3
    3502:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_WriteNumber(min_Clock);
    3506:	80 91 22 01 	lds	r24, 0x0122
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	a0 e0       	ldi	r26, 0x00	; 0
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_WriteNumber>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	a8 ec       	ldi	r26, 0xC8	; 200
    3520:	b2 e4       	ldi	r27, 0x42	; 66
    3522:	8b 87       	std	Y+11, r24	; 0x0b
    3524:	9c 87       	std	Y+12, r25	; 0x0c
    3526:	ad 87       	std	Y+13, r26	; 0x0d
    3528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	6b 85       	ldd	r22, Y+11	; 0x0b
    352c:	7c 85       	ldd	r23, Y+12	; 0x0c
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	4a ef       	ldi	r20, 0xFA	; 250
    3538:	54 e4       	ldi	r21, 0x44	; 68
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8f 83       	std	Y+7, r24	; 0x07
    3544:	98 87       	std	Y+8, r25	; 0x08
    3546:	a9 87       	std	Y+9, r26	; 0x09
    3548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	2c f4       	brge	.+10     	; 0x356c <Set_Clock+0x70e>
		__ticks = 1;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	3f c0       	rjmp	.+126    	; 0x35ea <Set_Clock+0x78c>
	else if (__tmp > 65535)
    356c:	6f 81       	ldd	r22, Y+7	; 0x07
    356e:	78 85       	ldd	r23, Y+8	; 0x08
    3570:	89 85       	ldd	r24, Y+9	; 0x09
    3572:	9a 85       	ldd	r25, Y+10	; 0x0a
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	4c f5       	brge	.+82     	; 0x35d6 <Set_Clock+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <Set_Clock+0x76e>
    35ae:	88 ec       	ldi	r24, 0xC8	; 200
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <Set_Clock+0x75c>
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9e 83       	std	Y+6, r25	; 0x06
    35ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	69 f7       	brne	.-38     	; 0x35ae <Set_Clock+0x750>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <Set_Clock+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <Set_Clock+0x798>
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);


				Sec = 0 ;
    35fe:	10 92 28 01 	sts	0x0128, r1
				LCD_Display_Clear();
    3602:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_Display_Clear>
				lCD_SetPostion(0, 0);
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
				LCD_Send_String("Click one to Set Clock");
    360e:	8a e7       	ldi	r24, 0x7A	; 122
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <Set_Clock+0x7c4>
				}

				else {
					Real_Time_CLK();
    3618:	0e 94 1d 1b 	call	0x363a	; 0x363a <Real_Time_CLK>
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <Set_Clock+0x7c4>
				}

			}
			else {
				Real_Time_CLK();
    361e:	0e 94 1d 1b 	call	0x363a	; 0x363a <Real_Time_CLK>

			}


}
    3622:	cc 5a       	subi	r28, 0xAC	; 172
    3624:	df 4f       	sbci	r29, 0xFF	; 255
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	08 95       	ret

0000363a <Real_Time_CLK>:




void Real_Time_CLK (void){
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	c4 55       	subi	r28, 0x54	; 84
    3648:	d0 40       	sbci	r29, 0x00	; 0
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61

	/******************************
	 * This is the mormal Clock Mode
	 */

	Clear_Bit(DIO_U8_PORTA,0);
    3654:	ab e3       	ldi	r26, 0x3B	; 59
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	eb e3       	ldi	r30, 0x3B	; 59
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	8e 7f       	andi	r24, 0xFE	; 254
    3660:	8c 93       	st	X, r24
    Set_Bit(DIO_U8_PORTA , 1);
    3662:	ab e3       	ldi	r26, 0x3B	; 59
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	eb e3       	ldi	r30, 0x3B	; 59
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	82 60       	ori	r24, 0x02	; 2
    366e:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 2);
    3670:	ab e3       	ldi	r26, 0x3B	; 59
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	eb e3       	ldi	r30, 0x3B	; 59
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	84 60       	ori	r24, 0x04	; 4
    367c:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 3);
    367e:	ab e3       	ldi	r26, 0x3B	; 59
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	eb e3       	ldi	r30, 0x3B	; 59
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	88 60       	ori	r24, 0x08	; 8
    368a:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 4);
    368c:	ab e3       	ldi	r26, 0x3B	; 59
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	eb e3       	ldi	r30, 0x3B	; 59
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	80 61       	ori	r24, 0x10	; 16
    3698:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 5);
    369a:	ab e3       	ldi	r26, 0x3B	; 59
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	eb e3       	ldi	r30, 0x3B	; 59
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	80 62       	ori	r24, 0x20	; 32
    36a6:	8c 93       	st	X, r24
	SevenSegment_Write(Sec%10);
    36a8:	80 91 28 01 	lds	r24, 0x0128
    36ac:	9a e0       	ldi	r25, 0x0A	; 10
    36ae:	69 2f       	mov	r22, r25
    36b0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    36b4:	89 2f       	mov	r24, r25
    36b6:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5a       	subi	r30, 0xAF	; 175
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a0 ea       	ldi	r26, 0xA0	; 160
    36c6:	b0 e4       	ldi	r27, 0x40	; 64
    36c8:	80 83       	st	Z, r24
    36ca:	91 83       	std	Z+1, r25	; 0x01
    36cc:	a2 83       	std	Z+2, r26	; 0x02
    36ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	8e 01       	movw	r16, r28
    36d2:	03 5b       	subi	r16, 0xB3	; 179
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	fe 01       	movw	r30, r28
    36d8:	ef 5a       	subi	r30, 0xAF	; 175
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	60 81       	ld	r22, Z
    36de:	71 81       	ldd	r23, Z+1	; 0x01
    36e0:	82 81       	ldd	r24, Z+2	; 0x02
    36e2:	93 81       	ldd	r25, Z+3	; 0x03
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a ef       	ldi	r20, 0xFA	; 250
    36ea:	54 e4       	ldi	r21, 0x44	; 68
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	f8 01       	movw	r30, r16
    36f6:	80 83       	st	Z, r24
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36fe:	fe 01       	movw	r30, r28
    3700:	e3 5b       	subi	r30, 0xB3	; 179
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e8       	ldi	r20, 0x80	; 128
    3712:	5f e3       	ldi	r21, 0x3F	; 63
    3714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3718:	88 23       	and	r24, r24
    371a:	44 f4       	brge	.+16     	; 0x372c <Real_Time_CLK+0xf2>
		__ticks = 1;
    371c:	fe 01       	movw	r30, r28
    371e:	e5 5b       	subi	r30, 0xB5	; 181
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
    372a:	64 c0       	rjmp	.+200    	; 0x37f4 <Real_Time_CLK+0x1ba>
	else if (__tmp > 65535)
    372c:	fe 01       	movw	r30, r28
    372e:	e3 5b       	subi	r30, 0xB3	; 179
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	0c f0       	brlt	.+2      	; 0x374c <Real_Time_CLK+0x112>
    374a:	43 c0       	rjmp	.+134    	; 0x37d2 <Real_Time_CLK+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374c:	fe 01       	movw	r30, r28
    374e:	ef 5a       	subi	r30, 0xAF	; 175
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	60 81       	ld	r22, Z
    3754:	71 81       	ldd	r23, Z+1	; 0x01
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	93 81       	ldd	r25, Z+3	; 0x03
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8e 01       	movw	r16, r28
    376c:	05 5b       	subi	r16, 0xB5	; 181
    376e:	1f 4f       	sbci	r17, 0xFF	; 255
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	f8 01       	movw	r30, r16
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	80 83       	st	Z, r24
    3782:	1f c0       	rjmp	.+62     	; 0x37c2 <Real_Time_CLK+0x188>
    3784:	fe 01       	movw	r30, r28
    3786:	e7 5b       	subi	r30, 0xB7	; 183
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	88 ec       	ldi	r24, 0xC8	; 200
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	fe 01       	movw	r30, r28
    3794:	e7 5b       	subi	r30, 0xB7	; 183
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <Real_Time_CLK+0x162>
    37a0:	fe 01       	movw	r30, r28
    37a2:	e7 5b       	subi	r30, 0xB7	; 183
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	de 01       	movw	r26, r28
    37ac:	a5 5b       	subi	r26, 0xB5	; 181
    37ae:	bf 4f       	sbci	r27, 0xFF	; 255
    37b0:	fe 01       	movw	r30, r28
    37b2:	e5 5b       	subi	r30, 0xB5	; 181
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	11 96       	adiw	r26, 0x01	; 1
    37be:	9c 93       	st	X, r25
    37c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c2:	fe 01       	movw	r30, r28
    37c4:	e5 5b       	subi	r30, 0xB5	; 181
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	d1 f6       	brne	.-76     	; 0x3784 <Real_Time_CLK+0x14a>
    37d0:	27 c0       	rjmp	.+78     	; 0x3820 <Real_Time_CLK+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	8e 01       	movw	r16, r28
    37d4:	05 5b       	subi	r16, 0xB5	; 181
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	fe 01       	movw	r30, r28
    37da:	e3 5b       	subi	r30, 0xB3	; 179
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	f8 01       	movw	r30, r16
    37f0:	91 83       	std	Z+1, r25	; 0x01
    37f2:	80 83       	st	Z, r24
    37f4:	de 01       	movw	r26, r28
    37f6:	a9 5b       	subi	r26, 0xB9	; 185
    37f8:	bf 4f       	sbci	r27, 0xFF	; 255
    37fa:	fe 01       	movw	r30, r28
    37fc:	e5 5b       	subi	r30, 0xB5	; 181
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	8d 93       	st	X+, r24
    3806:	9c 93       	st	X, r25
    3808:	fe 01       	movw	r30, r28
    380a:	e9 5b       	subi	r30, 0xB9	; 185
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <Real_Time_CLK+0x1d8>
    3816:	fe 01       	movw	r30, r28
    3818:	e9 5b       	subi	r30, 0xB9	; 185
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
	_delay_ms(5);

	Set_Bit(DIO_U8_PORTA,0);
    3820:	ab e3       	ldi	r26, 0x3B	; 59
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	eb e3       	ldi	r30, 0x3B	; 59
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	81 60       	ori	r24, 0x01	; 1
    382c:	8c 93       	st	X, r24
	Clear_Bit(DIO_U8_PORTA,1);
    382e:	ab e3       	ldi	r26, 0x3B	; 59
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	eb e3       	ldi	r30, 0x3B	; 59
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	8d 7f       	andi	r24, 0xFD	; 253
    383a:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 2);
    383c:	ab e3       	ldi	r26, 0x3B	; 59
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	eb e3       	ldi	r30, 0x3B	; 59
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	84 60       	ori	r24, 0x04	; 4
    3848:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 3);
    384a:	ab e3       	ldi	r26, 0x3B	; 59
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	eb e3       	ldi	r30, 0x3B	; 59
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	88 60       	ori	r24, 0x08	; 8
    3856:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 4);
    3858:	ab e3       	ldi	r26, 0x3B	; 59
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	eb e3       	ldi	r30, 0x3B	; 59
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	80 61       	ori	r24, 0x10	; 16
    3864:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 5);
    3866:	ab e3       	ldi	r26, 0x3B	; 59
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	eb e3       	ldi	r30, 0x3B	; 59
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	80 62       	ori	r24, 0x20	; 32
    3872:	8c 93       	st	X, r24
	SevenSegment_Write(Sec / 10);
    3874:	80 91 28 01 	lds	r24, 0x0128
    3878:	9a e0       	ldi	r25, 0x0A	; 10
    387a:	69 2f       	mov	r22, r25
    387c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    3880:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    3884:	fe 01       	movw	r30, r28
    3886:	ed 5b       	subi	r30, 0xBD	; 189
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 ea       	ldi	r26, 0xA0	; 160
    3890:	b0 e4       	ldi	r27, 0x40	; 64
    3892:	80 83       	st	Z, r24
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	a2 83       	std	Z+2, r26	; 0x02
    3898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	8e 01       	movw	r16, r28
    389c:	01 5c       	subi	r16, 0xC1	; 193
    389e:	1f 4f       	sbci	r17, 0xFF	; 255
    38a0:	fe 01       	movw	r30, r28
    38a2:	ed 5b       	subi	r30, 0xBD	; 189
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4a ef       	ldi	r20, 0xFA	; 250
    38b4:	54 e4       	ldi	r21, 0x44	; 68
    38b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	f8 01       	movw	r30, r16
    38c0:	80 83       	st	Z, r24
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	a2 83       	std	Z+2, r26	; 0x02
    38c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c8:	fe 01       	movw	r30, r28
    38ca:	ff 96       	adiw	r30, 0x3f	; 63
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <Real_Time_CLK+0x2b4>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9e af       	std	Y+62, r25	; 0x3e
    38ea:	8d af       	std	Y+61, r24	; 0x3d
    38ec:	46 c0       	rjmp	.+140    	; 0x397a <Real_Time_CLK+0x340>
	else if (__tmp > 65535)
    38ee:	fe 01       	movw	r30, r28
    38f0:	ff 96       	adiw	r30, 0x3f	; 63
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	3f ef       	ldi	r19, 0xFF	; 255
    38fe:	4f e7       	ldi	r20, 0x7F	; 127
    3900:	57 e4       	ldi	r21, 0x47	; 71
    3902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3906:	18 16       	cp	r1, r24
    3908:	64 f5       	brge	.+88     	; 0x3962 <Real_Time_CLK+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390a:	fe 01       	movw	r30, r28
    390c:	ed 5b       	subi	r30, 0xBD	; 189
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	60 81       	ld	r22, Z
    3912:	71 81       	ldd	r23, Z+1	; 0x01
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	93 81       	ldd	r25, Z+3	; 0x03
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e2       	ldi	r20, 0x20	; 32
    391e:	51 e4       	ldi	r21, 0x41	; 65
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9e af       	std	Y+62, r25	; 0x3e
    3936:	8d af       	std	Y+61, r24	; 0x3d
    3938:	0f c0       	rjmp	.+30     	; 0x3958 <Real_Time_CLK+0x31e>
    393a:	88 ec       	ldi	r24, 0xC8	; 200
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9c af       	std	Y+60, r25	; 0x3c
    3940:	8b af       	std	Y+59, r24	; 0x3b
    3942:	8b ad       	ldd	r24, Y+59	; 0x3b
    3944:	9c ad       	ldd	r25, Y+60	; 0x3c
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <Real_Time_CLK+0x30c>
    394a:	9c af       	std	Y+60, r25	; 0x3c
    394c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3950:	9e ad       	ldd	r25, Y+62	; 0x3e
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	9e af       	std	Y+62, r25	; 0x3e
    3956:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3958:	8d ad       	ldd	r24, Y+61	; 0x3d
    395a:	9e ad       	ldd	r25, Y+62	; 0x3e
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	69 f7       	brne	.-38     	; 0x393a <Real_Time_CLK+0x300>
    3960:	16 c0       	rjmp	.+44     	; 0x398e <Real_Time_CLK+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3962:	fe 01       	movw	r30, r28
    3964:	ff 96       	adiw	r30, 0x3f	; 63
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9e af       	std	Y+62, r25	; 0x3e
    3978:	8d af       	std	Y+61, r24	; 0x3d
    397a:	8d ad       	ldd	r24, Y+61	; 0x3d
    397c:	9e ad       	ldd	r25, Y+62	; 0x3e
    397e:	9a af       	std	Y+58, r25	; 0x3a
    3980:	89 af       	std	Y+57, r24	; 0x39
    3982:	89 ad       	ldd	r24, Y+57	; 0x39
    3984:	9a ad       	ldd	r25, Y+58	; 0x3a
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <Real_Time_CLK+0x34c>
    398a:	9a af       	std	Y+58, r25	; 0x3a
    398c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);

	Set_Bit(DIO_U8_PORTA,0);
    398e:	ab e3       	ldi	r26, 0x3B	; 59
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	eb e3       	ldi	r30, 0x3B	; 59
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	81 60       	ori	r24, 0x01	; 1
    399a:	8c 93       	st	X, r24
    Set_Bit(DIO_U8_PORTA , 1);
    399c:	ab e3       	ldi	r26, 0x3B	; 59
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	eb e3       	ldi	r30, 0x3B	; 59
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	82 60       	ori	r24, 0x02	; 2
    39a8:	8c 93       	st	X, r24
	Clear_Bit(DIO_U8_PORTA ,2);
    39aa:	ab e3       	ldi	r26, 0x3B	; 59
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	eb e3       	ldi	r30, 0x3B	; 59
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	8b 7f       	andi	r24, 0xFB	; 251
    39b6:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 3);
    39b8:	ab e3       	ldi	r26, 0x3B	; 59
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	eb e3       	ldi	r30, 0x3B	; 59
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	88 60       	ori	r24, 0x08	; 8
    39c4:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 4);
    39c6:	ab e3       	ldi	r26, 0x3B	; 59
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	eb e3       	ldi	r30, 0x3B	; 59
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	80 61       	ori	r24, 0x10	; 16
    39d2:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 5);
    39d4:	ab e3       	ldi	r26, 0x3B	; 59
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	eb e3       	ldi	r30, 0x3B	; 59
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	80 62       	ori	r24, 0x20	; 32
    39e0:	8c 93       	st	X, r24
	SevenSegment_Write(min_Clock%10);
    39e2:	80 91 22 01 	lds	r24, 0x0122
    39e6:	9a e0       	ldi	r25, 0x0A	; 10
    39e8:	69 2f       	mov	r22, r25
    39ea:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    39ee:	89 2f       	mov	r24, r25
    39f0:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 ea       	ldi	r26, 0xA0	; 160
    39fa:	b0 e4       	ldi	r27, 0x40	; 64
    39fc:	8d ab       	std	Y+53, r24	; 0x35
    39fe:	9e ab       	std	Y+54, r25	; 0x36
    3a00:	af ab       	std	Y+55, r26	; 0x37
    3a02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6d a9       	ldd	r22, Y+53	; 0x35
    3a06:	7e a9       	ldd	r23, Y+54	; 0x36
    3a08:	8f a9       	ldd	r24, Y+55	; 0x37
    3a0a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a ef       	ldi	r20, 0xFA	; 250
    3a12:	54 e4       	ldi	r21, 0x44	; 68
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	89 ab       	std	Y+49, r24	; 0x31
    3a1e:	9a ab       	std	Y+50, r25	; 0x32
    3a20:	ab ab       	std	Y+51, r26	; 0x33
    3a22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a24:	69 a9       	ldd	r22, Y+49	; 0x31
    3a26:	7a a9       	ldd	r23, Y+50	; 0x32
    3a28:	8b a9       	ldd	r24, Y+51	; 0x33
    3a2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <Real_Time_CLK+0x40c>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	98 ab       	std	Y+48, r25	; 0x30
    3a42:	8f a7       	std	Y+47, r24	; 0x2f
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <Real_Time_CLK+0x48a>
	else if (__tmp > 65535)
    3a46:	69 a9       	ldd	r22, Y+49	; 0x31
    3a48:	7a a9       	ldd	r23, Y+50	; 0x32
    3a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <Real_Time_CLK+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a60:	7e a9       	ldd	r23, Y+54	; 0x36
    3a62:	8f a9       	ldd	r24, Y+55	; 0x37
    3a64:	98 ad       	ldd	r25, Y+56	; 0x38
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	98 ab       	std	Y+48, r25	; 0x30
    3a84:	8f a7       	std	Y+47, r24	; 0x2f
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <Real_Time_CLK+0x46c>
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9e a7       	std	Y+46, r25	; 0x2e
    3a8e:	8d a7       	std	Y+45, r24	; 0x2d
    3a90:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a92:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <Real_Time_CLK+0x45a>
    3a98:	9e a7       	std	Y+46, r25	; 0x2e
    3a9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	98 ab       	std	Y+48, r25	; 0x30
    3aa4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <Real_Time_CLK+0x44e>
    3aae:	14 c0       	rjmp	.+40     	; 0x3ad8 <Real_Time_CLK+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	98 ab       	std	Y+48, r25	; 0x30
    3ac2:	8f a7       	std	Y+47, r24	; 0x2f
    3ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ac8:	9c a7       	std	Y+44, r25	; 0x2c
    3aca:	8b a7       	std	Y+43, r24	; 0x2b
    3acc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ace:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <Real_Time_CLK+0x496>
    3ad4:	9c a7       	std	Y+44, r25	; 0x2c
    3ad6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	Set_Bit(DIO_U8_PORTA,0);
    3ad8:	ab e3       	ldi	r26, 0x3B	; 59
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	eb e3       	ldi	r30, 0x3B	; 59
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	81 60       	ori	r24, 0x01	; 1
    3ae4:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA,1);
    3ae6:	ab e3       	ldi	r26, 0x3B	; 59
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	eb e3       	ldi	r30, 0x3B	; 59
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	82 60       	ori	r24, 0x02	; 2
    3af2:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 2);
    3af4:	ab e3       	ldi	r26, 0x3B	; 59
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	eb e3       	ldi	r30, 0x3B	; 59
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	84 60       	ori	r24, 0x04	; 4
    3b00:	8c 93       	st	X, r24
	Clear_Bit(DIO_U8_PORTA , 3);
    3b02:	ab e3       	ldi	r26, 0x3B	; 59
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	eb e3       	ldi	r30, 0x3B	; 59
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	87 7f       	andi	r24, 0xF7	; 247
    3b0e:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 4);
    3b10:	ab e3       	ldi	r26, 0x3B	; 59
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	eb e3       	ldi	r30, 0x3B	; 59
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	80 61       	ori	r24, 0x10	; 16
    3b1c:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 5);
    3b1e:	ab e3       	ldi	r26, 0x3B	; 59
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	eb e3       	ldi	r30, 0x3B	; 59
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	80 62       	ori	r24, 0x20	; 32
    3b2a:	8c 93       	st	X, r24
	SevenSegment_Write(min_Clock / 10);
    3b2c:	80 91 22 01 	lds	r24, 0x0122
    3b30:	9a e0       	ldi	r25, 0x0A	; 10
    3b32:	69 2f       	mov	r22, r25
    3b34:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    3b38:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	a0 ea       	ldi	r26, 0xA0	; 160
    3b42:	b0 e4       	ldi	r27, 0x40	; 64
    3b44:	8f a3       	std	Y+39, r24	; 0x27
    3b46:	98 a7       	std	Y+40, r25	; 0x28
    3b48:	a9 a7       	std	Y+41, r26	; 0x29
    3b4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4c:	6f a1       	ldd	r22, Y+39	; 0x27
    3b4e:	78 a5       	ldd	r23, Y+40	; 0x28
    3b50:	89 a5       	ldd	r24, Y+41	; 0x29
    3b52:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	4a ef       	ldi	r20, 0xFA	; 250
    3b5a:	54 e4       	ldi	r21, 0x44	; 68
    3b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	8b a3       	std	Y+35, r24	; 0x23
    3b66:	9c a3       	std	Y+36, r25	; 0x24
    3b68:	ad a3       	std	Y+37, r26	; 0x25
    3b6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b70:	8d a1       	ldd	r24, Y+37	; 0x25
    3b72:	9e a1       	ldd	r25, Y+38	; 0x26
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e8       	ldi	r20, 0x80	; 128
    3b7a:	5f e3       	ldi	r21, 0x3F	; 63
    3b7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b80:	88 23       	and	r24, r24
    3b82:	2c f4       	brge	.+10     	; 0x3b8e <Real_Time_CLK+0x554>
		__ticks = 1;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	9a a3       	std	Y+34, r25	; 0x22
    3b8a:	89 a3       	std	Y+33, r24	; 0x21
    3b8c:	3f c0       	rjmp	.+126    	; 0x3c0c <Real_Time_CLK+0x5d2>
	else if (__tmp > 65535)
    3b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b90:	7c a1       	ldd	r23, Y+36	; 0x24
    3b92:	8d a1       	ldd	r24, Y+37	; 0x25
    3b94:	9e a1       	ldd	r25, Y+38	; 0x26
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	3f ef       	ldi	r19, 0xFF	; 255
    3b9a:	4f e7       	ldi	r20, 0x7F	; 127
    3b9c:	57 e4       	ldi	r21, 0x47	; 71
    3b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ba2:	18 16       	cp	r1, r24
    3ba4:	4c f5       	brge	.+82     	; 0x3bf8 <Real_Time_CLK+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    3baa:	89 a5       	ldd	r24, Y+41	; 0x29
    3bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	40 e2       	ldi	r20, 0x20	; 32
    3bb4:	51 e4       	ldi	r21, 0x41	; 65
    3bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	9a a3       	std	Y+34, r25	; 0x22
    3bcc:	89 a3       	std	Y+33, r24	; 0x21
    3bce:	0f c0       	rjmp	.+30     	; 0x3bee <Real_Time_CLK+0x5b4>
    3bd0:	88 ec       	ldi	r24, 0xC8	; 200
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	98 a3       	std	Y+32, r25	; 0x20
    3bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    3bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bda:	98 a1       	ldd	r25, Y+32	; 0x20
    3bdc:	01 97       	sbiw	r24, 0x01	; 1
    3bde:	f1 f7       	brne	.-4      	; 0x3bdc <Real_Time_CLK+0x5a2>
    3be0:	98 a3       	std	Y+32, r25	; 0x20
    3be2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	89 a1       	ldd	r24, Y+33	; 0x21
    3be6:	9a a1       	ldd	r25, Y+34	; 0x22
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	9a a3       	std	Y+34, r25	; 0x22
    3bec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bee:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf2:	00 97       	sbiw	r24, 0x00	; 0
    3bf4:	69 f7       	brne	.-38     	; 0x3bd0 <Real_Time_CLK+0x596>
    3bf6:	14 c0       	rjmp	.+40     	; 0x3c20 <Real_Time_CLK+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    3bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    3bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    3bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    3c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	9a a3       	std	Y+34, r25	; 0x22
    3c0a:	89 a3       	std	Y+33, r24	; 0x21
    3c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c10:	9e 8f       	std	Y+30, r25	; 0x1e
    3c12:	8d 8f       	std	Y+29, r24	; 0x1d
    3c14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <Real_Time_CLK+0x5de>
    3c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	Set_Bit(DIO_U8_PORTA,0);
    3c20:	ab e3       	ldi	r26, 0x3B	; 59
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	eb e3       	ldi	r30, 0x3B	; 59
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	81 60       	ori	r24, 0x01	; 1
    3c2c:	8c 93       	st	X, r24
    Set_Bit(DIO_U8_PORTA , 1);
    3c2e:	ab e3       	ldi	r26, 0x3B	; 59
    3c30:	b0 e0       	ldi	r27, 0x00	; 0
    3c32:	eb e3       	ldi	r30, 0x3B	; 59
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	82 60       	ori	r24, 0x02	; 2
    3c3a:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA ,2);
    3c3c:	ab e3       	ldi	r26, 0x3B	; 59
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	eb e3       	ldi	r30, 0x3B	; 59
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	80 81       	ld	r24, Z
    3c46:	84 60       	ori	r24, 0x04	; 4
    3c48:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 3);
    3c4a:	ab e3       	ldi	r26, 0x3B	; 59
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	eb e3       	ldi	r30, 0x3B	; 59
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	88 60       	ori	r24, 0x08	; 8
    3c56:	8c 93       	st	X, r24
	Clear_Bit(DIO_U8_PORTA , 4);
    3c58:	ab e3       	ldi	r26, 0x3B	; 59
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	eb e3       	ldi	r30, 0x3B	; 59
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	8f 7e       	andi	r24, 0xEF	; 239
    3c64:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 5);
    3c66:	ab e3       	ldi	r26, 0x3B	; 59
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	eb e3       	ldi	r30, 0x3B	; 59
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	80 62       	ori	r24, 0x20	; 32
    3c72:	8c 93       	st	X, r24
	SevenSegment_Write(Hrs%10);
    3c74:	80 91 23 01 	lds	r24, 0x0123
    3c78:	9a e0       	ldi	r25, 0x0A	; 10
    3c7a:	69 2f       	mov	r22, r25
    3c7c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    3c80:	89 2f       	mov	r24, r25
    3c82:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	a0 ea       	ldi	r26, 0xA0	; 160
    3c8c:	b0 e4       	ldi	r27, 0x40	; 64
    3c8e:	89 8f       	std	Y+25, r24	; 0x19
    3c90:	9a 8f       	std	Y+26, r25	; 0x1a
    3c92:	ab 8f       	std	Y+27, r26	; 0x1b
    3c94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c96:	69 8d       	ldd	r22, Y+25	; 0x19
    3c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	4a ef       	ldi	r20, 0xFA	; 250
    3ca4:	54 e4       	ldi	r21, 0x44	; 68
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8d 8b       	std	Y+21, r24	; 0x15
    3cb0:	9e 8b       	std	Y+22, r25	; 0x16
    3cb2:	af 8b       	std	Y+23, r26	; 0x17
    3cb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cba:	8f 89       	ldd	r24, Y+23	; 0x17
    3cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	40 e8       	ldi	r20, 0x80	; 128
    3cc4:	5f e3       	ldi	r21, 0x3F	; 63
    3cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cca:	88 23       	and	r24, r24
    3ccc:	2c f4       	brge	.+10     	; 0x3cd8 <Real_Time_CLK+0x69e>
		__ticks = 1;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	9c 8b       	std	Y+20, r25	; 0x14
    3cd4:	8b 8b       	std	Y+19, r24	; 0x13
    3cd6:	3f c0       	rjmp	.+126    	; 0x3d56 <Real_Time_CLK+0x71c>
	else if (__tmp > 65535)
    3cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cda:	7e 89       	ldd	r23, Y+22	; 0x16
    3cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cde:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	3f ef       	ldi	r19, 0xFF	; 255
    3ce4:	4f e7       	ldi	r20, 0x7F	; 127
    3ce6:	57 e4       	ldi	r21, 0x47	; 71
    3ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cec:	18 16       	cp	r1, r24
    3cee:	4c f5       	brge	.+82     	; 0x3d42 <Real_Time_CLK+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e2       	ldi	r20, 0x20	; 32
    3cfe:	51 e4       	ldi	r21, 0x41	; 65
    3d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	9c 8b       	std	Y+20, r25	; 0x14
    3d16:	8b 8b       	std	Y+19, r24	; 0x13
    3d18:	0f c0       	rjmp	.+30     	; 0x3d38 <Real_Time_CLK+0x6fe>
    3d1a:	88 ec       	ldi	r24, 0xC8	; 200
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9a 8b       	std	Y+18, r25	; 0x12
    3d20:	89 8b       	std	Y+17, r24	; 0x11
    3d22:	89 89       	ldd	r24, Y+17	; 0x11
    3d24:	9a 89       	ldd	r25, Y+18	; 0x12
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <Real_Time_CLK+0x6ec>
    3d2a:	9a 8b       	std	Y+18, r25	; 0x12
    3d2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d30:	9c 89       	ldd	r25, Y+20	; 0x14
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	9c 8b       	std	Y+20, r25	; 0x14
    3d36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d38:	8b 89       	ldd	r24, Y+19	; 0x13
    3d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	69 f7       	brne	.-38     	; 0x3d1a <Real_Time_CLK+0x6e0>
    3d40:	14 c0       	rjmp	.+40     	; 0x3d6a <Real_Time_CLK+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d42:	6d 89       	ldd	r22, Y+21	; 0x15
    3d44:	7e 89       	ldd	r23, Y+22	; 0x16
    3d46:	8f 89       	ldd	r24, Y+23	; 0x17
    3d48:	98 8d       	ldd	r25, Y+24	; 0x18
    3d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	9c 8b       	std	Y+20, r25	; 0x14
    3d54:	8b 8b       	std	Y+19, r24	; 0x13
    3d56:	8b 89       	ldd	r24, Y+19	; 0x13
    3d58:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5a:	98 8b       	std	Y+16, r25	; 0x10
    3d5c:	8f 87       	std	Y+15, r24	; 0x0f
    3d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d60:	98 89       	ldd	r25, Y+16	; 0x10
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	f1 f7       	brne	.-4      	; 0x3d62 <Real_Time_CLK+0x728>
    3d66:	98 8b       	std	Y+16, r25	; 0x10
    3d68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	Set_Bit(DIO_U8_PORTA,0);
    3d6a:	ab e3       	ldi	r26, 0x3B	; 59
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	eb e3       	ldi	r30, 0x3B	; 59
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	81 60       	ori	r24, 0x01	; 1
    3d76:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA,1);
    3d78:	ab e3       	ldi	r26, 0x3B	; 59
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	eb e3       	ldi	r30, 0x3B	; 59
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	82 60       	ori	r24, 0x02	; 2
    3d84:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 2);
    3d86:	ab e3       	ldi	r26, 0x3B	; 59
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	eb e3       	ldi	r30, 0x3B	; 59
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	84 60       	ori	r24, 0x04	; 4
    3d92:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 3);
    3d94:	ab e3       	ldi	r26, 0x3B	; 59
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	eb e3       	ldi	r30, 0x3B	; 59
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	80 81       	ld	r24, Z
    3d9e:	88 60       	ori	r24, 0x08	; 8
    3da0:	8c 93       	st	X, r24
	Set_Bit(DIO_U8_PORTA , 4);
    3da2:	ab e3       	ldi	r26, 0x3B	; 59
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	eb e3       	ldi	r30, 0x3B	; 59
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	80 81       	ld	r24, Z
    3dac:	80 61       	ori	r24, 0x10	; 16
    3dae:	8c 93       	st	X, r24
	Clear_Bit(DIO_U8_PORTA , 5);
    3db0:	ab e3       	ldi	r26, 0x3B	; 59
    3db2:	b0 e0       	ldi	r27, 0x00	; 0
    3db4:	eb e3       	ldi	r30, 0x3B	; 59
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	80 81       	ld	r24, Z
    3dba:	8f 7d       	andi	r24, 0xDF	; 223
    3dbc:	8c 93       	st	X, r24
	SevenSegment_Write(Hrs / 10);
    3dbe:	80 91 23 01 	lds	r24, 0x0123
    3dc2:	9a e0       	ldi	r25, 0x0A	; 10
    3dc4:	69 2f       	mov	r22, r25
    3dc6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__udivmodqi4>
    3dca:	0e 94 89 11 	call	0x2312	; 0x2312 <SevenSegment_Write>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	a0 ea       	ldi	r26, 0xA0	; 160
    3dd4:	b0 e4       	ldi	r27, 0x40	; 64
    3dd6:	8b 87       	std	Y+11, r24	; 0x0b
    3dd8:	9c 87       	std	Y+12, r25	; 0x0c
    3dda:	ad 87       	std	Y+13, r26	; 0x0d
    3ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	4a ef       	ldi	r20, 0xFA	; 250
    3dec:	54 e4       	ldi	r21, 0x44	; 68
    3dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	8f 83       	std	Y+7, r24	; 0x07
    3df8:	98 87       	std	Y+8, r25	; 0x08
    3dfa:	a9 87       	std	Y+9, r26	; 0x09
    3dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3e00:	78 85       	ldd	r23, Y+8	; 0x08
    3e02:	89 85       	ldd	r24, Y+9	; 0x09
    3e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e8       	ldi	r20, 0x80	; 128
    3e0c:	5f e3       	ldi	r21, 0x3F	; 63
    3e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e12:	88 23       	and	r24, r24
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <Real_Time_CLK+0x7e6>
		__ticks = 1;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	9e 83       	std	Y+6, r25	; 0x06
    3e1c:	8d 83       	std	Y+5, r24	; 0x05
    3e1e:	3f c0       	rjmp	.+126    	; 0x3e9e <Real_Time_CLK+0x864>
	else if (__tmp > 65535)
    3e20:	6f 81       	ldd	r22, Y+7	; 0x07
    3e22:	78 85       	ldd	r23, Y+8	; 0x08
    3e24:	89 85       	ldd	r24, Y+9	; 0x09
    3e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	3f ef       	ldi	r19, 0xFF	; 255
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	57 e4       	ldi	r21, 0x47	; 71
    3e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e34:	18 16       	cp	r1, r24
    3e36:	4c f5       	brge	.+82     	; 0x3e8a <Real_Time_CLK+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e2       	ldi	r20, 0x20	; 32
    3e46:	51 e4       	ldi	r21, 0x41	; 65
    3e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	9e 83       	std	Y+6, r25	; 0x06
    3e5e:	8d 83       	std	Y+5, r24	; 0x05
    3e60:	0f c0       	rjmp	.+30     	; 0x3e80 <Real_Time_CLK+0x846>
    3e62:	88 ec       	ldi	r24, 0xC8	; 200
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9c 83       	std	Y+4, r25	; 0x04
    3e68:	8b 83       	std	Y+3, r24	; 0x03
    3e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <Real_Time_CLK+0x834>
    3e72:	9c 83       	std	Y+4, r25	; 0x04
    3e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	9e 83       	std	Y+6, r25	; 0x06
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e80:	8d 81       	ldd	r24, Y+5	; 0x05
    3e82:	9e 81       	ldd	r25, Y+6	; 0x06
    3e84:	00 97       	sbiw	r24, 0x00	; 0
    3e86:	69 f7       	brne	.-38     	; 0x3e62 <Real_Time_CLK+0x828>
    3e88:	14 c0       	rjmp	.+40     	; 0x3eb2 <Real_Time_CLK+0x878>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8c:	78 85       	ldd	r23, Y+8	; 0x08
    3e8e:	89 85       	ldd	r24, Y+9	; 0x09
    3e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	9e 83       	std	Y+6, r25	; 0x06
    3e9c:	8d 83       	std	Y+5, r24	; 0x05
    3e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <Real_Time_CLK+0x870>
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    3eb2:	cc 5a       	subi	r28, 0xAC	; 172
    3eb4:	df 4f       	sbci	r29, 0xFF	; 255
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	cf 91       	pop	r28
    3ec2:	df 91       	pop	r29
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	08 95       	ret

00003eca <main>:

void main (void ){
    3eca:	df 93       	push	r29
    3ecc:	cf 93       	push	r28
    3ece:	cd b7       	in	r28, 0x3d	; 61
    3ed0:	de b7       	in	r29, 0x3e	; 62


	LCD_Init();
    3ed2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_Init>
	KPD_Init();
    3ed6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <KPD_Init>
	Gobal_interrput_Enbale();
    3eda:	0e 94 a3 05 	call	0xb46	; 0xb46 <Gobal_interrput_Enbale>
	SevenSegment_Init();
    3ede:	0e 94 7e 11 	call	0x22fc	; 0x22fc <SevenSegment_Init>

	lCD_SetPostion(0, 0);
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	0e 94 bc 10 	call	0x2178	; 0x2178 <lCD_SetPostion>
	LCD_Send_String("Click one to Set Clock");
    3eea:	8a e7       	ldi	r24, 0x7A	; 122
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_Send_String>


	/*********************
	 * Timer 0 init
	 *********************/
	Timer0_init(Timer0_CTC, CLK_8, OC0_Disconnected);
    3ef2:	82 e0       	ldi	r24, 0x02	; 2
    3ef4:	62 e0       	ldi	r22, 0x02	; 2
    3ef6:	40 e0       	ldi	r20, 0x00	; 0
    3ef8:	0e 94 c9 11 	call	0x2392	; 0x2392 <Timer0_init>
	Dio_u8_SetPortDir(Group_A, Dio_PortOutput);
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	6f ef       	ldi	r22, 0xFF	; 255
    3f00:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Dio_u8_SetPortDir>
	Timer0_OCR0 = 99;						// To make 100 micro-sec each over-flow
    3f04:	ec e5       	ldi	r30, 0x5C	; 92
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	83 e6       	ldi	r24, 0x63	; 99
    3f0a:	80 83       	st	Z, r24
	Timer0_OC_Enable();
    3f0c:	0e 94 be 12 	call	0x257c	; 0x257c <Timer0_OC_Enable>
	Timer0_OC_CallBack(Clock);
    3f10:	88 ed       	ldi	r24, 0xD8	; 216
    3f12:	96 e1       	ldi	r25, 0x16	; 22
    3f14:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Timer0_OC_CallBack>


	while (1){

		// Calling Clock system Function
		Real_Time_CLK();
    3f18:	0e 94 1d 1b 	call	0x363a	; 0x363a <Real_Time_CLK>
    3f1c:	fd cf       	rjmp	.-6      	; 0x3f18 <main+0x4e>

00003f1e <__udivmodqi4>:
    3f1e:	99 1b       	sub	r25, r25
    3f20:	79 e0       	ldi	r23, 0x09	; 9
    3f22:	04 c0       	rjmp	.+8      	; 0x3f2c <__udivmodqi4_ep>

00003f24 <__udivmodqi4_loop>:
    3f24:	99 1f       	adc	r25, r25
    3f26:	96 17       	cp	r25, r22
    3f28:	08 f0       	brcs	.+2      	; 0x3f2c <__udivmodqi4_ep>
    3f2a:	96 1b       	sub	r25, r22

00003f2c <__udivmodqi4_ep>:
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	7a 95       	dec	r23
    3f30:	c9 f7       	brne	.-14     	; 0x3f24 <__udivmodqi4_loop>
    3f32:	80 95       	com	r24
    3f34:	08 95       	ret

00003f36 <__udivmodhi4>:
    3f36:	aa 1b       	sub	r26, r26
    3f38:	bb 1b       	sub	r27, r27
    3f3a:	51 e1       	ldi	r21, 0x11	; 17
    3f3c:	07 c0       	rjmp	.+14     	; 0x3f4c <__udivmodhi4_ep>

00003f3e <__udivmodhi4_loop>:
    3f3e:	aa 1f       	adc	r26, r26
    3f40:	bb 1f       	adc	r27, r27
    3f42:	a6 17       	cp	r26, r22
    3f44:	b7 07       	cpc	r27, r23
    3f46:	10 f0       	brcs	.+4      	; 0x3f4c <__udivmodhi4_ep>
    3f48:	a6 1b       	sub	r26, r22
    3f4a:	b7 0b       	sbc	r27, r23

00003f4c <__udivmodhi4_ep>:
    3f4c:	88 1f       	adc	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	5a 95       	dec	r21
    3f52:	a9 f7       	brne	.-22     	; 0x3f3e <__udivmodhi4_loop>
    3f54:	80 95       	com	r24
    3f56:	90 95       	com	r25
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	08 95       	ret

00003f5e <__udivmodsi4>:
    3f5e:	a1 e2       	ldi	r26, 0x21	; 33
    3f60:	1a 2e       	mov	r1, r26
    3f62:	aa 1b       	sub	r26, r26
    3f64:	bb 1b       	sub	r27, r27
    3f66:	fd 01       	movw	r30, r26
    3f68:	0d c0       	rjmp	.+26     	; 0x3f84 <__udivmodsi4_ep>

00003f6a <__udivmodsi4_loop>:
    3f6a:	aa 1f       	adc	r26, r26
    3f6c:	bb 1f       	adc	r27, r27
    3f6e:	ee 1f       	adc	r30, r30
    3f70:	ff 1f       	adc	r31, r31
    3f72:	a2 17       	cp	r26, r18
    3f74:	b3 07       	cpc	r27, r19
    3f76:	e4 07       	cpc	r30, r20
    3f78:	f5 07       	cpc	r31, r21
    3f7a:	20 f0       	brcs	.+8      	; 0x3f84 <__udivmodsi4_ep>
    3f7c:	a2 1b       	sub	r26, r18
    3f7e:	b3 0b       	sbc	r27, r19
    3f80:	e4 0b       	sbc	r30, r20
    3f82:	f5 0b       	sbc	r31, r21

00003f84 <__udivmodsi4_ep>:
    3f84:	66 1f       	adc	r22, r22
    3f86:	77 1f       	adc	r23, r23
    3f88:	88 1f       	adc	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	1a 94       	dec	r1
    3f8e:	69 f7       	brne	.-38     	; 0x3f6a <__udivmodsi4_loop>
    3f90:	60 95       	com	r22
    3f92:	70 95       	com	r23
    3f94:	80 95       	com	r24
    3f96:	90 95       	com	r25
    3f98:	9b 01       	movw	r18, r22
    3f9a:	ac 01       	movw	r20, r24
    3f9c:	bd 01       	movw	r22, r26
    3f9e:	cf 01       	movw	r24, r30
    3fa0:	08 95       	ret

00003fa2 <__prologue_saves__>:
    3fa2:	2f 92       	push	r2
    3fa4:	3f 92       	push	r3
    3fa6:	4f 92       	push	r4
    3fa8:	5f 92       	push	r5
    3faa:	6f 92       	push	r6
    3fac:	7f 92       	push	r7
    3fae:	8f 92       	push	r8
    3fb0:	9f 92       	push	r9
    3fb2:	af 92       	push	r10
    3fb4:	bf 92       	push	r11
    3fb6:	cf 92       	push	r12
    3fb8:	df 92       	push	r13
    3fba:	ef 92       	push	r14
    3fbc:	ff 92       	push	r15
    3fbe:	0f 93       	push	r16
    3fc0:	1f 93       	push	r17
    3fc2:	cf 93       	push	r28
    3fc4:	df 93       	push	r29
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    3fca:	ca 1b       	sub	r28, r26
    3fcc:	db 0b       	sbc	r29, r27
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	09 94       	ijmp

00003fda <__epilogue_restores__>:
    3fda:	2a 88       	ldd	r2, Y+18	; 0x12
    3fdc:	39 88       	ldd	r3, Y+17	; 0x11
    3fde:	48 88       	ldd	r4, Y+16	; 0x10
    3fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fea:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fec:	b9 84       	ldd	r11, Y+9	; 0x09
    3fee:	c8 84       	ldd	r12, Y+8	; 0x08
    3ff0:	df 80       	ldd	r13, Y+7	; 0x07
    3ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ff6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ff8:	1b 81       	ldd	r17, Y+3	; 0x03
    3ffa:	aa 81       	ldd	r26, Y+2	; 0x02
    3ffc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ffe:	ce 0f       	add	r28, r30
    4000:	d1 1d       	adc	r29, r1
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	ed 01       	movw	r28, r26
    400e:	08 95       	ret

00004010 <_exit>:
    4010:	f8 94       	cli

00004012 <__stop_program>:
    4012:	ff cf       	rjmp	.-2      	; 0x4012 <__stop_program>
