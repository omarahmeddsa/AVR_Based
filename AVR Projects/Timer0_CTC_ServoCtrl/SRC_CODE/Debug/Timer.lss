
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000280c  000028a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800068  00800068  000028a8  2**0
                  ALLOC
  3 .stab         00001fec  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001123  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000879b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009548  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000096a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_1>
       8:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_2>
       c:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_10>
      2c:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 37       	cpi	r26, 0x7A	; 122
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e0       	ldi	r30, 0x0C	; 12
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 99 13 	call	0x2732	; 0x2732 <main>
      8a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Gobal_interrput_Enbale>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void Gobal_interrput_Enbale (void )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,GobalInterrput_Pin);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Gobal_interrput_Disable>:

void Gobal_interrput_Disable (void )
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,GobalInterrput_Pin);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <Dio_u8_SetPortDir>:
void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <Dio_u8_SetPortDir+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <Dio_u8_SetPortDir+0x8>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	90 f5       	brcc	.+100    	; 0xbf8 <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3c 83       	std	Y+4, r19	; 0x04
     b9c:	2b 83       	std	Y+3, r18	; 0x03
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	d1 f0       	breq	.+52     	; 0xbdc <Dio_u8_SetPortDir+0x5e>
     ba8:	2b 81       	ldd	r18, Y+3	; 0x03
     baa:	3c 81       	ldd	r19, Y+4	; 0x04
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	2c f4       	brge	.+10     	; 0xbbc <Dio_u8_SetPortDir+0x3e>
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <Dio_u8_SetPortDir+0x54>
     bba:	1e c0       	rjmp	.+60     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
     bbc:	2b 81       	ldd	r18, Y+3	; 0x03
     bbe:	3c 81       	ldd	r19, Y+4	; 0x04
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	81 f0       	breq	.+32     	; 0xbe6 <Dio_u8_SetPortDir+0x68>
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	91 05       	cpc	r25, r1
     bce:	81 f0       	breq	.+32     	; 0xbf0 <Dio_u8_SetPortDir+0x72>
     bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	80 83       	st	Z, r24
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	80 83       	st	Z, r24
     be4:	09 c0       	rjmp	.+18     	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
     be6:	e4 e3       	ldi	r30, 0x34	; 52
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	80 83       	st	Z, r24
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
     bf0:	e1 e3       	ldi	r30, 0x31	; 49
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	80 83       	st	Z, r24
			break;
		}
	}
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <Dio_u8_SetPortValue+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <Dio_u8_SetPortValue+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	90 f5       	brcc	.+100    	; 0xc80 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	3c 83       	std	Y+4, r19	; 0x04
     c24:	2b 83       	std	Y+3, r18	; 0x03
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	91 05       	cpc	r25, r1
     c2e:	d1 f0       	breq	.+52     	; 0xc64 <Dio_u8_SetPortValue+0x5e>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	22 30       	cpi	r18, 0x02	; 2
     c36:	31 05       	cpc	r19, r1
     c38:	2c f4       	brge	.+10     	; 0xc44 <Dio_u8_SetPortValue+0x3e>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	61 f0       	breq	.+24     	; 0xc5a <Dio_u8_SetPortValue+0x54>
     c42:	1e c0       	rjmp	.+60     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
     c44:	2b 81       	ldd	r18, Y+3	; 0x03
     c46:	3c 81       	ldd	r19, Y+4	; 0x04
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	31 05       	cpc	r19, r1
     c4c:	81 f0       	breq	.+32     	; 0xc6e <Dio_u8_SetPortValue+0x68>
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	91 05       	cpc	r25, r1
     c56:	81 f0       	breq	.+32     	; 0xc78 <Dio_u8_SetPortValue+0x72>
     c58:	13 c0       	rjmp	.+38     	; 0xc80 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
     c5a:	eb e3       	ldi	r30, 0x3B	; 59
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	80 83       	st	Z, r24
     c62:	0e c0       	rjmp	.+28     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
     c64:	e8 e3       	ldi	r30, 0x38	; 56
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	80 83       	st	Z, r24
     c6c:	09 c0       	rjmp	.+18     	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
     c6e:	e5 e3       	ldi	r30, 0x35	; 53
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	80 83       	st	Z, r24
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
     c78:	e2 e3       	ldi	r30, 0x32	; 50
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	80 83       	st	Z, r24
			break;
		}
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <Dio_u8_GetportValue+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Dio_u8_GetportValue+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	90 f5       	brcc	.+100    	; 0xd06 <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3c 83       	std	Y+4, r19	; 0x04
     caa:	2b 83       	std	Y+3, r18	; 0x03
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	d1 f0       	breq	.+52     	; 0xcea <Dio_u8_GetportValue+0x5c>
     cb6:	2b 81       	ldd	r18, Y+3	; 0x03
     cb8:	3c 81       	ldd	r19, Y+4	; 0x04
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	2c f4       	brge	.+10     	; 0xcca <Dio_u8_GetportValue+0x3c>
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	61 f0       	breq	.+24     	; 0xce0 <Dio_u8_GetportValue+0x52>
     cc8:	1e c0       	rjmp	.+60     	; 0xd06 <Dio_u8_GetportValue+0x78>
     cca:	2b 81       	ldd	r18, Y+3	; 0x03
     ccc:	3c 81       	ldd	r19, Y+4	; 0x04
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <Dio_u8_GetportValue+0x66>
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	91 05       	cpc	r25, r1
     cdc:	81 f0       	breq	.+32     	; 0xcfe <Dio_u8_GetportValue+0x70>
     cde:	13 c0       	rjmp	.+38     	; 0xd06 <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
     ce0:	eb e3       	ldi	r30, 0x3B	; 59
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
     cea:	e8 e3       	ldi	r30, 0x38	; 56
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
     cf4:	e5 e3       	ldi	r30, 0x35	; 53
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <Dio_u8_SetPinDir+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <Dio_u8_SetPinDir+0x8>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	6a 83       	std	Y+2, r22	; 0x02
     d28:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <Dio_u8_SetPinDir+0x1c>
     d30:	d1 c0       	rjmp	.+418    	; 0xed4 <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3d 83       	std	Y+5, r19	; 0x05
     d3a:	2c 83       	std	Y+4, r18	; 0x04
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <Dio_u8_SetPinDir+0x32>
     d46:	43 c0       	rjmp	.+134    	; 0xdce <Dio_u8_SetPinDir+0xb8>
     d48:	2c 81       	ldd	r18, Y+4	; 0x04
     d4a:	3d 81       	ldd	r19, Y+5	; 0x05
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	2c f4       	brge	.+10     	; 0xd5c <Dio_u8_SetPinDir+0x46>
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	71 f0       	breq	.+28     	; 0xd76 <Dio_u8_SetPinDir+0x60>
     d5a:	bc c0       	rjmp	.+376    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <Dio_u8_SetPinDir+0x52>
     d66:	5f c0       	rjmp	.+190    	; 0xe26 <Dio_u8_SetPinDir+0x110>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_u8_SetPinDir+0x5e>
     d72:	85 c0       	rjmp	.+266    	; 0xe7e <Dio_u8_SetPinDir+0x168>
     d74:	af c0       	rjmp	.+350    	; 0xed4 <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	a1 f4       	brne	.+40     	; 0xda4 <Dio_u8_SetPinDir+0x8e>
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <Dio_u8_SetPinDir+0x84>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <Dio_u8_SetPinDir+0x80>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	98 c0       	rjmp	.+304    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     da4:	aa e3       	ldi	r26, 0x3A	; 58
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <Dio_u8_SetPinDir+0xac>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <Dio_u8_SetPinDir+0xa8>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	83 c0       	rjmp	.+262    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	a1 f4       	brne	.+40     	; 0xdfc <Dio_u8_SetPinDir+0xe6>
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <Dio_u8_SetPinDir+0xdc>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <Dio_u8_SetPinDir+0xd8>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	6c c0       	rjmp	.+216    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     dfc:	a7 e3       	ldi	r26, 0x37	; 55
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e3       	ldi	r30, 0x37	; 55
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <Dio_u8_SetPinDir+0x104>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <Dio_u8_SetPinDir+0x100>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	57 c0       	rjmp	.+174    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	a1 f4       	brne	.+40     	; 0xe54 <Dio_u8_SetPinDir+0x13e>
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <Dio_u8_SetPinDir+0x134>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <Dio_u8_SetPinDir+0x130>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <Dio_u8_SetPinDir+0x15c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <Dio_u8_SetPinDir+0x158>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	2b c0       	rjmp	.+86     	; 0xed4 <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	a1 f4       	brne	.+40     	; 0xeac <Dio_u8_SetPinDir+0x196>
     e84:	a1 e3       	ldi	r26, 0x31	; 49
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <Dio_u8_SetPinDir+0x18c>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <Dio_u8_SetPinDir+0x188>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <Dio_u8_SetPinDir+0x1be>
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <Dio_u8_SetPinDir+0x1b4>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <Dio_u8_SetPinDir+0x1b0>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
			break;
		}
	}
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <Dio_u8_SetPinVal+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <Dio_u8_SetPinVal+0x8>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	6a 83       	std	Y+2, r22	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	08 f0       	brcs	.+2      	; 0xf00 <Dio_u8_SetPinVal+0x1c>
     efe:	d1 c0       	rjmp	.+418    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <Dio_u8_SetPinVal+0x32>
     f14:	43 c0       	rjmp	.+134    	; 0xf9c <Dio_u8_SetPinVal+0xb8>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <Dio_u8_SetPinVal+0x46>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	71 f0       	breq	.+28     	; 0xf44 <Dio_u8_SetPinVal+0x60>
     f28:	bc c0       	rjmp	.+376    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <Dio_u8_SetPinVal+0x52>
     f34:	5f c0       	rjmp	.+190    	; 0xff4 <Dio_u8_SetPinVal+0x110>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <Dio_u8_SetPinVal+0x5e>
     f40:	85 c0       	rjmp	.+266    	; 0x104c <Dio_u8_SetPinVal+0x168>
     f42:	af c0       	rjmp	.+350    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	a1 f4       	brne	.+40     	; 0xf72 <Dio_u8_SetPinVal+0x8e>
     f4a:	ab e3       	ldi	r26, 0x3B	; 59
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb e3       	ldi	r30, 0x3B	; 59
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_u8_SetPinVal+0x84>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_u8_SetPinVal+0x80>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	98 c0       	rjmp	.+304    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <Dio_u8_SetPinVal+0xac>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <Dio_u8_SetPinVal+0xa8>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	83 c0       	rjmp	.+262    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <Dio_u8_SetPinVal+0xe6>
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <Dio_u8_SetPinVal+0xdc>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <Dio_u8_SetPinVal+0xd8>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	6c c0       	rjmp	.+216    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <Dio_u8_SetPinVal+0x104>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <Dio_u8_SetPinVal+0x100>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	57 c0       	rjmp	.+174    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <Dio_u8_SetPinVal+0x13e>
     ffa:	a5 e3       	ldi	r26, 0x35	; 53
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e3       	ldi	r30, 0x35	; 53
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <Dio_u8_SetPinVal+0x134>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <Dio_u8_SetPinVal+0x130>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Dio_u8_SetPinVal+0x15c>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <Dio_u8_SetPinVal+0x158>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	a1 f4       	brne	.+40     	; 0x107a <Dio_u8_SetPinVal+0x196>
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <Dio_u8_SetPinVal+0x18c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <Dio_u8_SetPinVal+0x188>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <Dio_u8_SetPinVal+0x1be>
    107a:	a2 e3       	ldi	r26, 0x32	; 50
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <Dio_u8_SetPinVal+0x1b4>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <Dio_u8_SetPinVal+0x1b0>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <Dio_u8_GetPinVal+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <Dio_u8_GetPinVal+0x8>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <Dio_u8_GetPinVal+0x1a>
    10ca:	67 c0       	rjmp	.+206    	; 0x119a <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	4c 81       	ldd	r20, Y+4	; 0x04
    10d8:	5d 81       	ldd	r21, Y+5	; 0x05
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	41 f1       	breq	.+80     	; 0x1130 <Dio_u8_GetPinVal+0x7e>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <Dio_u8_GetPinVal+0x44>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	61 f0       	breq	.+24     	; 0x110c <Dio_u8_GetPinVal+0x5a>
    10f4:	52 c0       	rjmp	.+164    	; 0x119a <Dio_u8_GetPinVal+0xe8>
    10f6:	4c 81       	ldd	r20, Y+4	; 0x04
    10f8:	5d 81       	ldd	r21, Y+5	; 0x05
    10fa:	42 30       	cpi	r20, 0x02	; 2
    10fc:	51 05       	cpc	r21, r1
    10fe:	51 f1       	breq	.+84     	; 0x1154 <Dio_u8_GetPinVal+0xa2>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	b9 f1       	breq	.+110    	; 0x1178 <Dio_u8_GetPinVal+0xc6>
    110a:	47 c0       	rjmp	.+142    	; 0x119a <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
    110c:	e9 e3       	ldi	r30, 0x39	; 57
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Dio_u8_GetPinVal+0x72>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Dio_u8_GetPinVal+0x6e>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	35 c0       	rjmp	.+106    	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
    1130:	e6 e3       	ldi	r30, 0x36	; 54
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <Dio_u8_GetPinVal+0x96>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <Dio_u8_GetPinVal+0x92>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	23 c0       	rjmp	.+70     	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <Dio_u8_GetPinVal+0xba>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <Dio_u8_GetPinVal+0xb6>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	11 c0       	rjmp	.+34     	; 0x119a <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
    1178:	e0 e3       	ldi	r30, 0x30	; 48
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <Dio_u8_GetPinVal+0xde>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <Dio_u8_GetPinVal+0xda>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <Dio_u8_GetPortDir+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <Dio_u8_GetPortDir+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	90 f5       	brcc	.+100    	; 0x1224 <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3c 83       	std	Y+4, r19	; 0x04
    11c8:	2b 83       	std	Y+3, r18	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	d1 f0       	breq	.+52     	; 0x1208 <Dio_u8_GetPortDir+0x5c>
    11d4:	2b 81       	ldd	r18, Y+3	; 0x03
    11d6:	3c 81       	ldd	r19, Y+4	; 0x04
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <Dio_u8_GetPortDir+0x3c>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	61 f0       	breq	.+24     	; 0x11fe <Dio_u8_GetPortDir+0x52>
    11e6:	1e c0       	rjmp	.+60     	; 0x1224 <Dio_u8_GetPortDir+0x78>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <Dio_u8_GetPortDir+0x66>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <Dio_u8_GetPortDir+0x70>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
    1208:	e7 e3       	ldi	r30, 0x37	; 55
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <Dio_u8_GetPinDir+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <Dio_u8_GetPinDir+0x8>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f0       	brcs	.+2      	; 0x124e <Dio_u8_GetPinDir+0x1a>
    124c:	67 c0       	rjmp	.+206    	; 0x131c <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3d 83       	std	Y+5, r19	; 0x05
    1256:	2c 83       	std	Y+4, r18	; 0x04
    1258:	4c 81       	ldd	r20, Y+4	; 0x04
    125a:	5d 81       	ldd	r21, Y+5	; 0x05
    125c:	41 30       	cpi	r20, 0x01	; 1
    125e:	51 05       	cpc	r21, r1
    1260:	41 f1       	breq	.+80     	; 0x12b2 <Dio_u8_GetPinDir+0x7e>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	91 05       	cpc	r25, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <Dio_u8_GetPinDir+0x44>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <Dio_u8_GetPinDir+0x5a>
    1276:	52 c0       	rjmp	.+164    	; 0x131c <Dio_u8_GetPinDir+0xe8>
    1278:	4c 81       	ldd	r20, Y+4	; 0x04
    127a:	5d 81       	ldd	r21, Y+5	; 0x05
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	51 05       	cpc	r21, r1
    1280:	51 f1       	breq	.+84     	; 0x12d6 <Dio_u8_GetPinDir+0xa2>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	b9 f1       	breq	.+110    	; 0x12fa <Dio_u8_GetPinDir+0xc6>
    128c:	47 c0       	rjmp	.+142    	; 0x131c <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <Dio_u8_GetPinDir+0x72>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <Dio_u8_GetPinDir+0x6e>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	35 c0       	rjmp	.+106    	; 0x131c <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
    12b2:	e7 e3       	ldi	r30, 0x37	; 55
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <Dio_u8_GetPinDir+0x96>
    12c6:	55 95       	asr	r21
    12c8:	47 95       	ror	r20
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <Dio_u8_GetPinDir+0x92>
    12ce:	ca 01       	movw	r24, r20
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	23 c0       	rjmp	.+70     	; 0x131c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
    12d6:	e4 e3       	ldi	r30, 0x34	; 52
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <Dio_u8_GetPinDir+0xba>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <Dio_u8_GetPinDir+0xb6>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
    12fa:	e1 e3       	ldi	r30, 0x31	; 49
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <Dio_u8_GetPinDir+0xde>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <Dio_u8_GetPinDir+0xda>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
    131c:	80 e0       	ldi	r24, 0x00	; 0
	}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <Dio_Pullup>:

void Dio_Pullup (u8 CopyPort_ID, u8 Copy_BitNum)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <Dio_Pullup+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <Dio_Pullup+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	if ((CopyPort_ID <= Group_D )&& (CopyPort_ID >= Group_A)){
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <Dio_Pullup+0x18>
    1344:	4a c0       	rjmp	.+148    	; 0x13da <Dio_Pullup+0xac>

		switch (CopyPort_ID){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	01 f1       	breq	.+64     	; 0x139a <Dio_Pullup+0x6c>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <Dio_Pullup+0x40>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <Dio_Pullup+0x56>
    136c:	36 c0       	rjmp	.+108    	; 0x13da <Dio_Pullup+0xac>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	e1 f0       	breq	.+56     	; 0x13b0 <Dio_Pullup+0x82>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	11 f1       	breq	.+68     	; 0x13c6 <Dio_Pullup+0x98>
    1382:	2b c0       	rjmp	.+86     	; 0x13da <Dio_Pullup+0xac>

		case Group_A:

			Dio_u8_SetPinDir(Group_A, Copy_BitNum, Dio_PinInput);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	6a 81       	ldd	r22, Y+2	; 0x02
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_A, Copy_BitNum,Dio_PinHigh);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	6a 81       	ldd	r22, Y+2	; 0x02
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    1398:	20 c0       	rjmp	.+64     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_B:

			Dio_u8_SetPinDir(Group_B, Copy_BitNum, Dio_PinInput);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	6a 81       	ldd	r22, Y+2	; 0x02
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_B, Copy_BitNum,Dio_PinHigh);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	6a 81       	ldd	r22, Y+2	; 0x02
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_C:

			Dio_u8_SetPinDir(Group_C, Copy_BitNum, Dio_PinInput);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	6a 81       	ldd	r22, Y+2	; 0x02
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_C, Copy_BitNum,Dio_PinHigh);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	6a 81       	ldd	r22, Y+2	; 0x02
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    13c4:	0a c0       	rjmp	.+20     	; 0x13da <Dio_Pullup+0xac>

			break;

		case Group_D:

			Dio_u8_SetPinDir(Group_D, Copy_BitNum, Dio_PinInput);
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	6a 81       	ldd	r22, Y+2	; 0x02
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_D, Copy_BitNum,Dio_PinHigh);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	6a 81       	ldd	r22, Y+2	; 0x02
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

			break;
		}
	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <EXTI_Init>:
/***********************************************************
 * Functions Implemantaion
 ************************************************************/

void EXTI_Init (u8 Copy_INTx)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <EXTI_Init+0x6>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01

		switch ( Copy_INTx){
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3b 83       	std	Y+3, r19	; 0x03
    13fe:	2a 83       	std	Y+2, r18	; 0x02
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	86 30       	cpi	r24, 0x06	; 6
    1406:	91 05       	cpc	r25, r1
    1408:	59 f0       	breq	.+22     	; 0x1420 <EXTI_Init+0x38>
    140a:	2a 81       	ldd	r18, Y+2	; 0x02
    140c:	3b 81       	ldd	r19, Y+3	; 0x03
    140e:	27 30       	cpi	r18, 0x07	; 7
    1410:	31 05       	cpc	r19, r1
    1412:	71 f0       	breq	.+28     	; 0x1430 <EXTI_Init+0x48>
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	85 30       	cpi	r24, 0x05	; 5
    141a:	91 05       	cpc	r25, r1
    141c:	89 f0       	breq	.+34     	; 0x1440 <EXTI_Init+0x58>
    141e:	17 c0       	rjmp	.+46     	; 0x144e <EXTI_Init+0x66>

		case INT0 :
			Set_Bit(EXTI_GICR,INT0);
    1420:	ab e5       	ldi	r26, 0x5B	; 91
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	eb e5       	ldi	r30, 0x5B	; 91
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 64       	ori	r24, 0x40	; 64
    142c:	8c 93       	st	X, r24
    142e:	0f c0       	rjmp	.+30     	; 0x144e <EXTI_Init+0x66>
			break;

		case INT1 :
			Set_Bit(EXTI_GICR,INT1);
    1430:	ab e5       	ldi	r26, 0x5B	; 91
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e5       	ldi	r30, 0x5B	; 91
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
    143e:	07 c0       	rjmp	.+14     	; 0x144e <EXTI_Init+0x66>
			break;

		case INT2 :
			Set_Bit(EXTI_GICR,INT2);
    1440:	ab e5       	ldi	r26, 0x5B	; 91
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	eb e5       	ldi	r30, 0x5B	; 91
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 62       	ori	r24, 0x20	; 32
    144c:	8c 93       	st	X, r24
			break;
		}
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <EXTI_Line_Disable>:

void EXTI_Line_Disable  (u8 Copy_INTx) {
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <EXTI_Line_Disable+0x6>
    1460:	0f 92       	push	r0
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	89 83       	std	Y+1, r24	; 0x01

	switch ( Copy_INTx){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3b 83       	std	Y+3, r19	; 0x03
    1470:	2a 83       	std	Y+2, r18	; 0x02
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	9b 81       	ldd	r25, Y+3	; 0x03
    1476:	86 30       	cpi	r24, 0x06	; 6
    1478:	91 05       	cpc	r25, r1
    147a:	59 f0       	breq	.+22     	; 0x1492 <EXTI_Line_Disable+0x38>
    147c:	2a 81       	ldd	r18, Y+2	; 0x02
    147e:	3b 81       	ldd	r19, Y+3	; 0x03
    1480:	27 30       	cpi	r18, 0x07	; 7
    1482:	31 05       	cpc	r19, r1
    1484:	71 f0       	breq	.+28     	; 0x14a2 <EXTI_Line_Disable+0x48>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	85 30       	cpi	r24, 0x05	; 5
    148c:	91 05       	cpc	r25, r1
    148e:	89 f0       	breq	.+34     	; 0x14b2 <EXTI_Line_Disable+0x58>
    1490:	17 c0       	rjmp	.+46     	; 0x14c0 <EXTI_Line_Disable+0x66>

			case INT0 :
				Clear_Bit(EXTI_GICR,INT0);
    1492:	ab e5       	ldi	r26, 0x5B	; 91
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	eb e5       	ldi	r30, 0x5B	; 91
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 7b       	andi	r24, 0xBF	; 191
    149e:	8c 93       	st	X, r24
    14a0:	0f c0       	rjmp	.+30     	; 0x14c0 <EXTI_Line_Disable+0x66>
				break;

			case INT1 :
				Clear_Bit(EXTI_GICR,INT1);
    14a2:	ab e5       	ldi	r26, 0x5B	; 91
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	eb e5       	ldi	r30, 0x5B	; 91
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8f 77       	andi	r24, 0x7F	; 127
    14ae:	8c 93       	st	X, r24
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <EXTI_Line_Disable+0x66>
				break;

			case INT2 :
				Clear_Bit(EXTI_GICR,INT2);
    14b2:	ab e5       	ldi	r26, 0x5B	; 91
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e5       	ldi	r30, 0x5B	; 91
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7d       	andi	r24, 0xDF	; 223
    14be:	8c 93       	st	X, r24
				break;
			}
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <EXTI_SenseCTRL>:

void EXTI_SenseCTRL (u8 Copy_SenseMode, u8 Copy_Line) {
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <EXTI_SenseCTRL+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <EXTI_SenseCTRL+0x8>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_Line){
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3c 83       	std	Y+4, r19	; 0x04
    14e4:	2b 83       	std	Y+3, r18	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	86 30       	cpi	r24, 0x06	; 6
    14ec:	91 05       	cpc	r25, r1
    14ee:	61 f0       	breq	.+24     	; 0x1508 <EXTI_SenseCTRL+0x3c>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	27 30       	cpi	r18, 0x07	; 7
    14f6:	31 05       	cpc	r19, r1
    14f8:	a9 f1       	breq	.+106    	; 0x1564 <EXTI_SenseCTRL+0x98>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	85 30       	cpi	r24, 0x05	; 5
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <EXTI_SenseCTRL+0x3a>
    1504:	5d c0       	rjmp	.+186    	; 0x15c0 <EXTI_SenseCTRL+0xf4>
    1506:	72 c0       	rjmp	.+228    	; 0x15ec <EXTI_SenseCTRL+0x120>
	case INT0:
		Assign_Bit(EXTI_MCUCR, ISC00,Get_Bit(Copy_SenseMode, 0));
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	81 70       	andi	r24, 0x01	; 1
    1510:	90 70       	andi	r25, 0x00	; 0
    1512:	88 23       	and	r24, r24
    1514:	41 f0       	breq	.+16     	; 0x1526 <EXTI_SenseCTRL+0x5a>
    1516:	a5 e5       	ldi	r26, 0x55	; 85
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e5       	ldi	r30, 0x55	; 85
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	8c 93       	st	X, r24
    1524:	07 c0       	rjmp	.+14     	; 0x1534 <EXTI_SenseCTRL+0x68>
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	8c 93       	st	X, r24
		Assign_Bit(EXTI_MCUCR, ISC01,Get_Bit(Copy_SenseMode, 1));
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	86 95       	lsr	r24
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	81 70       	andi	r24, 0x01	; 1
    153e:	90 70       	andi	r25, 0x00	; 0
    1540:	88 23       	and	r24, r24
    1542:	41 f0       	breq	.+16     	; 0x1554 <EXTI_SenseCTRL+0x88>
    1544:	a5 e5       	ldi	r26, 0x55	; 85
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e5       	ldi	r30, 0x55	; 85
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	82 60       	ori	r24, 0x02	; 2
    1550:	8c 93       	st	X, r24
    1552:	4c c0       	rjmp	.+152    	; 0x15ec <EXTI_SenseCTRL+0x120>
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	8c 93       	st	X, r24
    1562:	44 c0       	rjmp	.+136    	; 0x15ec <EXTI_SenseCTRL+0x120>
		break;

	case INT1:
		Assign_Bit(EXTI_MCUCR, ISC10,Get_Bit(Copy_SenseMode, 0));
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	88 23       	and	r24, r24
    1570:	41 f0       	breq	.+16     	; 0x1582 <EXTI_SenseCTRL+0xb6>
    1572:	a5 e5       	ldi	r26, 0x55	; 85
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e5       	ldi	r30, 0x55	; 85
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	84 60       	ori	r24, 0x04	; 4
    157e:	8c 93       	st	X, r24
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <EXTI_SenseCTRL+0xc4>
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8b 7f       	andi	r24, 0xFB	; 251
    158e:	8c 93       	st	X, r24
		Assign_Bit(EXTI_MCUCR, ISC11,Get_Bit(Copy_SenseMode, 1));
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	86 95       	lsr	r24
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	88 23       	and	r24, r24
    159e:	41 f0       	breq	.+16     	; 0x15b0 <EXTI_SenseCTRL+0xe4>
    15a0:	a5 e5       	ldi	r26, 0x55	; 85
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e5       	ldi	r30, 0x55	; 85
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 60       	ori	r24, 0x08	; 8
    15ac:	8c 93       	st	X, r24
    15ae:	1e c0       	rjmp	.+60     	; 0x15ec <EXTI_SenseCTRL+0x120>
    15b0:	a5 e5       	ldi	r26, 0x55	; 85
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e5       	ldi	r30, 0x55	; 85
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	87 7f       	andi	r24, 0xF7	; 247
    15bc:	8c 93       	st	X, r24
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <EXTI_SenseCTRL+0x120>
		break;

	case INT2 :
		Assign_Bit(EXTI_MCUCR, EXTI_ISC2,Get_Bit(Copy_SenseMode, 0));
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	90 70       	andi	r25, 0x00	; 0
    15ca:	88 23       	and	r24, r24
    15cc:	41 f0       	breq	.+16     	; 0x15de <EXTI_SenseCTRL+0x112>
    15ce:	a5 e5       	ldi	r26, 0x55	; 85
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e5       	ldi	r30, 0x55	; 85
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	8c 93       	st	X, r24
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <EXTI_SenseCTRL+0x120>
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7b       	andi	r24, 0xBF	; 191
    15ea:	8c 93       	st	X, r24
		break;
	}
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <EXTI_Callback_INT>:
/****************************************************************************
 *
 *Callback Function
 ****************************************************************************/

void EXTI_Callback_INT (u8 Init_Line,void (* Local_PTR)(void )){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <EXTI_Callback_INT+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <EXTI_Callback_INT+0x8>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	7b 83       	std	Y+3, r23	; 0x03
    160c:	6a 83       	std	Y+2, r22	; 0x02

	switch (Init_Line){
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3d 83       	std	Y+5, r19	; 0x05
    1616:	2c 83       	std	Y+4, r18	; 0x04
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	86 30       	cpi	r24, 0x06	; 6
    161e:	91 05       	cpc	r25, r1
    1620:	59 f0       	breq	.+22     	; 0x1638 <EXTI_Callback_INT+0x3e>
    1622:	2c 81       	ldd	r18, Y+4	; 0x04
    1624:	3d 81       	ldd	r19, Y+5	; 0x05
    1626:	27 30       	cpi	r18, 0x07	; 7
    1628:	31 05       	cpc	r19, r1
    162a:	69 f0       	breq	.+26     	; 0x1646 <EXTI_Callback_INT+0x4c>
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	91 05       	cpc	r25, r1
    1634:	79 f0       	breq	.+30     	; 0x1654 <EXTI_Callback_INT+0x5a>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <EXTI_Callback_INT+0x66>

	case INT0 :
	INT0_FPTR = Local_PTR;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	90 93 69 00 	sts	0x0069, r25
    1640:	80 93 68 00 	sts	0x0068, r24
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <EXTI_Callback_INT+0x66>
	break;

	case INT1 :
	INT1_FPTR = Local_PTR;
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	90 93 6b 00 	sts	0x006B, r25
    164e:	80 93 6a 00 	sts	0x006A, r24
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <EXTI_Callback_INT+0x66>
	break;

	case INT2 :
	INT2_FPTR = Local_PTR;
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	90 93 6d 00 	sts	0x006D, r25
    165c:	80 93 6c 00 	sts	0x006C, r24
	break;

	}

}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <__vector_1>:
/******************************************************************************
 * ISR Functions
*******************************************************************************/

void __vector_1(void)__attribute__((signal));
void __vector_1(){
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62

	if (INT0_FPTR != Null){
    169a:	80 91 68 00 	lds	r24, 0x0068
    169e:	90 91 69 00 	lds	r25, 0x0069
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <__vector_1+0x40>
		INT0_FPTR();
    16a6:	e0 91 68 00 	lds	r30, 0x0068
    16aa:	f0 91 69 00 	lds	r31, 0x0069
    16ae:	09 95       	icall
	}
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(){
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62

	if (INT1_FPTR != Null){
    1700:	80 91 6a 00 	lds	r24, 0x006A
    1704:	90 91 6b 00 	lds	r25, 0x006B
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	29 f0       	breq	.+10     	; 0x1716 <__vector_2+0x40>
		INT1_FPTR();
    170c:	e0 91 6a 00 	lds	r30, 0x006A
    1710:	f0 91 6b 00 	lds	r31, 0x006B
    1714:	09 95       	icall
	}
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(){
    173c:	1f 92       	push	r1
    173e:	0f 92       	push	r0
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	0f 92       	push	r0
    1744:	11 24       	eor	r1, r1
    1746:	2f 93       	push	r18
    1748:	3f 93       	push	r19
    174a:	4f 93       	push	r20
    174c:	5f 93       	push	r21
    174e:	6f 93       	push	r22
    1750:	7f 93       	push	r23
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
    1756:	af 93       	push	r26
    1758:	bf 93       	push	r27
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62

	if (INT2_FPTR != Null){
    1766:	80 91 6c 00 	lds	r24, 0x006C
    176a:	90 91 6d 00 	lds	r25, 0x006D
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	29 f0       	breq	.+10     	; 0x177c <__vector_3+0x40>
		INT2_FPTR();
    1772:	e0 91 6c 00 	lds	r30, 0x006C
    1776:	f0 91 6d 00 	lds	r31, 0x006D
    177a:	09 95       	icall
	}
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <LCD_Send_FallingEdge>:
#include "Dio.h"
#include "LCD_Interface.h"
#include "LCD_Config.h"
#include "avr/delay.h"

void LCD_Send_FallingEdge () {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	6c 97       	sbiw	r28, 0x1c	; 28
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinHigh);
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	66 e0       	ldi	r22, 0x06	; 6
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e4       	ldi	r27, 0x40	; 64
    17c8:	89 8f       	std	Y+25, r24	; 0x19
    17ca:	9a 8f       	std	Y+26, r25	; 0x1a
    17cc:	ab 8f       	std	Y+27, r26	; 0x1b
    17ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	69 8d       	ldd	r22, Y+25	; 0x19
    17d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a ef       	ldi	r20, 0xFA	; 250
    17de:	54 e4       	ldi	r21, 0x44	; 68
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8d 8b       	std	Y+21, r24	; 0x15
    17ea:	9e 8b       	std	Y+22, r25	; 0x16
    17ec:	af 8b       	std	Y+23, r26	; 0x17
    17ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f0:	6d 89       	ldd	r22, Y+21	; 0x15
    17f2:	7e 89       	ldd	r23, Y+22	; 0x16
    17f4:	8f 89       	ldd	r24, Y+23	; 0x17
    17f6:	98 8d       	ldd	r25, Y+24	; 0x18
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <LCD_Send_FallingEdge+0x70>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <LCD_Send_FallingEdge+0xee>
	else if (__tmp > 65535)
    1812:	6d 89       	ldd	r22, Y+21	; 0x15
    1814:	7e 89       	ldd	r23, Y+22	; 0x16
    1816:	8f 89       	ldd	r24, Y+23	; 0x17
    1818:	98 8d       	ldd	r25, Y+24	; 0x18
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	4c f5       	brge	.+82     	; 0x187c <LCD_Send_FallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182a:	69 8d       	ldd	r22, Y+25	; 0x19
    182c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <LCD_Send_FallingEdge+0xd0>
    1854:	88 ec       	ldi	r24, 0xC8	; 200
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9a 8b       	std	Y+18, r25	; 0x12
    185a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    185c:	89 89       	ldd	r24, Y+17	; 0x11
    185e:	9a 89       	ldd	r25, Y+18	; 0x12
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_Send_FallingEdge+0xbe>
    1864:	9a 8b       	std	Y+18, r25	; 0x12
    1866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8b 89       	ldd	r24, Y+19	; 0x13
    186a:	9c 89       	ldd	r25, Y+20	; 0x14
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <LCD_Send_FallingEdge+0xb2>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <LCD_Send_FallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	6d 89       	ldd	r22, Y+21	; 0x15
    187e:	7e 89       	ldd	r23, Y+22	; 0x16
    1880:	8f 89       	ldd	r24, Y+23	; 0x17
    1882:	98 8d       	ldd	r25, Y+24	; 0x18
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9c 8b       	std	Y+20, r25	; 0x14
    188e:	8b 8b       	std	Y+19, r24	; 0x13
    1890:	8b 89       	ldd	r24, Y+19	; 0x13
    1892:	9c 89       	ldd	r25, Y+20	; 0x14
    1894:	98 8b       	std	Y+16, r25	; 0x10
    1896:	8f 87       	std	Y+15, r24	; 0x0f
    1898:	8f 85       	ldd	r24, Y+15	; 0x0f
    189a:	98 89       	ldd	r25, Y+16	; 0x10
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_Send_FallingEdge+0xfa>
    18a0:	98 8b       	std	Y+16, r25	; 0x10
    18a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_ENB, Dio_PinLow);
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e4       	ldi	r27, 0x40	; 64
    18b6:	8b 87       	std	Y+11, r24	; 0x0b
    18b8:	9c 87       	std	Y+12, r25	; 0x0c
    18ba:	ad 87       	std	Y+13, r26	; 0x0d
    18bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	a9 87       	std	Y+9, r26	; 0x09
    18dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <LCD_Send_FallingEdge+0x15e>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <LCD_Send_FallingEdge+0x1dc>
	else if (__tmp > 65535)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <LCD_Send_FallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <LCD_Send_FallingEdge+0x1be>
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_Send_FallingEdge+0x1ac>
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <LCD_Send_FallingEdge+0x1a0>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <LCD_Send_FallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_Send_FallingEdge+0x1e8>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    1992:	6c 96       	adiw	r28, 0x1c	; 28
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <LCD_Send_Data>:



void LCD_Send_Data(u8 Data ){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinHigh);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	65 e0       	ldi	r22, 0x05	; 5
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Data,4));
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	82 95       	swap	r24
    19c8:	8f 70       	andi	r24, 0x0F	; 15
    19ca:	98 2f       	mov	r25, r24
    19cc:	91 70       	andi	r25, 0x01	; 1
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	49 2f       	mov	r20, r25
    19d4:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Data,5));
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	82 95       	swap	r24
    19dc:	86 95       	lsr	r24
    19de:	87 70       	andi	r24, 0x07	; 7
    19e0:	98 2f       	mov	r25, r24
    19e2:	91 70       	andi	r25, 0x01	; 1
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	49 2f       	mov	r20, r25
    19ea:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Data,6));
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	82 95       	swap	r24
    19f2:	86 95       	lsr	r24
    19f4:	86 95       	lsr	r24
    19f6:	83 70       	andi	r24, 0x03	; 3
    19f8:	98 2f       	mov	r25, r24
    19fa:	91 70       	andi	r25, 0x01	; 1
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	49 2f       	mov	r20, r25
    1a02:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Data,7));
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	98 2f       	mov	r25, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	99 1f       	adc	r25, r25
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	63 e0       	ldi	r22, 0x03	; 3
    1a14:	49 2f       	mov	r20, r25
    1a16:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1a1a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_Send_FallingEdge>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Data,0));
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	98 2f       	mov	r25, r24
    1a22:	91 70       	andi	r25, 0x01	; 1
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	49 2f       	mov	r20, r25
    1a2a:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Data,1));
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	86 95       	lsr	r24
    1a32:	98 2f       	mov	r25, r24
    1a34:	91 70       	andi	r25, 0x01	; 1
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	49 2f       	mov	r20, r25
    1a3c:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Data,2));
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	86 95       	lsr	r24
    1a44:	86 95       	lsr	r24
    1a46:	98 2f       	mov	r25, r24
    1a48:	91 70       	andi	r25, 0x01	; 1
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	49 2f       	mov	r20, r25
    1a50:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Data,3));
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	86 95       	lsr	r24
    1a58:	86 95       	lsr	r24
    1a5a:	86 95       	lsr	r24
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	91 70       	andi	r25, 0x01	; 1
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	63 e0       	ldi	r22, 0x03	; 3
    1a64:	49 2f       	mov	r20, r25
    1a66:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	LCD_Send_FallingEdge();
    1a6a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_Send_FallingEdge>

}
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <LCD_Send_Command>:

void LCD_Send_Command (u8 Command ){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01

	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RS, Dio_PinLow);
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	64 e0       	ldi	r22, 0x04	; 4
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_CTR_Port, LCD_RW, Dio_PinLow);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	65 e0       	ldi	r22, 0x05	; 5
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Command,4));
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	82 95       	swap	r24
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	91 70       	andi	r25, 0x01	; 1
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	49 2f       	mov	r20, r25
    1aa6:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Command,5));
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	82 95       	swap	r24
    1aae:	86 95       	lsr	r24
    1ab0:	87 70       	andi	r24, 0x07	; 7
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	91 70       	andi	r25, 0x01	; 1
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	49 2f       	mov	r20, r25
    1abc:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Command,6));
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	82 95       	swap	r24
    1ac4:	86 95       	lsr	r24
    1ac6:	86 95       	lsr	r24
    1ac8:	83 70       	andi	r24, 0x03	; 3
    1aca:	98 2f       	mov	r25, r24
    1acc:	91 70       	andi	r25, 0x01	; 1
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	62 e0       	ldi	r22, 0x02	; 2
    1ad2:	49 2f       	mov	r20, r25
    1ad4:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Command,7));
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	98 2f       	mov	r25, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	99 27       	eor	r25, r25
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	63 e0       	ldi	r22, 0x03	; 3
    1ae6:	49 2f       	mov	r20, r25
    1ae8:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1aec:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_Send_FallingEdge>

	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D0, Get_Bit(Command,0));
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	98 2f       	mov	r25, r24
    1af4:	91 70       	andi	r25, 0x01	; 1
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	49 2f       	mov	r20, r25
    1afc:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D1, Get_Bit(Command,1));
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	86 95       	lsr	r24
    1b04:	98 2f       	mov	r25, r24
    1b06:	91 70       	andi	r25, 0x01	; 1
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	49 2f       	mov	r20, r25
    1b0e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D2, Get_Bit(Command,2));
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	86 95       	lsr	r24
    1b16:	86 95       	lsr	r24
    1b18:	98 2f       	mov	r25, r24
    1b1a:	91 70       	andi	r25, 0x01	; 1
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	49 2f       	mov	r20, r25
    1b22:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
	Dio_u8_SetPinVal(LCD_Data_Port, LCD_D3, Get_Bit(Command,3));
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	86 95       	lsr	r24
    1b2a:	86 95       	lsr	r24
    1b2c:	86 95       	lsr	r24
    1b2e:	98 2f       	mov	r25, r24
    1b30:	91 70       	andi	r25, 0x01	; 1
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	63 e0       	ldi	r22, 0x03	; 3
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	LCD_Send_FallingEdge();
    1b3c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_Send_FallingEdge>

}
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <LCD_4Bit_Init>:

void LCD_4Bit_Init (void ){
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	c4 55       	subi	r28, 0x54	; 84
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61

	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RS, Dio_PinOutput);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	64 e0       	ldi	r22, 0x04	; 4
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_RW, Dio_PinOutput);
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	65 e0       	ldi	r22, 0x05	; 5
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(LCD_CTR_Port, LCD_ENB, Dio_PinOutput);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	66 e0       	ldi	r22, 0x06	; 6
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>
    1b80:	fe 01       	movw	r30, r28
    1b82:	ef 5a       	subi	r30, 0xAF	; 175
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a8 e4       	ldi	r26, 0x48	; 72
    1b8c:	b2 e4       	ldi	r27, 0x42	; 66
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	8e 01       	movw	r16, r28
    1b98:	03 5b       	subi	r16, 0xB3	; 179
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ef 5a       	subi	r30, 0xAF	; 175
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e3 5b       	subi	r30, 0xB3	; 179
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	44 f4       	brge	.+16     	; 0x1bf2 <LCD_4Bit_Init+0xaa>
		__ticks = 1;
    1be2:	fe 01       	movw	r30, r28
    1be4:	e5 5b       	subi	r30, 0xB5	; 181
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	64 c0       	rjmp	.+200    	; 0x1cba <LCD_4Bit_Init+0x172>
	else if (__tmp > 65535)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e3 5b       	subi	r30, 0xB3	; 179
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <LCD_4Bit_Init+0xca>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <LCD_4Bit_Init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	fe 01       	movw	r30, r28
    1c14:	ef 5a       	subi	r30, 0xAF	; 175
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8e 01       	movw	r16, r28
    1c32:	05 5b       	subi	r16, 0xB5	; 181
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	1f c0       	rjmp	.+62     	; 0x1c88 <LCD_4Bit_Init+0x140>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5b       	subi	r30, 0xB7	; 183
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e7 5b       	subi	r30, 0xB7	; 183
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_4Bit_Init+0x11a>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 5b       	subi	r30, 0xB7	; 183
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	de 01       	movw	r26, r28
    1c72:	a5 5b       	subi	r26, 0xB5	; 181
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e5 5b       	subi	r30, 0xB5	; 181
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	9c 93       	st	X, r25
    1c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e5 5b       	subi	r30, 0xB5	; 181
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	d1 f6       	brne	.-76     	; 0x1c4a <LCD_4Bit_Init+0x102>
    1c96:	27 c0       	rjmp	.+78     	; 0x1ce6 <LCD_4Bit_Init+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	05 5b       	subi	r16, 0xB5	; 181
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e3 5b       	subi	r30, 0xB3	; 179
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
    1cba:	de 01       	movw	r26, r28
    1cbc:	a9 5b       	subi	r26, 0xB9	; 185
    1cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e5 5b       	subi	r30, 0xB5	; 181
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	8d 93       	st	X+, r24
    1ccc:	9c 93       	st	X, r25
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e9 5b       	subi	r30, 0xB9	; 185
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_4Bit_Init+0x190>
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e9 5b       	subi	r30, 0xB9	; 185
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_Send_Command(0x33);
    1ce6:	83 e3       	ldi	r24, 0x33	; 51
    1ce8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    1cec:	fe 01       	movw	r30, r28
    1cee:	ed 5b       	subi	r30, 0xBD	; 189
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	80 83       	st	Z, r24
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	a2 83       	std	Z+2, r26	; 0x02
    1d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	8e 01       	movw	r16, r28
    1d04:	01 5c       	subi	r16, 0xC1	; 193
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ed 5b       	subi	r30, 0xBD	; 189
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 83       	st	Z, r24
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	a2 83       	std	Z+2, r26	; 0x02
    1d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d30:	fe 01       	movw	r30, r28
    1d32:	ff 96       	adiw	r30, 0x3f	; 63
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_4Bit_Init+0x20e>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e af       	std	Y+62, r25	; 0x3e
    1d52:	8d af       	std	Y+61, r24	; 0x3d
    1d54:	46 c0       	rjmp	.+140    	; 0x1de2 <LCD_4Bit_Init+0x29a>
	else if (__tmp > 65535)
    1d56:	fe 01       	movw	r30, r28
    1d58:	ff 96       	adiw	r30, 0x3f	; 63
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	64 f5       	brge	.+88     	; 0x1dca <LCD_4Bit_Init+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 5b       	subi	r30, 0xBD	; 189
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e af       	std	Y+62, r25	; 0x3e
    1d9e:	8d af       	std	Y+61, r24	; 0x3d
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_4Bit_Init+0x278>
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c af       	std	Y+60, r25	; 0x3c
    1da8:	8b af       	std	Y+59, r24	; 0x3b
    1daa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dac:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_4Bit_Init+0x266>
    1db2:	9c af       	std	Y+60, r25	; 0x3c
    1db4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9e af       	std	Y+62, r25	; 0x3e
    1dbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_4Bit_Init+0x25a>
    1dc8:	16 c0       	rjmp	.+44     	; 0x1df6 <LCD_4Bit_Init+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ff 96       	adiw	r30, 0x3f	; 63
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e af       	std	Y+62, r25	; 0x3e
    1de0:	8d af       	std	Y+61, r24	; 0x3d
    1de2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de6:	9a af       	std	Y+58, r25	; 0x3a
    1de8:	89 af       	std	Y+57, r24	; 0x39
    1dea:	89 ad       	ldd	r24, Y+57	; 0x39
    1dec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_4Bit_Init+0x2a6>
    1df2:	9a af       	std	Y+58, r25	; 0x3a
    1df4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_Send_Command(0x02);
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e8       	ldi	r26, 0x80	; 128
    1e02:	bf e3       	ldi	r27, 0x3F	; 63
    1e04:	8d ab       	std	Y+53, r24	; 0x35
    1e06:	9e ab       	std	Y+54, r25	; 0x36
    1e08:	af ab       	std	Y+55, r26	; 0x37
    1e0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e10:	8f a9       	ldd	r24, Y+55	; 0x37
    1e12:	98 ad       	ldd	r25, Y+56	; 0x38
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	89 ab       	std	Y+49, r24	; 0x31
    1e26:	9a ab       	std	Y+50, r25	; 0x32
    1e28:	ab ab       	std	Y+51, r26	; 0x33
    1e2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_4Bit_Init+0x306>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_4Bit_Init+0x384>
	else if (__tmp > 65535)
    1e4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e50:	7a a9       	ldd	r23, Y+50	; 0x32
    1e52:	8b a9       	ldd	r24, Y+51	; 0x33
    1e54:	9c a9       	ldd	r25, Y+52	; 0x34
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_4Bit_Init+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_4Bit_Init+0x366>
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e a7       	std	Y+46, r25	; 0x2e
    1e96:	8d a7       	std	Y+45, r24	; 0x2d
    1e98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_4Bit_Init+0x354>
    1ea0:	9e a7       	std	Y+46, r25	; 0x2e
    1ea2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	98 ab       	std	Y+48, r25	; 0x30
    1eac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_4Bit_Init+0x348>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_4Bit_Init+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eba:	7a a9       	ldd	r23, Y+50	; 0x32
    1ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	98 ab       	std	Y+48, r25	; 0x30
    1eca:	8f a7       	std	Y+47, r24	; 0x2f
    1ecc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ece:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed0:	9c a7       	std	Y+44, r25	; 0x2c
    1ed2:	8b a7       	std	Y+43, r24	; 0x2b
    1ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_4Bit_Init+0x390>
    1edc:	9c a7       	std	Y+44, r25	; 0x2c
    1ede:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_Send_Command(0x28);
    1ee0:	88 e2       	ldi	r24, 0x28	; 40
    1ee2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	8f a3       	std	Y+39, r24	; 0x27
    1ef0:	98 a7       	std	Y+40, r25	; 0x28
    1ef2:	a9 a7       	std	Y+41, r26	; 0x29
    1ef4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef8:	78 a5       	ldd	r23, Y+40	; 0x28
    1efa:	89 a5       	ldd	r24, Y+41	; 0x29
    1efc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8b a3       	std	Y+35, r24	; 0x23
    1f10:	9c a3       	std	Y+36, r25	; 0x24
    1f12:	ad a3       	std	Y+37, r26	; 0x25
    1f14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f16:	6b a1       	ldd	r22, Y+35	; 0x23
    1f18:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_4Bit_Init+0x3f0>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_4Bit_Init+0x46e>
	else if (__tmp > 65535)
    1f38:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_4Bit_Init+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6f a1       	ldd	r22, Y+39	; 0x27
    1f52:	78 a5       	ldd	r23, Y+40	; 0x28
    1f54:	89 a5       	ldd	r24, Y+41	; 0x29
    1f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_4Bit_Init+0x450>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	98 a3       	std	Y+32, r25	; 0x20
    1f80:	8f 8f       	std	Y+31, r24	; 0x1f
    1f82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f84:	98 a1       	ldd	r25, Y+32	; 0x20
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_4Bit_Init+0x43e>
    1f8a:	98 a3       	std	Y+32, r25	; 0x20
    1f8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_4Bit_Init+0x432>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_4Bit_Init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9a a3       	std	Y+34, r25	; 0x22
    1fb4:	89 a3       	std	Y+33, r24	; 0x21
    1fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fba:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_4Bit_Init+0x47a>
    1fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Send_Command(0x0c);
    1fca:	8c e0       	ldi	r24, 0x0C	; 12
    1fcc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e8       	ldi	r26, 0x80	; 128
    1fd6:	bf e3       	ldi	r27, 0x3F	; 63
    1fd8:	89 8f       	std	Y+25, r24	; 0x19
    1fda:	9a 8f       	std	Y+26, r25	; 0x1a
    1fdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a ef       	ldi	r20, 0xFA	; 250
    1fee:	54 e4       	ldi	r21, 0x44	; 68
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8d 8b       	std	Y+21, r24	; 0x15
    1ffa:	9e 8b       	std	Y+22, r25	; 0x16
    1ffc:	af 8b       	std	Y+23, r26	; 0x17
    1ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_4Bit_Init+0x4da>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_4Bit_Init+0x558>
	else if (__tmp > 65535)
    2022:	6d 89       	ldd	r22, Y+21	; 0x15
    2024:	7e 89       	ldd	r23, Y+22	; 0x16
    2026:	8f 89       	ldd	r24, Y+23	; 0x17
    2028:	98 8d       	ldd	r25, Y+24	; 0x18
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_4Bit_Init+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	69 8d       	ldd	r22, Y+25	; 0x19
    203c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_4Bit_Init+0x53a>
    2064:	88 ec       	ldi	r24, 0xC8	; 200
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	89 8b       	std	Y+17, r24	; 0x11
    206c:	89 89       	ldd	r24, Y+17	; 0x11
    206e:	9a 89       	ldd	r25, Y+18	; 0x12
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_4Bit_Init+0x528>
    2074:	9a 8b       	std	Y+18, r25	; 0x12
    2076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_4Bit_Init+0x51c>
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <LCD_4Bit_Init+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6d 89       	ldd	r22, Y+21	; 0x15
    208e:	7e 89       	ldd	r23, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	9c 89       	ldd	r25, Y+20	; 0x14
    20a4:	98 8b       	std	Y+16, r25	; 0x10
    20a6:	8f 87       	std	Y+15, r24	; 0x0f
    20a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20aa:	98 89       	ldd	r25, Y+16	; 0x10
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_4Bit_Init+0x564>
    20b0:	98 8b       	std	Y+16, r25	; 0x10
    20b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Command(0x01);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 ef       	ldi	r26, 0xF0	; 240
    20c0:	b1 e4       	ldi	r27, 0x41	; 65
    20c2:	8b 87       	std	Y+11, r24	; 0x0b
    20c4:	9c 87       	std	Y+12, r25	; 0x0c
    20c6:	ad 87       	std	Y+13, r26	; 0x0d
    20c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a ef       	ldi	r20, 0xFA	; 250
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8f 83       	std	Y+7, r24	; 0x07
    20e4:	98 87       	std	Y+8, r25	; 0x08
    20e6:	a9 87       	std	Y+9, r26	; 0x09
    20e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <LCD_4Bit_Init+0x5c4>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	3f c0       	rjmp	.+126    	; 0x218a <LCD_4Bit_Init+0x642>
	else if (__tmp > 65535)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <LCD_4Bit_Init+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_4Bit_Init+0x624>
    214e:	88 ec       	ldi	r24, 0xC8	; 200
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_4Bit_Init+0x612>
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <LCD_4Bit_Init+0x606>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <LCD_4Bit_Init+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6f 81       	ldd	r22, Y+7	; 0x07
    2178:	78 85       	ldd	r23, Y+8	; 0x08
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_4Bit_Init+0x64e>
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	LCD_Send_Command(0x06);
    219e:	86 e0       	ldi	r24, 0x06	; 6
    21a0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
	LCD_Send_Command(0x80);
    21a4:	80 e8       	ldi	r24, 0x80	; 128
    21a6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>

}
    21aa:	cc 5a       	subi	r28, 0xAC	; 172
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	08 95       	ret

000021c2 <lCD_SetPostion>:


void lCD_SetPostion (u8 line , u8 x)

{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <lCD_SetPostion+0x6>
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	6a 83       	std	Y+2, r22	; 0x02

		if ((line >= 2 ) || (x >=15)){
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <lCD_SetPostion+0x1a>
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	8f 30       	cpi	r24, 0x0F	; 15
    21da:	18 f0       	brcs	.+6      	; 0x21e2 <lCD_SetPostion+0x20>

			LCD_Send_Command (0x80);
    21dc:	80 e8       	ldi	r24, 0x80	; 128
    21de:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
		}

		if (line == 0){
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	88 23       	and	r24, r24
    21e6:	29 f4       	brne	.+10     	; 0x21f2 <lCD_SetPostion+0x30>

			LCD_Send_Command(0x80 + x);
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 58       	subi	r24, 0x80	; 128
    21ec:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <lCD_SetPostion+0x3e>

		}
		else if (line == 1) {
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	21 f4       	brne	.+8      	; 0x2200 <lCD_SetPostion+0x3e>

			LCD_Send_Command(0xC0 + x);
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 54       	subi	r24, 0x40	; 64
    21fc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>

		}
	}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <LCD_Send_String>:



void LCD_Send_String (u8 *PtrStr){
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <LCD_Send_String+0x6>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02
u8 StrIterator = 0  ;
    221a:	19 82       	std	Y+1, r1	; 0x01
    221c:	0e c0       	rjmp	.+28     	; 0x223a <LCD_Send_String+0x30>

	while (PtrStr [StrIterator] != '\0') {
		LCD_Send_Data(PtrStr[StrIterator]);
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	9b 81       	ldd	r25, Y+3	; 0x03
    2228:	fc 01       	movw	r30, r24
    222a:	e2 0f       	add	r30, r18
    222c:	f3 1f       	adc	r31, r19
    222e:	80 81       	ld	r24, Z
    2230:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
		StrIterator ++;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	89 83       	std	Y+1, r24	; 0x01


void LCD_Send_String (u8 *PtrStr){
u8 StrIterator = 0  ;

	while (PtrStr [StrIterator] != '\0') {
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	80 81       	ld	r24, Z
    224c:	88 23       	and	r24, r24
    224e:	39 f7       	brne	.-50     	; 0x221e <LCD_Send_String+0x14>
		LCD_Send_Data(PtrStr[StrIterator]);
		StrIterator ++;
	}

}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <LCD_WriteNumber>:

void LCD_WriteNumber(u16 Number)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	2e 97       	sbiw	r28, 0x0e	; 14
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	9e 87       	std	Y+14, r25	; 0x0e
    2272:	8d 87       	std	Y+13, r24	; 0x0d
	u8 i=0,arr[10],j;
    2274:	1a 82       	std	Y+2, r1	; 0x02

	if(Number==0)
    2276:	8d 85       	ldd	r24, Y+13	; 0x0d
    2278:	9e 85       	ldd	r25, Y+14	; 0x0e
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	11 f5       	brne	.+68     	; 0x22c2 <LCD_WriteNumber+0x66>
	LCD_Send_Data('0');
    227e:	80 e3       	ldi	r24, 0x30	; 48
    2280:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
    2284:	39 c0       	rjmp	.+114    	; 0x22f8 <LCD_WriteNumber+0x9c>
	else{
			while(Number )
			{
				arr[i]=Number%10+'0';
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	e8 2f       	mov	r30, r24
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	b9 01       	movw	r22, r18
    2296:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    229a:	28 2f       	mov	r18, r24
    229c:	20 5d       	subi	r18, 0xD0	; 208
    229e:	ce 01       	movw	r24, r28
    22a0:	03 96       	adiw	r24, 0x03	; 3
    22a2:	e8 0f       	add	r30, r24
    22a4:	f9 1f       	adc	r31, r25
    22a6:	20 83       	st	Z, r18
				Number/=10;
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	b9 01       	movw	r22, r18
    22b2:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 87       	std	Y+14, r25	; 0x0e
    22ba:	8d 87       	std	Y+13, r24	; 0x0d
				i++;
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0,arr[10],j;

	if(Number==0)
	LCD_Send_Data('0');
	else{
			while(Number )
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	f1 f6       	brne	.-68     	; 0x2286 <LCD_WriteNumber+0x2a>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i ;j>0 ;j--)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	11 c0       	rjmp	.+34     	; 0x22f2 <LCD_WriteNumber+0x96>
			{
				LCD_Send_Data(arr[j-1]);
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 01       	movw	r18, r24
    22d8:	21 50       	subi	r18, 0x01	; 1
    22da:	30 40       	sbci	r19, 0x00	; 0
    22dc:	ce 01       	movw	r24, r28
    22de:	03 96       	adiw	r24, 0x03	; 3
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	80 81       	ld	r24, Z
    22e8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i ;j>0 ;j--)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	81 50       	subi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	88 23       	and	r24, r24
    22f6:	61 f7       	brne	.-40     	; 0x22d0 <LCD_WriteNumber+0x74>
			{
				LCD_Send_Data(arr[j-1]);
			}
	   }
}
    22f8:	2e 96       	adiw	r28, 0x0e	; 14
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <LCD_WriteNumber2>:

void LCD_WriteNumber2(u16 Number)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LCD_WriteNumber2+0x6>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_Data(Number%10000/1000+'0');
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	20 e1       	ldi	r18, 0x10	; 16
    231e:	37 e2       	ldi	r19, 0x27	; 39
    2320:	b9 01       	movw	r22, r18
    2322:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2326:	28 ee       	ldi	r18, 0xE8	; 232
    2328:	33 e0       	ldi	r19, 0x03	; 3
    232a:	b9 01       	movw	r22, r18
    232c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2330:	cb 01       	movw	r24, r22
    2332:	80 5d       	subi	r24, 0xD0	; 208
    2334:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
	LCD_Send_Data(Number%1000/100+'0');
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	28 ee       	ldi	r18, 0xE8	; 232
    233e:	33 e0       	ldi	r19, 0x03	; 3
    2340:	b9 01       	movw	r22, r18
    2342:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2346:	24 e6       	ldi	r18, 0x64	; 100
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	b9 01       	movw	r22, r18
    234c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2350:	cb 01       	movw	r24, r22
    2352:	80 5d       	subi	r24, 0xD0	; 208
    2354:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
	LCD_Send_Data(Number%100/10+'0');
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	24 e6       	ldi	r18, 0x64	; 100
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	b9 01       	movw	r22, r18
    2362:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2370:	cb 01       	movw	r24, r22
    2372:	80 5d       	subi	r24, 0xD0	; 208
    2374:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
	LCD_Send_Data(Number%10/1+'0');
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	b9 01       	movw	r22, r18
    2382:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodhi4>
    2386:	80 5d       	subi	r24, 0xD0	; 208
    2388:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_Send_Data>
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <LCD_Clear>:
void LCD_Clear(void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62

	LCD_Send_Command(0x01);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_Send_Command>

}
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <Timer0_init>:

/*****************************************************************************************
 * Implementation
 *
 ****************************************************************************************/
void Timer0_init (Timer0_Mode Mode , Timer0_Prescaler Scaler, OC0_Mode mode){
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	27 97       	sbiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	6a 83       	std	Y+2, r22	; 0x02
    23c2:	4b 83       	std	Y+3, r20	; 0x03

	switch (Mode){
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	3f 83       	std	Y+7, r19	; 0x07
    23cc:	2e 83       	std	Y+6, r18	; 0x06
    23ce:	8e 81       	ldd	r24, Y+6	; 0x06
    23d0:	9f 81       	ldd	r25, Y+7	; 0x07
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	91 05       	cpc	r25, r1
    23d6:	21 f1       	breq	.+72     	; 0x2420 <Timer0_init+0x76>
    23d8:	2e 81       	ldd	r18, Y+6	; 0x06
    23da:	3f 81       	ldd	r19, Y+7	; 0x07
    23dc:	22 30       	cpi	r18, 0x02	; 2
    23de:	31 05       	cpc	r19, r1
    23e0:	2c f4       	brge	.+10     	; 0x23ec <Timer0_init+0x42>
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	61 f0       	breq	.+24     	; 0x2402 <Timer0_init+0x58>
    23ea:	46 c0       	rjmp	.+140    	; 0x2478 <Timer0_init+0xce>
    23ec:	2e 81       	ldd	r18, Y+6	; 0x06
    23ee:	3f 81       	ldd	r19, Y+7	; 0x07
    23f0:	22 30       	cpi	r18, 0x02	; 2
    23f2:	31 05       	cpc	r19, r1
    23f4:	21 f1       	breq	.+72     	; 0x243e <Timer0_init+0x94>
    23f6:	8e 81       	ldd	r24, Y+6	; 0x06
    23f8:	9f 81       	ldd	r25, Y+7	; 0x07
    23fa:	83 30       	cpi	r24, 0x03	; 3
    23fc:	91 05       	cpc	r25, r1
    23fe:	71 f1       	breq	.+92     	; 0x245c <Timer0_init+0xb2>
    2400:	3b c0       	rjmp	.+118    	; 0x2478 <Timer0_init+0xce>

	case Timer0_NormalMode :

		Clear_Bit(Timer0_TCCR0,WGM00);
    2402:	a3 e5       	ldi	r26, 0x53	; 83
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e3 e5       	ldi	r30, 0x53	; 83
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7b       	andi	r24, 0xBF	; 191
    240e:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    2410:	a3 e5       	ldi	r26, 0x53	; 83
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e3 e5       	ldi	r30, 0x53	; 83
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	87 7f       	andi	r24, 0xF7	; 247
    241c:	8c 93       	st	X, r24
    241e:	2c c0       	rjmp	.+88     	; 0x2478 <Timer0_init+0xce>

		break ;

	case Timer0_PWM_PhaseCorrect :

		Set_Bit(Timer0_TCCR0 , WGM00);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	80 64       	ori	r24, 0x40	; 64
    242c:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
    242e:	a3 e5       	ldi	r26, 0x53	; 83
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e3 e5       	ldi	r30, 0x53	; 83
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	87 7f       	andi	r24, 0xF7	; 247
    243a:	8c 93       	st	X, r24
    243c:	1d c0       	rjmp	.+58     	; 0x2478 <Timer0_init+0xce>

		break;

	case Timer0_CTC :

		Clear_Bit(Timer0_TCCR0 , WGM00);
    243e:	a3 e5       	ldi	r26, 0x53	; 83
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e3 e5       	ldi	r30, 0x53	; 83
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8f 7b       	andi	r24, 0xBF	; 191
    244a:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , WGM01);
    244c:	a3 e5       	ldi	r26, 0x53	; 83
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e3 e5       	ldi	r30, 0x53	; 83
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	88 60       	ori	r24, 0x08	; 8
    2458:	8c 93       	st	X, r24
    245a:	0e c0       	rjmp	.+28     	; 0x2478 <Timer0_init+0xce>

		break;

	case Timer0_FastPWM :

		 Set_Bit(Timer0_TCCR0 , WGM00);
    245c:	a3 e5       	ldi	r26, 0x53	; 83
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 64       	ori	r24, 0x40	; 64
    2468:	8c 93       	st	X, r24
		 Set_Bit(Timer0_TCCR0 , WGM01);
    246a:	a3 e5       	ldi	r26, 0x53	; 83
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e3 e5       	ldi	r30, 0x53	; 83
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	88 60       	ori	r24, 0x08	; 8
    2476:	8c 93       	st	X, r24

		break ;
	}
	/**Setting the Pre-scaler of the Clk**/

	Timer0_TCCR0 &= 0xF8;
    2478:	a3 e5       	ldi	r26, 0x53	; 83
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e3 e5       	ldi	r30, 0x53	; 83
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	88 7f       	andi	r24, 0xF8	; 248
    2484:	8c 93       	st	X, r24
	Timer0_TCCR0 |= Scaler;
    2486:	a3 e5       	ldi	r26, 0x53	; 83
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e3 e5       	ldi	r30, 0x53	; 83
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	90 81       	ld	r25, Z
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	89 2b       	or	r24, r25
    2494:	8c 93       	st	X, r24

	switch (mode) {
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	3d 83       	std	Y+5, r19	; 0x05
    249e:	2c 83       	std	Y+4, r18	; 0x04
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	91 05       	cpc	r25, r1
    24a8:	21 f1       	breq	.+72     	; 0x24f2 <Timer0_init+0x148>
    24aa:	2c 81       	ldd	r18, Y+4	; 0x04
    24ac:	3d 81       	ldd	r19, Y+5	; 0x05
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	2c f4       	brge	.+10     	; 0x24be <Timer0_init+0x114>
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	61 f0       	breq	.+24     	; 0x24d4 <Timer0_init+0x12a>
    24bc:	46 c0       	rjmp	.+140    	; 0x254a <Timer0_init+0x1a0>
    24be:	2c 81       	ldd	r18, Y+4	; 0x04
    24c0:	3d 81       	ldd	r19, Y+5	; 0x05
    24c2:	22 30       	cpi	r18, 0x02	; 2
    24c4:	31 05       	cpc	r19, r1
    24c6:	21 f1       	breq	.+72     	; 0x2510 <Timer0_init+0x166>
    24c8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ca:	9d 81       	ldd	r25, Y+5	; 0x05
    24cc:	83 30       	cpi	r24, 0x03	; 3
    24ce:	91 05       	cpc	r25, r1
    24d0:	71 f1       	breq	.+92     	; 0x252e <Timer0_init+0x184>
    24d2:	3b c0       	rjmp	.+118    	; 0x254a <Timer0_init+0x1a0>

	case OC0_Disconnected:

		Clear_Bit(Timer0_TCCR0 , COM00);
    24d4:	a3 e5       	ldi	r26, 0x53	; 83
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e3 e5       	ldi	r30, 0x53	; 83
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8f 7e       	andi	r24, 0xEF	; 239
    24e0:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    24e2:	a3 e5       	ldi	r26, 0x53	; 83
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e3 e5       	ldi	r30, 0x53	; 83
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	8c 93       	st	X, r24
    24f0:	2c c0       	rjmp	.+88     	; 0x254a <Timer0_init+0x1a0>

		break;

	case Toggle_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    24f2:	a3 e5       	ldi	r26, 0x53	; 83
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e3 e5       	ldi	r30, 0x53	; 83
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	80 61       	ori	r24, 0x10	; 16
    24fe:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
    2500:	a3 e5       	ldi	r26, 0x53	; 83
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e3 e5       	ldi	r30, 0x53	; 83
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	8f 7d       	andi	r24, 0xDF	; 223
    250c:	8c 93       	st	X, r24
    250e:	1d c0       	rjmp	.+58     	; 0x254a <Timer0_init+0x1a0>

		break ;

	case NonInverting_OC0 :

		Clear_Bit(Timer0_TCCR0 , COM00);
    2510:	a3 e5       	ldi	r26, 0x53	; 83
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e3 e5       	ldi	r30, 0x53	; 83
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8f 7e       	andi	r24, 0xEF	; 239
    251c:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    251e:	a3 e5       	ldi	r26, 0x53	; 83
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e3 e5       	ldi	r30, 0x53	; 83
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	80 62       	ori	r24, 0x20	; 32
    252a:	8c 93       	st	X, r24
    252c:	0e c0       	rjmp	.+28     	; 0x254a <Timer0_init+0x1a0>

		break;

	case Inverting_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
    252e:	a3 e5       	ldi	r26, 0x53	; 83
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e3 e5       	ldi	r30, 0x53	; 83
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 61       	ori	r24, 0x10	; 16
    253a:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
    253c:	a3 e5       	ldi	r26, 0x53	; 83
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e3 e5       	ldi	r30, 0x53	; 83
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 62       	ori	r24, 0x20	; 32
    2548:	8c 93       	st	X, r24

		break;
	}
}
    254a:	27 96       	adiw	r28, 0x07	; 7
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <Timer0_OVF_Enable>:

void Timer0_OVF_Enable (void){
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_TOIE0);
    2564:	a9 e5       	ldi	r26, 0x59	; 89
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e9 e5       	ldi	r30, 0x59	; 89
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	81 60       	ori	r24, 0x01	; 1
    2570:	8c 93       	st	X, r24
}
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <Timer0_OVF_Disable>:

void Timer0_OVF_Disable (void){
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_TOIE0);
    2580:	a9 e5       	ldi	r26, 0x59	; 89
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e9 e5       	ldi	r30, 0x59	; 89
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	8e 7f       	andi	r24, 0xFE	; 254
    258c:	8c 93       	st	X, r24
}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <Timer0_OC_Enable>:

void Timer0_OC_Enable (void){
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_OCIE0);
    259c:	a9 e5       	ldi	r26, 0x59	; 89
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e9 e5       	ldi	r30, 0x59	; 89
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	82 60       	ori	r24, 0x02	; 2
    25a8:	8c 93       	st	X, r24

}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Timer0_OC_Disable>:

void Timer0_OC_Disable (void){
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_OCIE0);
    25b8:	a9 e5       	ldi	r26, 0x59	; 89
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e9 e5       	ldi	r30, 0x59	; 89
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8d 7f       	andi	r24, 0xFD	; 253
    25c4:	8c 93       	st	X, r24

}
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <Timer0_OVF_Callback>:
/********************************************************************************************
 * Callback Functions
 ********************************************************************************************/
void Timer0_OVF_Callback (void (* Local_PTR)(void ) ){
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <Timer0_OVF_Callback+0x6>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OVF = Local_PTR;
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	90 93 6f 00 	sts	0x006F, r25
    25e2:	80 93 6e 00 	sts	0x006E, r24
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <Timer0_OC_CallBack>:

void Timer0_OC_CallBack (void (* Local_PTR)(void)) {
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <Timer0_OC_CallBack+0x6>
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OC = Local_PTR;
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	90 93 71 00 	sts	0x0071, r25
    2606:	80 93 70 00 	sts	0x0070, r24
}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <__vector_11>:
 * Timer0 ISR
 *********************************************************************************************/


void __vector_11(void)__attribute__((signal));
void __vector_11(){
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OVF != Null){
    263e:	80 91 6e 00 	lds	r24, 0x006E
    2642:	90 91 6f 00 	lds	r25, 0x006F
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	29 f0       	breq	.+10     	; 0x2654 <__vector_11+0x40>

		Timer0_OVF ();
    264a:	e0 91 6e 00 	lds	r30, 0x006E
    264e:	f0 91 6f 00 	lds	r31, 0x006F
    2652:	09 95       	icall
	}
	}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	ff 91       	pop	r31
    265a:	ef 91       	pop	r30
    265c:	bf 91       	pop	r27
    265e:	af 91       	pop	r26
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	7f 91       	pop	r23
    2666:	6f 91       	pop	r22
    2668:	5f 91       	pop	r21
    266a:	4f 91       	pop	r20
    266c:	3f 91       	pop	r19
    266e:	2f 91       	pop	r18
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(){
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OC!= Null){
    26a4:	80 91 70 00 	lds	r24, 0x0070
    26a8:	90 91 71 00 	lds	r25, 0x0071
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	29 f0       	breq	.+10     	; 0x26ba <__vector_10+0x40>

		Timer0_OC ();
    26b0:	e0 91 70 00 	lds	r30, 0x0070
    26b4:	f0 91 71 00 	lds	r31, 0x0071
    26b8:	09 95       	icall
	}
	}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <ServoPWM_CTRL>:
/******************************************************************************************************
 *
 * ISR Function
 *****************************************************************************************************/

void ServoPWM_CTRL (void ){
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62

	static int Counter;
	Counter++;
    26e8:	80 91 72 00 	lds	r24, 0x0072
    26ec:	90 91 73 00 	lds	r25, 0x0073
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	90 93 73 00 	sts	0x0073, r25
    26f6:	80 93 72 00 	sts	0x0072, r24

	if (Counter == 20){
    26fa:	80 91 72 00 	lds	r24, 0x0072
    26fe:	90 91 73 00 	lds	r25, 0x0073
    2702:	84 31       	cpi	r24, 0x14	; 20
    2704:	91 05       	cpc	r25, r1
    2706:	31 f4       	brne	.+12     	; 0x2714 <ServoPWM_CTRL+0x34>

		Dio_u8_SetPinVal(Group_A, PIN0, Dio_PinLow);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>
    2712:	0c c0       	rjmp	.+24     	; 0x272c <ServoPWM_CTRL+0x4c>


	}

	else if (Counter == 200){
    2714:	80 91 72 00 	lds	r24, 0x0072
    2718:	90 91 73 00 	lds	r25, 0x0073
    271c:	88 3c       	cpi	r24, 0xC8	; 200
    271e:	91 05       	cpc	r25, r1
    2720:	29 f4       	brne	.+10     	; 0x272c <ServoPWM_CTRL+0x4c>
		Dio_u8_SetPinVal(Group_A, PIN0, Dio_PinHigh);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	}

}
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <main>:


int main (void){
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	/*Timer0 Init */

	Dio_u8_SetPinDir(Group_A, PIN0, Dio_PinOutput);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 8b 06 	call	0xd16	; 0xd16 <Dio_u8_SetPinDir>





	Dio_u8_SetPinVal(Group_A, PIN0, Dio_PinHigh);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 72 07 	call	0xee4	; 0xee4 <Dio_u8_SetPinVal>

	/**************** Timer ************************/

	Gobal_interrput_Enbale(); 										   // Enable Global Interrupt
    274e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Gobal_interrput_Enbale>
	Timer0_OC_Enable();										      // Compare Match Interrupt Enable
    2752:	0e 94 ca 12 	call	0x2594	; 0x2594 <Timer0_OC_Enable>

	Timer0_OCR0 = 99;
    2756:	ec e5       	ldi	r30, 0x5C	; 92
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	83 e6       	ldi	r24, 0x63	; 99
    275c:	80 83       	st	Z, r24
	Timer0_init( Timer0_CTC , _CLK8_, OC0_Disconnected);    // Init Timer0 Normal mode and F-cpu / 8 Pre-sacler
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 d5 11 	call	0x23aa	; 0x23aa <Timer0_init>
	Timer0_OC_CallBack(ServoPWM_CTRL);							  // Pass the address of the function to the ISR
    2768:	80 e7       	ldi	r24, 0x70	; 112
    276a:	93 e1       	ldi	r25, 0x13	; 19
    276c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Timer0_OC_CallBack>
    2770:	ff cf       	rjmp	.-2      	; 0x2770 <main+0x3e>

00002772 <__udivmodhi4>:
    2772:	aa 1b       	sub	r26, r26
    2774:	bb 1b       	sub	r27, r27
    2776:	51 e1       	ldi	r21, 0x11	; 17
    2778:	07 c0       	rjmp	.+14     	; 0x2788 <__udivmodhi4_ep>

0000277a <__udivmodhi4_loop>:
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	a6 17       	cp	r26, r22
    2780:	b7 07       	cpc	r27, r23
    2782:	10 f0       	brcs	.+4      	; 0x2788 <__udivmodhi4_ep>
    2784:	a6 1b       	sub	r26, r22
    2786:	b7 0b       	sbc	r27, r23

00002788 <__udivmodhi4_ep>:
    2788:	88 1f       	adc	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	5a 95       	dec	r21
    278e:	a9 f7       	brne	.-22     	; 0x277a <__udivmodhi4_loop>
    2790:	80 95       	com	r24
    2792:	90 95       	com	r25
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	08 95       	ret

0000279a <__prologue_saves__>:
    279a:	2f 92       	push	r2
    279c:	3f 92       	push	r3
    279e:	4f 92       	push	r4
    27a0:	5f 92       	push	r5
    27a2:	6f 92       	push	r6
    27a4:	7f 92       	push	r7
    27a6:	8f 92       	push	r8
    27a8:	9f 92       	push	r9
    27aa:	af 92       	push	r10
    27ac:	bf 92       	push	r11
    27ae:	cf 92       	push	r12
    27b0:	df 92       	push	r13
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	ca 1b       	sub	r28, r26
    27c4:	db 0b       	sbc	r29, r27
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	09 94       	ijmp

000027d2 <__epilogue_restores__>:
    27d2:	2a 88       	ldd	r2, Y+18	; 0x12
    27d4:	39 88       	ldd	r3, Y+17	; 0x11
    27d6:	48 88       	ldd	r4, Y+16	; 0x10
    27d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27da:	6e 84       	ldd	r6, Y+14	; 0x0e
    27dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    27de:	8c 84       	ldd	r8, Y+12	; 0x0c
    27e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27e4:	b9 84       	ldd	r11, Y+9	; 0x09
    27e6:	c8 84       	ldd	r12, Y+8	; 0x08
    27e8:	df 80       	ldd	r13, Y+7	; 0x07
    27ea:	ee 80       	ldd	r14, Y+6	; 0x06
    27ec:	fd 80       	ldd	r15, Y+5	; 0x05
    27ee:	0c 81       	ldd	r16, Y+4	; 0x04
    27f0:	1b 81       	ldd	r17, Y+3	; 0x03
    27f2:	aa 81       	ldd	r26, Y+2	; 0x02
    27f4:	b9 81       	ldd	r27, Y+1	; 0x01
    27f6:	ce 0f       	add	r28, r30
    27f8:	d1 1d       	adc	r29, r1
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	ed 01       	movw	r28, r26
    2806:	08 95       	ret

00002808 <_exit>:
    2808:	f8 94       	cli

0000280a <__stop_program>:
    280a:	ff cf       	rjmp	.-2      	; 0x280a <__stop_program>
