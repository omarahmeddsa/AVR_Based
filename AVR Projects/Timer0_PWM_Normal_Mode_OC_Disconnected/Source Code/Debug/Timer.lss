
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000d16  2**0
                  ALLOC
  2 .stab         00000f60  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b9b  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2f 06 	call	0xc5e	; 0xc5e <main>
  74:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Gobal_interrput_Enbale>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void Gobal_interrput_Enbale (void )
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,GobalInterrput_Pin);
  84:	af e5       	ldi	r26, 0x5F	; 95
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ef e5       	ldi	r30, 0x5F	; 95
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <Gobal_interrput_Disable>:

void Gobal_interrput_Disable (void )
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,GobalInterrput_Pin);
  a0:	af e5       	ldi	r26, 0x5F	; 95
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <Dio_u8_SetPortDir>:
void Dio_u8_SetPortDir(u8 Copy_PortID, u8 Copy_PortDirc){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <Dio_u8_SetPortDir+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <Dio_u8_SetPortDir+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	90 f5       	brcc	.+100    	; 0x12e <Dio_u8_SetPortDir+0x7a>

		switch (Copy_PortID){
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	28 2f       	mov	r18, r24
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	3c 83       	std	Y+4, r19	; 0x04
  d2:	2b 83       	std	Y+3, r18	; 0x03
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	9c 81       	ldd	r25, Y+4	; 0x04
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	d1 f0       	breq	.+52     	; 0x112 <Dio_u8_SetPortDir+0x5e>
  de:	2b 81       	ldd	r18, Y+3	; 0x03
  e0:	3c 81       	ldd	r19, Y+4	; 0x04
  e2:	22 30       	cpi	r18, 0x02	; 2
  e4:	31 05       	cpc	r19, r1
  e6:	2c f4       	brge	.+10     	; 0xf2 <Dio_u8_SetPortDir+0x3e>
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	61 f0       	breq	.+24     	; 0x108 <Dio_u8_SetPortDir+0x54>
  f0:	1e c0       	rjmp	.+60     	; 0x12e <Dio_u8_SetPortDir+0x7a>
  f2:	2b 81       	ldd	r18, Y+3	; 0x03
  f4:	3c 81       	ldd	r19, Y+4	; 0x04
  f6:	22 30       	cpi	r18, 0x02	; 2
  f8:	31 05       	cpc	r19, r1
  fa:	81 f0       	breq	.+32     	; 0x11c <Dio_u8_SetPortDir+0x68>
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	9c 81       	ldd	r25, Y+4	; 0x04
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	91 05       	cpc	r25, r1
 104:	81 f0       	breq	.+32     	; 0x126 <Dio_u8_SetPortDir+0x72>
 106:	13 c0       	rjmp	.+38     	; 0x12e <Dio_u8_SetPortDir+0x7a>

		case Group_A :
			DIO_U8_DDRA = Copy_PortDirc;
 108:	ea e3       	ldi	r30, 0x3A	; 58
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	80 83       	st	Z, r24
 110:	0e c0       	rjmp	.+28     	; 0x12e <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_B :
			DIO_U8_DDRB = Copy_PortDirc;
 112:	e7 e3       	ldi	r30, 0x37	; 55
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	80 83       	st	Z, r24
 11a:	09 c0       	rjmp	.+18     	; 0x12e <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_C :
			DIO_U8_DDRC = Copy_PortDirc;
 11c:	e4 e3       	ldi	r30, 0x34	; 52
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	80 83       	st	Z, r24
 124:	04 c0       	rjmp	.+8      	; 0x12e <Dio_u8_SetPortDir+0x7a>
			break;

		case Group_D :
			DIO_U8_DDRD = Copy_PortDirc;
 126:	e1 e3       	ldi	r30, 0x31	; 49
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	80 83       	st	Z, r24
			break;
		}
	}
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <Dio_u8_SetPortValue>:

void Dio_u8_SetPortValue(u8 Copy_PortID,u8 Copy_PortValue) {
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	00 d0       	rcall	.+0      	; 0x142 <Dio_u8_SetPortValue+0x6>
 142:	00 d0       	rcall	.+0      	; 0x144 <Dio_u8_SetPortValue+0x8>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	6a 83       	std	Y+2, r22	; 0x02

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	84 30       	cpi	r24, 0x04	; 4
 150:	90 f5       	brcc	.+100    	; 0x1b6 <Dio_u8_SetPortValue+0x7a>

		switch (Copy_PortID){
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	3c 83       	std	Y+4, r19	; 0x04
 15a:	2b 83       	std	Y+3, r18	; 0x03
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	d1 f0       	breq	.+52     	; 0x19a <Dio_u8_SetPortValue+0x5e>
 166:	2b 81       	ldd	r18, Y+3	; 0x03
 168:	3c 81       	ldd	r19, Y+4	; 0x04
 16a:	22 30       	cpi	r18, 0x02	; 2
 16c:	31 05       	cpc	r19, r1
 16e:	2c f4       	brge	.+10     	; 0x17a <Dio_u8_SetPortValue+0x3e>
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	61 f0       	breq	.+24     	; 0x190 <Dio_u8_SetPortValue+0x54>
 178:	1e c0       	rjmp	.+60     	; 0x1b6 <Dio_u8_SetPortValue+0x7a>
 17a:	2b 81       	ldd	r18, Y+3	; 0x03
 17c:	3c 81       	ldd	r19, Y+4	; 0x04
 17e:	22 30       	cpi	r18, 0x02	; 2
 180:	31 05       	cpc	r19, r1
 182:	81 f0       	breq	.+32     	; 0x1a4 <Dio_u8_SetPortValue+0x68>
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	91 05       	cpc	r25, r1
 18c:	81 f0       	breq	.+32     	; 0x1ae <Dio_u8_SetPortValue+0x72>
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <Dio_u8_SetPortValue+0x7a>

		case Group_A :
			DIO_U8_PORTA = Copy_PortValue;
 190:	eb e3       	ldi	r30, 0x3B	; 59
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	80 83       	st	Z, r24
 198:	0e c0       	rjmp	.+28     	; 0x1b6 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_B :
			DIO_U8_PORTB = Copy_PortValue;
 19a:	e8 e3       	ldi	r30, 0x38	; 56
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	80 83       	st	Z, r24
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_C :
			DIO_U8_PORTC = Copy_PortValue;
 1a4:	e5 e3       	ldi	r30, 0x35	; 53
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	80 83       	st	Z, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <Dio_u8_SetPortValue+0x7a>
			break;

		case Group_D :
			DIO_U8_PORTD = Copy_PortValue;
 1ae:	e2 e3       	ldi	r30, 0x32	; 50
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	80 83       	st	Z, r24
			break;
		}
	}
}
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <Dio_u8_GetportValue>:

u8 Dio_u8_GetportValue(u8 Copy_PortID) {
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <Dio_u8_GetportValue+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <Dio_u8_GetportValue+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Portvalue;

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	84 30       	cpi	r24, 0x04	; 4
 1d6:	90 f5       	brcc	.+100    	; 0x23c <Dio_u8_GetportValue+0x78>


		switch (Copy_PortID) {
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	3c 83       	std	Y+4, r19	; 0x04
 1e0:	2b 83       	std	Y+3, r18	; 0x03
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	d1 f0       	breq	.+52     	; 0x220 <Dio_u8_GetportValue+0x5c>
 1ec:	2b 81       	ldd	r18, Y+3	; 0x03
 1ee:	3c 81       	ldd	r19, Y+4	; 0x04
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	2c f4       	brge	.+10     	; 0x200 <Dio_u8_GetportValue+0x3c>
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	9c 81       	ldd	r25, Y+4	; 0x04
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	61 f0       	breq	.+24     	; 0x216 <Dio_u8_GetportValue+0x52>
 1fe:	1e c0       	rjmp	.+60     	; 0x23c <Dio_u8_GetportValue+0x78>
 200:	2b 81       	ldd	r18, Y+3	; 0x03
 202:	3c 81       	ldd	r19, Y+4	; 0x04
 204:	22 30       	cpi	r18, 0x02	; 2
 206:	31 05       	cpc	r19, r1
 208:	81 f0       	breq	.+32     	; 0x22a <Dio_u8_GetportValue+0x66>
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	9c 81       	ldd	r25, Y+4	; 0x04
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	91 05       	cpc	r25, r1
 212:	81 f0       	breq	.+32     	; 0x234 <Dio_u8_GetportValue+0x70>
 214:	13 c0       	rjmp	.+38     	; 0x23c <Dio_u8_GetportValue+0x78>

		case Group_A:
			Portvalue= DIO_U8_PORTA;
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	0e c0       	rjmp	.+28     	; 0x23c <Dio_u8_GetportValue+0x78>
			break;

		case Group_B:
			Portvalue= DIO_U8_PORTB;
 220:	e8 e3       	ldi	r30, 0x38	; 56
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	09 c0       	rjmp	.+18     	; 0x23c <Dio_u8_GetportValue+0x78>
			break;

		case Group_C:
			Portvalue= DIO_U8_PORTC;
 22a:	e5 e3       	ldi	r30, 0x35	; 53
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	04 c0       	rjmp	.+8      	; 0x23c <Dio_u8_GetportValue+0x78>
			break;

		case Group_D:
			Portvalue= DIO_U8_PORTD;
 234:	e2 e3       	ldi	r30, 0x32	; 50
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Portvalue ;
 23c:	89 81       	ldd	r24, Y+1	; 0x01
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <Dio_u8_SetPinDir>:


void Dio_u8_SetPinDir(u8 Copy_PortID,u8 Copy_Bit_No ,u8 CopyPinDirc){
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	00 d0       	rcall	.+0      	; 0x252 <Dio_u8_SetPinDir+0x6>
 252:	00 d0       	rcall	.+0      	; 0x254 <Dio_u8_SetPinDir+0x8>
 254:	0f 92       	push	r0
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	6a 83       	std	Y+2, r22	; 0x02
 25e:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	84 30       	cpi	r24, 0x04	; 4
 264:	08 f0       	brcs	.+2      	; 0x268 <Dio_u8_SetPinDir+0x1c>
 266:	d1 c0       	rjmp	.+418    	; 0x40a <Dio_u8_SetPinDir+0x1be>

		switch (Copy_PortID){
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	3d 83       	std	Y+5, r19	; 0x05
 270:	2c 83       	std	Y+4, r18	; 0x04
 272:	8c 81       	ldd	r24, Y+4	; 0x04
 274:	9d 81       	ldd	r25, Y+5	; 0x05
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	09 f4       	brne	.+2      	; 0x27e <Dio_u8_SetPinDir+0x32>
 27c:	43 c0       	rjmp	.+134    	; 0x304 <Dio_u8_SetPinDir+0xb8>
 27e:	2c 81       	ldd	r18, Y+4	; 0x04
 280:	3d 81       	ldd	r19, Y+5	; 0x05
 282:	22 30       	cpi	r18, 0x02	; 2
 284:	31 05       	cpc	r19, r1
 286:	2c f4       	brge	.+10     	; 0x292 <Dio_u8_SetPinDir+0x46>
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	9d 81       	ldd	r25, Y+5	; 0x05
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	71 f0       	breq	.+28     	; 0x2ac <Dio_u8_SetPinDir+0x60>
 290:	bc c0       	rjmp	.+376    	; 0x40a <Dio_u8_SetPinDir+0x1be>
 292:	2c 81       	ldd	r18, Y+4	; 0x04
 294:	3d 81       	ldd	r19, Y+5	; 0x05
 296:	22 30       	cpi	r18, 0x02	; 2
 298:	31 05       	cpc	r19, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <Dio_u8_SetPinDir+0x52>
 29c:	5f c0       	rjmp	.+190    	; 0x35c <Dio_u8_SetPinDir+0x110>
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	9d 81       	ldd	r25, Y+5	; 0x05
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	91 05       	cpc	r25, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <Dio_u8_SetPinDir+0x5e>
 2a8:	85 c0       	rjmp	.+266    	; 0x3b4 <Dio_u8_SetPinDir+0x168>
 2aa:	af c0       	rjmp	.+350    	; 0x40a <Dio_u8_SetPinDir+0x1be>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_Bit_No,CopyPinDirc);
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	a1 f4       	brne	.+40     	; 0x2da <Dio_u8_SetPinDir+0x8e>
 2b2:	aa e3       	ldi	r26, 0x3A	; 58
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	ea e3       	ldi	r30, 0x3A	; 58
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	48 2f       	mov	r20, r24
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Dio_u8_SetPinDir+0x84>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Dio_u8_SetPinDir+0x80>
 2d4:	84 2b       	or	r24, r20
 2d6:	8c 93       	st	X, r24
 2d8:	98 c0       	rjmp	.+304    	; 0x40a <Dio_u8_SetPinDir+0x1be>
 2da:	aa e3       	ldi	r26, 0x3A	; 58
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	ea e3       	ldi	r30, 0x3A	; 58
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	48 2f       	mov	r20, r24
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 2e       	mov	r0, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Dio_u8_SetPinDir+0xac>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Dio_u8_SetPinDir+0xa8>
 2fc:	80 95       	com	r24
 2fe:	84 23       	and	r24, r20
 300:	8c 93       	st	X, r24
 302:	83 c0       	rjmp	.+262    	; 0x40a <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_Bit_No,CopyPinDirc);
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	a1 f4       	brne	.+40     	; 0x332 <Dio_u8_SetPinDir+0xe6>
 30a:	a7 e3       	ldi	r26, 0x37	; 55
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e7 e3       	ldi	r30, 0x37	; 55
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <Dio_u8_SetPinDir+0xdc>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <Dio_u8_SetPinDir+0xd8>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	6c c0       	rjmp	.+216    	; 0x40a <Dio_u8_SetPinDir+0x1be>
 332:	a7 e3       	ldi	r26, 0x37	; 55
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e7 e3       	ldi	r30, 0x37	; 55
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <Dio_u8_SetPinDir+0x104>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <Dio_u8_SetPinDir+0x100>
 354:	80 95       	com	r24
 356:	84 23       	and	r24, r20
 358:	8c 93       	st	X, r24
 35a:	57 c0       	rjmp	.+174    	; 0x40a <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_Bit_No,CopyPinDirc);
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	a1 f4       	brne	.+40     	; 0x38a <Dio_u8_SetPinDir+0x13e>
 362:	a4 e3       	ldi	r26, 0x34	; 52
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e4 e3       	ldi	r30, 0x34	; 52
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Dio_u8_SetPinDir+0x134>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <Dio_u8_SetPinDir+0x130>
 384:	84 2b       	or	r24, r20
 386:	8c 93       	st	X, r24
 388:	40 c0       	rjmp	.+128    	; 0x40a <Dio_u8_SetPinDir+0x1be>
 38a:	a4 e3       	ldi	r26, 0x34	; 52
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e4 e3       	ldi	r30, 0x34	; 52
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	48 2f       	mov	r20, r24
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Dio_u8_SetPinDir+0x15c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Dio_u8_SetPinDir+0x158>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	2b c0       	rjmp	.+86     	; 0x40a <Dio_u8_SetPinDir+0x1be>
			break;

		case Group_D :
			Assign_Bit(DIO_U8_DDRD,Copy_Bit_No,CopyPinDirc);
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	a1 f4       	brne	.+40     	; 0x3e2 <Dio_u8_SetPinDir+0x196>
 3ba:	a1 e3       	ldi	r26, 0x31	; 49
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	e1 e3       	ldi	r30, 0x31	; 49
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	48 2f       	mov	r20, r24
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 2e       	mov	r0, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <Dio_u8_SetPinDir+0x18c>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <Dio_u8_SetPinDir+0x188>
 3dc:	84 2b       	or	r24, r20
 3de:	8c 93       	st	X, r24
 3e0:	14 c0       	rjmp	.+40     	; 0x40a <Dio_u8_SetPinDir+0x1be>
 3e2:	a1 e3       	ldi	r26, 0x31	; 49
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	e1 e3       	ldi	r30, 0x31	; 49
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	48 2f       	mov	r20, r24
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 2e       	mov	r0, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <Dio_u8_SetPinDir+0x1b4>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <Dio_u8_SetPinDir+0x1b0>
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8c 93       	st	X, r24
			break;
		}
	}
}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	08 95       	ret

0000041a <Dio_u8_SetPinVal>:


void Dio_u8_SetPinVal(u8 Copy_PortID,u8 Copy_Bit_No,u8 CopyPinVal){
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	00 d0       	rcall	.+0      	; 0x420 <Dio_u8_SetPinVal+0x6>
 420:	00 d0       	rcall	.+0      	; 0x422 <Dio_u8_SetPinVal+0x8>
 422:	0f 92       	push	r0
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	6a 83       	std	Y+2, r22	; 0x02
 42c:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	08 f0       	brcs	.+2      	; 0x436 <Dio_u8_SetPinVal+0x1c>
 434:	d1 c0       	rjmp	.+418    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>

		switch (Copy_PortID){
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	3d 83       	std	Y+5, r19	; 0x05
 43e:	2c 83       	std	Y+4, r18	; 0x04
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	9d 81       	ldd	r25, Y+5	; 0x05
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 05       	cpc	r25, r1
 448:	09 f4       	brne	.+2      	; 0x44c <Dio_u8_SetPinVal+0x32>
 44a:	43 c0       	rjmp	.+134    	; 0x4d2 <Dio_u8_SetPinVal+0xb8>
 44c:	2c 81       	ldd	r18, Y+4	; 0x04
 44e:	3d 81       	ldd	r19, Y+5	; 0x05
 450:	22 30       	cpi	r18, 0x02	; 2
 452:	31 05       	cpc	r19, r1
 454:	2c f4       	brge	.+10     	; 0x460 <Dio_u8_SetPinVal+0x46>
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	9d 81       	ldd	r25, Y+5	; 0x05
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	71 f0       	breq	.+28     	; 0x47a <Dio_u8_SetPinVal+0x60>
 45e:	bc c0       	rjmp	.+376    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
 460:	2c 81       	ldd	r18, Y+4	; 0x04
 462:	3d 81       	ldd	r19, Y+5	; 0x05
 464:	22 30       	cpi	r18, 0x02	; 2
 466:	31 05       	cpc	r19, r1
 468:	09 f4       	brne	.+2      	; 0x46c <Dio_u8_SetPinVal+0x52>
 46a:	5f c0       	rjmp	.+190    	; 0x52a <Dio_u8_SetPinVal+0x110>
 46c:	8c 81       	ldd	r24, Y+4	; 0x04
 46e:	9d 81       	ldd	r25, Y+5	; 0x05
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <Dio_u8_SetPinVal+0x5e>
 476:	85 c0       	rjmp	.+266    	; 0x582 <Dio_u8_SetPinVal+0x168>
 478:	af c0       	rjmp	.+350    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
		case Group_A:
			Assign_Bit(DIO_U8_PORTA,Copy_Bit_No,CopyPinVal);
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	a1 f4       	brne	.+40     	; 0x4a8 <Dio_u8_SetPinVal+0x8e>
 480:	ab e3       	ldi	r26, 0x3B	; 59
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	eb e3       	ldi	r30, 0x3B	; 59
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <Dio_u8_SetPinVal+0x84>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <Dio_u8_SetPinVal+0x80>
 4a2:	84 2b       	or	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	98 c0       	rjmp	.+304    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
 4a8:	ab e3       	ldi	r26, 0x3B	; 59
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	eb e3       	ldi	r30, 0x3B	; 59
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <Dio_u8_SetPinVal+0xac>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <Dio_u8_SetPinVal+0xa8>
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	83 c0       	rjmp	.+262    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_B:
			Assign_Bit(DIO_U8_PORTB,Copy_Bit_No,CopyPinVal);
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	a1 f4       	brne	.+40     	; 0x500 <Dio_u8_SetPinVal+0xe6>
 4d8:	a8 e3       	ldi	r26, 0x38	; 56
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e8 e3       	ldi	r30, 0x38	; 56
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	48 2f       	mov	r20, r24
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 2e       	mov	r0, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Dio_u8_SetPinVal+0xdc>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <Dio_u8_SetPinVal+0xd8>
 4fa:	84 2b       	or	r24, r20
 4fc:	8c 93       	st	X, r24
 4fe:	6c c0       	rjmp	.+216    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
 500:	a8 e3       	ldi	r26, 0x38	; 56
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e8 e3       	ldi	r30, 0x38	; 56
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 2e       	mov	r0, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <Dio_u8_SetPinVal+0x104>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <Dio_u8_SetPinVal+0x100>
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	8c 93       	st	X, r24
 528:	57 c0       	rjmp	.+174    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_C:
			Assign_Bit(DIO_U8_PORTC,Copy_Bit_No,CopyPinVal);
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	a1 f4       	brne	.+40     	; 0x558 <Dio_u8_SetPinVal+0x13e>
 530:	a5 e3       	ldi	r26, 0x35	; 53
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e5 e3       	ldi	r30, 0x35	; 53
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <Dio_u8_SetPinVal+0x134>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <Dio_u8_SetPinVal+0x130>
 552:	84 2b       	or	r24, r20
 554:	8c 93       	st	X, r24
 556:	40 c0       	rjmp	.+128    	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
 558:	a5 e3       	ldi	r26, 0x35	; 53
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e5 e3       	ldi	r30, 0x35	; 53
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	48 2f       	mov	r20, r24
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 2e       	mov	r0, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <Dio_u8_SetPinVal+0x15c>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <Dio_u8_SetPinVal+0x158>
 57a:	80 95       	com	r24
 57c:	84 23       	and	r24, r20
 57e:	8c 93       	st	X, r24
 580:	2b c0       	rjmp	.+86     	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
			break;

		case Group_D:
			Assign_Bit(DIO_U8_PORTD,Copy_Bit_No,CopyPinVal);
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	a1 f4       	brne	.+40     	; 0x5b0 <Dio_u8_SetPinVal+0x196>
 588:	a2 e3       	ldi	r26, 0x32	; 50
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e2 e3       	ldi	r30, 0x32	; 50
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	48 2f       	mov	r20, r24
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 2e       	mov	r0, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <Dio_u8_SetPinVal+0x18c>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	0a 94       	dec	r0
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <Dio_u8_SetPinVal+0x188>
 5aa:	84 2b       	or	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <Dio_u8_SetPinVal+0x1be>
 5b0:	a2 e3       	ldi	r26, 0x32	; 50
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	e2 e3       	ldi	r30, 0x32	; 50
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	48 2f       	mov	r20, r24
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 2e       	mov	r0, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Dio_u8_SetPinVal+0x1b4>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	0a 94       	dec	r0
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <Dio_u8_SetPinVal+0x1b0>
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	8c 93       	st	X, r24
			break;
		}
	}
}
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	08 95       	ret

000005e8 <Dio_u8_GetPinVal>:


u8 Dio_u8_GetPinVal(u8 Copy_PortID,u8 Copy_Bit_No){
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <Dio_u8_GetPinVal+0x6>
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <Dio_u8_GetPinVal+0x8>
 5f0:	0f 92       	push	r0
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	8a 83       	std	Y+2, r24	; 0x02
 5f8:	6b 83       	std	Y+3, r22	; 0x03

	u8 BitValue;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	08 f0       	brcs	.+2      	; 0x602 <Dio_u8_GetPinVal+0x1a>
 600:	67 c0       	rjmp	.+206    	; 0x6d0 <Dio_u8_GetPinVal+0xe8>

		switch (Copy_PortID){
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	3d 83       	std	Y+5, r19	; 0x05
 60a:	2c 83       	std	Y+4, r18	; 0x04
 60c:	4c 81       	ldd	r20, Y+4	; 0x04
 60e:	5d 81       	ldd	r21, Y+5	; 0x05
 610:	41 30       	cpi	r20, 0x01	; 1
 612:	51 05       	cpc	r21, r1
 614:	41 f1       	breq	.+80     	; 0x666 <Dio_u8_GetPinVal+0x7e>
 616:	8c 81       	ldd	r24, Y+4	; 0x04
 618:	9d 81       	ldd	r25, Y+5	; 0x05
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	91 05       	cpc	r25, r1
 61e:	34 f4       	brge	.+12     	; 0x62c <Dio_u8_GetPinVal+0x44>
 620:	2c 81       	ldd	r18, Y+4	; 0x04
 622:	3d 81       	ldd	r19, Y+5	; 0x05
 624:	21 15       	cp	r18, r1
 626:	31 05       	cpc	r19, r1
 628:	61 f0       	breq	.+24     	; 0x642 <Dio_u8_GetPinVal+0x5a>
 62a:	52 c0       	rjmp	.+164    	; 0x6d0 <Dio_u8_GetPinVal+0xe8>
 62c:	4c 81       	ldd	r20, Y+4	; 0x04
 62e:	5d 81       	ldd	r21, Y+5	; 0x05
 630:	42 30       	cpi	r20, 0x02	; 2
 632:	51 05       	cpc	r21, r1
 634:	51 f1       	breq	.+84     	; 0x68a <Dio_u8_GetPinVal+0xa2>
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	9d 81       	ldd	r25, Y+5	; 0x05
 63a:	83 30       	cpi	r24, 0x03	; 3
 63c:	91 05       	cpc	r25, r1
 63e:	b9 f1       	breq	.+110    	; 0x6ae <Dio_u8_GetPinVal+0xc6>
 640:	47 c0       	rjmp	.+142    	; 0x6d0 <Dio_u8_GetPinVal+0xe8>

		case Group_A:
			BitValue = Get_Bit(DIO_U8_PINA,Copy_Bit_No);
 642:	e9 e3       	ldi	r30, 0x39	; 57
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 2f       	mov	r24, r24
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	a9 01       	movw	r20, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <Dio_u8_GetPinVal+0x72>
 656:	55 95       	asr	r21
 658:	47 95       	ror	r20
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <Dio_u8_GetPinVal+0x6e>
 65e:	ca 01       	movw	r24, r20
 660:	81 70       	andi	r24, 0x01	; 1
 662:	89 83       	std	Y+1, r24	; 0x01
 664:	35 c0       	rjmp	.+106    	; 0x6d0 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_B:
			BitValue = Get_Bit(DIO_U8_PINB,Copy_Bit_No);
 666:	e6 e3       	ldi	r30, 0x36	; 54
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	88 2f       	mov	r24, r24
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	a9 01       	movw	r20, r18
 678:	02 c0       	rjmp	.+4      	; 0x67e <Dio_u8_GetPinVal+0x96>
 67a:	55 95       	asr	r21
 67c:	47 95       	ror	r20
 67e:	8a 95       	dec	r24
 680:	e2 f7       	brpl	.-8      	; 0x67a <Dio_u8_GetPinVal+0x92>
 682:	ca 01       	movw	r24, r20
 684:	81 70       	andi	r24, 0x01	; 1
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	23 c0       	rjmp	.+70     	; 0x6d0 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_C:
			BitValue = Get_Bit(DIO_U8_PINC,Copy_Bit_No);
 68a:	e3 e3       	ldi	r30, 0x33	; 51
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	a9 01       	movw	r20, r18
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <Dio_u8_GetPinVal+0xba>
 69e:	55 95       	asr	r21
 6a0:	47 95       	ror	r20
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <Dio_u8_GetPinVal+0xb6>
 6a6:	ca 01       	movw	r24, r20
 6a8:	81 70       	andi	r24, 0x01	; 1
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <Dio_u8_GetPinVal+0xe8>
			break;

		case Group_D:
			BitValue = Get_Bit(DIO_U8_PIND,Copy_Bit_No);
 6ae:	e0 e3       	ldi	r30, 0x30	; 48
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	88 2f       	mov	r24, r24
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	a9 01       	movw	r20, r18
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <Dio_u8_GetPinVal+0xde>
 6c2:	55 95       	asr	r21
 6c4:	47 95       	ror	r20
 6c6:	8a 95       	dec	r24
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <Dio_u8_GetPinVal+0xda>
 6ca:	ca 01       	movw	r24, r20
 6cc:	81 70       	andi	r24, 0x01	; 1
 6ce:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
return BitValue;
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	cf 91       	pop	r28
 6de:	df 91       	pop	r29
 6e0:	08 95       	ret

000006e2 <Dio_u8_GetPortDir>:

u8 Dio_u8_GetPortDir(u8 Copy_PortID){
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <Dio_u8_GetPortDir+0x6>
 6e8:	00 d0       	rcall	.+0      	; 0x6ea <Dio_u8_GetPortDir+0x8>
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	8a 83       	std	Y+2, r24	; 0x02

	u8 PortDir ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	84 30       	cpi	r24, 0x04	; 4
 6f4:	90 f5       	brcc	.+100    	; 0x75a <Dio_u8_GetPortDir+0x78>

		switch (Copy_PortID){
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	3c 83       	std	Y+4, r19	; 0x04
 6fe:	2b 83       	std	Y+3, r18	; 0x03
 700:	8b 81       	ldd	r24, Y+3	; 0x03
 702:	9c 81       	ldd	r25, Y+4	; 0x04
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	91 05       	cpc	r25, r1
 708:	d1 f0       	breq	.+52     	; 0x73e <Dio_u8_GetPortDir+0x5c>
 70a:	2b 81       	ldd	r18, Y+3	; 0x03
 70c:	3c 81       	ldd	r19, Y+4	; 0x04
 70e:	22 30       	cpi	r18, 0x02	; 2
 710:	31 05       	cpc	r19, r1
 712:	2c f4       	brge	.+10     	; 0x71e <Dio_u8_GetPortDir+0x3c>
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	9c 81       	ldd	r25, Y+4	; 0x04
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	61 f0       	breq	.+24     	; 0x734 <Dio_u8_GetPortDir+0x52>
 71c:	1e c0       	rjmp	.+60     	; 0x75a <Dio_u8_GetPortDir+0x78>
 71e:	2b 81       	ldd	r18, Y+3	; 0x03
 720:	3c 81       	ldd	r19, Y+4	; 0x04
 722:	22 30       	cpi	r18, 0x02	; 2
 724:	31 05       	cpc	r19, r1
 726:	81 f0       	breq	.+32     	; 0x748 <Dio_u8_GetPortDir+0x66>
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	9c 81       	ldd	r25, Y+4	; 0x04
 72c:	83 30       	cpi	r24, 0x03	; 3
 72e:	91 05       	cpc	r25, r1
 730:	81 f0       	breq	.+32     	; 0x752 <Dio_u8_GetPortDir+0x70>
 732:	13 c0       	rjmp	.+38     	; 0x75a <Dio_u8_GetPortDir+0x78>

		case Group_A:
			PortDir = DIO_U8_DDRA;
 734:	ea e3       	ldi	r30, 0x3A	; 58
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	0e c0       	rjmp	.+28     	; 0x75a <Dio_u8_GetPortDir+0x78>
			break;

		case Group_B:
			PortDir = DIO_U8_DDRB;
 73e:	e7 e3       	ldi	r30, 0x37	; 55
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	09 c0       	rjmp	.+18     	; 0x75a <Dio_u8_GetPortDir+0x78>
			break;

		case Group_C:
			PortDir = DIO_U8_DDRC;
 748:	e4 e3       	ldi	r30, 0x34	; 52
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	04 c0       	rjmp	.+8      	; 0x75a <Dio_u8_GetPortDir+0x78>
			break;

		case Group_D:
			PortDir = DIO_U8_DDRD;
 752:	e1 e3       	ldi	r30, 0x31	; 49
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PortDir;
 75a:	89 81       	ldd	r24, Y+1	; 0x01
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <Dio_u8_GetPinDir>:

u8 Dio_u8_GetPinDir(u8 Copy_PortID,u8 Copy_Bit_NO){
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	00 d0       	rcall	.+0      	; 0x770 <Dio_u8_GetPinDir+0x6>
 770:	00 d0       	rcall	.+0      	; 0x772 <Dio_u8_GetPinDir+0x8>
 772:	0f 92       	push	r0
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	8a 83       	std	Y+2, r24	; 0x02
 77a:	6b 83       	std	Y+3, r22	; 0x03

	u8 PinDirc ;
	if ((Copy_PortID <= Group_D )&& (Copy_PortID >= Group_A)){
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	84 30       	cpi	r24, 0x04	; 4
 780:	08 f0       	brcs	.+2      	; 0x784 <Dio_u8_GetPinDir+0x1a>
 782:	67 c0       	rjmp	.+206    	; 0x852 <Dio_u8_GetPinDir+0xe8>

		switch (Copy_PortID){
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	28 2f       	mov	r18, r24
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	3d 83       	std	Y+5, r19	; 0x05
 78c:	2c 83       	std	Y+4, r18	; 0x04
 78e:	4c 81       	ldd	r20, Y+4	; 0x04
 790:	5d 81       	ldd	r21, Y+5	; 0x05
 792:	41 30       	cpi	r20, 0x01	; 1
 794:	51 05       	cpc	r21, r1
 796:	41 f1       	breq	.+80     	; 0x7e8 <Dio_u8_GetPinDir+0x7e>
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	9d 81       	ldd	r25, Y+5	; 0x05
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	91 05       	cpc	r25, r1
 7a0:	34 f4       	brge	.+12     	; 0x7ae <Dio_u8_GetPinDir+0x44>
 7a2:	2c 81       	ldd	r18, Y+4	; 0x04
 7a4:	3d 81       	ldd	r19, Y+5	; 0x05
 7a6:	21 15       	cp	r18, r1
 7a8:	31 05       	cpc	r19, r1
 7aa:	61 f0       	breq	.+24     	; 0x7c4 <Dio_u8_GetPinDir+0x5a>
 7ac:	52 c0       	rjmp	.+164    	; 0x852 <Dio_u8_GetPinDir+0xe8>
 7ae:	4c 81       	ldd	r20, Y+4	; 0x04
 7b0:	5d 81       	ldd	r21, Y+5	; 0x05
 7b2:	42 30       	cpi	r20, 0x02	; 2
 7b4:	51 05       	cpc	r21, r1
 7b6:	51 f1       	breq	.+84     	; 0x80c <Dio_u8_GetPinDir+0xa2>
 7b8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ba:	9d 81       	ldd	r25, Y+5	; 0x05
 7bc:	83 30       	cpi	r24, 0x03	; 3
 7be:	91 05       	cpc	r25, r1
 7c0:	b9 f1       	breq	.+110    	; 0x830 <Dio_u8_GetPinDir+0xc6>
 7c2:	47 c0       	rjmp	.+142    	; 0x852 <Dio_u8_GetPinDir+0xe8>

		case Group_A:
			PinDirc = Get_Bit(DIO_U8_DDRA,Copy_Bit_NO);
 7c4:	ea e3       	ldi	r30, 0x3A	; 58
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	88 2f       	mov	r24, r24
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	a9 01       	movw	r20, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <Dio_u8_GetPinDir+0x72>
 7d8:	55 95       	asr	r21
 7da:	47 95       	ror	r20
 7dc:	8a 95       	dec	r24
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <Dio_u8_GetPinDir+0x6e>
 7e0:	ca 01       	movw	r24, r20
 7e2:	81 70       	andi	r24, 0x01	; 1
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	35 c0       	rjmp	.+106    	; 0x852 <Dio_u8_GetPinDir+0xe8>
			break ;

		case Group_B:
				PinDirc = Get_Bit(DIO_U8_DDRB,Copy_Bit_NO);
 7e8:	e7 e3       	ldi	r30, 0x37	; 55
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	88 2f       	mov	r24, r24
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	a9 01       	movw	r20, r18
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <Dio_u8_GetPinDir+0x96>
 7fc:	55 95       	asr	r21
 7fe:	47 95       	ror	r20
 800:	8a 95       	dec	r24
 802:	e2 f7       	brpl	.-8      	; 0x7fc <Dio_u8_GetPinDir+0x92>
 804:	ca 01       	movw	r24, r20
 806:	81 70       	andi	r24, 0x01	; 1
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	23 c0       	rjmp	.+70     	; 0x852 <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_C:
				PinDirc = Get_Bit(DIO_U8_DDRC,Copy_Bit_NO);
 80c:	e4 e3       	ldi	r30, 0x34	; 52
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	8b 81       	ldd	r24, Y+3	; 0x03
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	a9 01       	movw	r20, r18
 81e:	02 c0       	rjmp	.+4      	; 0x824 <Dio_u8_GetPinDir+0xba>
 820:	55 95       	asr	r21
 822:	47 95       	ror	r20
 824:	8a 95       	dec	r24
 826:	e2 f7       	brpl	.-8      	; 0x820 <Dio_u8_GetPinDir+0xb6>
 828:	ca 01       	movw	r24, r20
 82a:	81 70       	andi	r24, 0x01	; 1
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	11 c0       	rjmp	.+34     	; 0x852 <Dio_u8_GetPinDir+0xe8>
				break ;

		case Group_D:
				PinDirc = Get_Bit(DIO_U8_DDRD,Copy_Bit_NO);
 830:	e1 e3       	ldi	r30, 0x31	; 49
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	28 2f       	mov	r18, r24
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	8b 81       	ldd	r24, Y+3	; 0x03
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	a9 01       	movw	r20, r18
 842:	02 c0       	rjmp	.+4      	; 0x848 <Dio_u8_GetPinDir+0xde>
 844:	55 95       	asr	r21
 846:	47 95       	ror	r20
 848:	8a 95       	dec	r24
 84a:	e2 f7       	brpl	.-8      	; 0x844 <Dio_u8_GetPinDir+0xda>
 84c:	ca 01       	movw	r24, r20
 84e:	81 70       	andi	r24, 0x01	; 1
 850:	89 83       	std	Y+1, r24	; 0x01
				break ;
		}

		}
	return 0 ;
 852:	80 e0       	ldi	r24, 0x00	; 0
	}
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <Dio_Pullup>:

void Dio_Pullup (u8 CopyPort_ID, u8 Copy_BitNum)
{
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	00 d0       	rcall	.+0      	; 0x86a <Dio_Pullup+0x6>
 86a:	00 d0       	rcall	.+0      	; 0x86c <Dio_Pullup+0x8>
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	6a 83       	std	Y+2, r22	; 0x02
	if ((CopyPort_ID <= Group_D )&& (CopyPort_ID >= Group_A)){
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	84 30       	cpi	r24, 0x04	; 4
 878:	08 f0       	brcs	.+2      	; 0x87c <Dio_Pullup+0x18>
 87a:	4a c0       	rjmp	.+148    	; 0x910 <Dio_Pullup+0xac>

		switch (CopyPort_ID){
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	28 2f       	mov	r18, r24
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	3c 83       	std	Y+4, r19	; 0x04
 884:	2b 83       	std	Y+3, r18	; 0x03
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	9c 81       	ldd	r25, Y+4	; 0x04
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	91 05       	cpc	r25, r1
 88e:	01 f1       	breq	.+64     	; 0x8d0 <Dio_Pullup+0x6c>
 890:	2b 81       	ldd	r18, Y+3	; 0x03
 892:	3c 81       	ldd	r19, Y+4	; 0x04
 894:	22 30       	cpi	r18, 0x02	; 2
 896:	31 05       	cpc	r19, r1
 898:	2c f4       	brge	.+10     	; 0x8a4 <Dio_Pullup+0x40>
 89a:	8b 81       	ldd	r24, Y+3	; 0x03
 89c:	9c 81       	ldd	r25, Y+4	; 0x04
 89e:	00 97       	sbiw	r24, 0x00	; 0
 8a0:	61 f0       	breq	.+24     	; 0x8ba <Dio_Pullup+0x56>
 8a2:	36 c0       	rjmp	.+108    	; 0x910 <Dio_Pullup+0xac>
 8a4:	2b 81       	ldd	r18, Y+3	; 0x03
 8a6:	3c 81       	ldd	r19, Y+4	; 0x04
 8a8:	22 30       	cpi	r18, 0x02	; 2
 8aa:	31 05       	cpc	r19, r1
 8ac:	e1 f0       	breq	.+56     	; 0x8e6 <Dio_Pullup+0x82>
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	9c 81       	ldd	r25, Y+4	; 0x04
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	91 05       	cpc	r25, r1
 8b6:	11 f1       	breq	.+68     	; 0x8fc <Dio_Pullup+0x98>
 8b8:	2b c0       	rjmp	.+86     	; 0x910 <Dio_Pullup+0xac>

		case Group_A:

			Dio_u8_SetPinDir(Group_A, Copy_BitNum, Dio_PinInput);
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	6a 81       	ldd	r22, Y+2	; 0x02
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_A, Copy_BitNum,Dio_PinHigh);
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	6a 81       	ldd	r22, Y+2	; 0x02
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>
 8ce:	20 c0       	rjmp	.+64     	; 0x910 <Dio_Pullup+0xac>

			break;

		case Group_B:

			Dio_u8_SetPinDir(Group_B, Copy_BitNum, Dio_PinInput);
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	6a 81       	ldd	r22, Y+2	; 0x02
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_B, Copy_BitNum,Dio_PinHigh);
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	6a 81       	ldd	r22, Y+2	; 0x02
 8de:	41 e0       	ldi	r20, 0x01	; 1
 8e0:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>
 8e4:	15 c0       	rjmp	.+42     	; 0x910 <Dio_Pullup+0xac>

			break;

		case Group_C:

			Dio_u8_SetPinDir(Group_C, Copy_BitNum, Dio_PinInput);
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	6a 81       	ldd	r22, Y+2	; 0x02
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_C, Copy_BitNum,Dio_PinHigh);
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	6a 81       	ldd	r22, Y+2	; 0x02
 8f4:	41 e0       	ldi	r20, 0x01	; 1
 8f6:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>
 8fa:	0a c0       	rjmp	.+20     	; 0x910 <Dio_Pullup+0xac>

			break;

		case Group_D:

			Dio_u8_SetPinDir(Group_D, Copy_BitNum, Dio_PinInput);
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	6a 81       	ldd	r22, Y+2	; 0x02
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>
			Dio_u8_SetPinVal(Group_D, Copy_BitNum,Dio_PinHigh);
 906:	83 e0       	ldi	r24, 0x03	; 3
 908:	6a 81       	ldd	r22, Y+2	; 0x02
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>

			break;
		}
	}
}
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	cf 91       	pop	r28
 91a:	df 91       	pop	r29
 91c:	08 95       	ret

0000091e <Timer0_init>:

/*****************************************************************************************
 * Implementation
 *
 ****************************************************************************************/
void Timer0_init (Timer0_Mode Mode , Timer0_Prescaler Scaler, OC0_Mode mode){
 91e:	df 93       	push	r29
 920:	cf 93       	push	r28
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
 926:	27 97       	sbiw	r28, 0x07	; 7
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	f8 94       	cli
 92c:	de bf       	out	0x3e, r29	; 62
 92e:	0f be       	out	0x3f, r0	; 63
 930:	cd bf       	out	0x3d, r28	; 61
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	6a 83       	std	Y+2, r22	; 0x02
 936:	4b 83       	std	Y+3, r20	; 0x03

	switch (Mode){
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	3f 83       	std	Y+7, r19	; 0x07
 940:	2e 83       	std	Y+6, r18	; 0x06
 942:	8e 81       	ldd	r24, Y+6	; 0x06
 944:	9f 81       	ldd	r25, Y+7	; 0x07
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	91 05       	cpc	r25, r1
 94a:	21 f1       	breq	.+72     	; 0x994 <Timer0_init+0x76>
 94c:	2e 81       	ldd	r18, Y+6	; 0x06
 94e:	3f 81       	ldd	r19, Y+7	; 0x07
 950:	22 30       	cpi	r18, 0x02	; 2
 952:	31 05       	cpc	r19, r1
 954:	2c f4       	brge	.+10     	; 0x960 <Timer0_init+0x42>
 956:	8e 81       	ldd	r24, Y+6	; 0x06
 958:	9f 81       	ldd	r25, Y+7	; 0x07
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	61 f0       	breq	.+24     	; 0x976 <Timer0_init+0x58>
 95e:	46 c0       	rjmp	.+140    	; 0x9ec <Timer0_init+0xce>
 960:	2e 81       	ldd	r18, Y+6	; 0x06
 962:	3f 81       	ldd	r19, Y+7	; 0x07
 964:	22 30       	cpi	r18, 0x02	; 2
 966:	31 05       	cpc	r19, r1
 968:	21 f1       	breq	.+72     	; 0x9b2 <Timer0_init+0x94>
 96a:	8e 81       	ldd	r24, Y+6	; 0x06
 96c:	9f 81       	ldd	r25, Y+7	; 0x07
 96e:	83 30       	cpi	r24, 0x03	; 3
 970:	91 05       	cpc	r25, r1
 972:	71 f1       	breq	.+92     	; 0x9d0 <Timer0_init+0xb2>
 974:	3b c0       	rjmp	.+118    	; 0x9ec <Timer0_init+0xce>

	case Timer0_NormalMode :

		Clear_Bit(Timer0_TCCR0,WGM00);
 976:	a3 e5       	ldi	r26, 0x53	; 83
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	e3 e5       	ldi	r30, 0x53	; 83
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	8f 7b       	andi	r24, 0xBF	; 191
 982:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
 984:	a3 e5       	ldi	r26, 0x53	; 83
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	e3 e5       	ldi	r30, 0x53	; 83
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	87 7f       	andi	r24, 0xF7	; 247
 990:	8c 93       	st	X, r24
 992:	2c c0       	rjmp	.+88     	; 0x9ec <Timer0_init+0xce>

		break ;

	case Timer0_PWM_PhaseCorrect :

		Set_Bit(Timer0_TCCR0 , WGM00);
 994:	a3 e5       	ldi	r26, 0x53	; 83
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e3 e5       	ldi	r30, 0x53	; 83
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	80 64       	ori	r24, 0x40	; 64
 9a0:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0, WGM01);
 9a2:	a3 e5       	ldi	r26, 0x53	; 83
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	e3 e5       	ldi	r30, 0x53	; 83
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	87 7f       	andi	r24, 0xF7	; 247
 9ae:	8c 93       	st	X, r24
 9b0:	1d c0       	rjmp	.+58     	; 0x9ec <Timer0_init+0xce>

		break;

	case Timer0_CTC :

		Clear_Bit(Timer0_TCCR0 , WGM00);
 9b2:	a3 e5       	ldi	r26, 0x53	; 83
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
 9b6:	e3 e5       	ldi	r30, 0x53	; 83
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	8f 7b       	andi	r24, 0xBF	; 191
 9be:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , WGM01);
 9c0:	a3 e5       	ldi	r26, 0x53	; 83
 9c2:	b0 e0       	ldi	r27, 0x00	; 0
 9c4:	e3 e5       	ldi	r30, 0x53	; 83
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	88 60       	ori	r24, 0x08	; 8
 9cc:	8c 93       	st	X, r24
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <Timer0_init+0xce>

		break;

	case Timer0_FastPWM :

		 Set_Bit(Timer0_TCCR0 , WGM00);
 9d0:	a3 e5       	ldi	r26, 0x53	; 83
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	e3 e5       	ldi	r30, 0x53	; 83
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	80 64       	ori	r24, 0x40	; 64
 9dc:	8c 93       	st	X, r24
		 Set_Bit(Timer0_TCCR0 , WGM01);
 9de:	a3 e5       	ldi	r26, 0x53	; 83
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	e3 e5       	ldi	r30, 0x53	; 83
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	88 60       	ori	r24, 0x08	; 8
 9ea:	8c 93       	st	X, r24

		break ;
	}
	/**Setting the Pre-scaler of the Clk**/

	Timer0_TCCR0 &= 0xF8;
 9ec:	a3 e5       	ldi	r26, 0x53	; 83
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	e3 e5       	ldi	r30, 0x53	; 83
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	88 7f       	andi	r24, 0xF8	; 248
 9f8:	8c 93       	st	X, r24
	Timer0_TCCR0 |= Scaler;
 9fa:	a3 e5       	ldi	r26, 0x53	; 83
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	e3 e5       	ldi	r30, 0x53	; 83
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	90 81       	ld	r25, Z
 a04:	8a 81       	ldd	r24, Y+2	; 0x02
 a06:	89 2b       	or	r24, r25
 a08:	8c 93       	st	X, r24

	switch (mode) {
 a0a:	8b 81       	ldd	r24, Y+3	; 0x03
 a0c:	28 2f       	mov	r18, r24
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	3d 83       	std	Y+5, r19	; 0x05
 a12:	2c 83       	std	Y+4, r18	; 0x04
 a14:	8c 81       	ldd	r24, Y+4	; 0x04
 a16:	9d 81       	ldd	r25, Y+5	; 0x05
 a18:	81 30       	cpi	r24, 0x01	; 1
 a1a:	91 05       	cpc	r25, r1
 a1c:	21 f1       	breq	.+72     	; 0xa66 <Timer0_init+0x148>
 a1e:	2c 81       	ldd	r18, Y+4	; 0x04
 a20:	3d 81       	ldd	r19, Y+5	; 0x05
 a22:	22 30       	cpi	r18, 0x02	; 2
 a24:	31 05       	cpc	r19, r1
 a26:	2c f4       	brge	.+10     	; 0xa32 <Timer0_init+0x114>
 a28:	8c 81       	ldd	r24, Y+4	; 0x04
 a2a:	9d 81       	ldd	r25, Y+5	; 0x05
 a2c:	00 97       	sbiw	r24, 0x00	; 0
 a2e:	61 f0       	breq	.+24     	; 0xa48 <Timer0_init+0x12a>
 a30:	46 c0       	rjmp	.+140    	; 0xabe <Timer0_init+0x1a0>
 a32:	2c 81       	ldd	r18, Y+4	; 0x04
 a34:	3d 81       	ldd	r19, Y+5	; 0x05
 a36:	22 30       	cpi	r18, 0x02	; 2
 a38:	31 05       	cpc	r19, r1
 a3a:	21 f1       	breq	.+72     	; 0xa84 <Timer0_init+0x166>
 a3c:	8c 81       	ldd	r24, Y+4	; 0x04
 a3e:	9d 81       	ldd	r25, Y+5	; 0x05
 a40:	83 30       	cpi	r24, 0x03	; 3
 a42:	91 05       	cpc	r25, r1
 a44:	71 f1       	breq	.+92     	; 0xaa2 <Timer0_init+0x184>
 a46:	3b c0       	rjmp	.+118    	; 0xabe <Timer0_init+0x1a0>

	case OC0_Disconnected:

		Clear_Bit(Timer0_TCCR0 , COM00);
 a48:	a3 e5       	ldi	r26, 0x53	; 83
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	e3 e5       	ldi	r30, 0x53	; 83
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	8f 7e       	andi	r24, 0xEF	; 239
 a54:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
 a56:	a3 e5       	ldi	r26, 0x53	; 83
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	e3 e5       	ldi	r30, 0x53	; 83
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	8f 7d       	andi	r24, 0xDF	; 223
 a62:	8c 93       	st	X, r24
 a64:	2c c0       	rjmp	.+88     	; 0xabe <Timer0_init+0x1a0>

		break;

	case Toggle_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
 a66:	a3 e5       	ldi	r26, 0x53	; 83
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	e3 e5       	ldi	r30, 0x53	; 83
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	80 61       	ori	r24, 0x10	; 16
 a72:	8c 93       	st	X, r24
		Clear_Bit(Timer0_TCCR0 , COM01);
 a74:	a3 e5       	ldi	r26, 0x53	; 83
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	e3 e5       	ldi	r30, 0x53	; 83
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	8f 7d       	andi	r24, 0xDF	; 223
 a80:	8c 93       	st	X, r24
 a82:	1d c0       	rjmp	.+58     	; 0xabe <Timer0_init+0x1a0>

		break ;

	case NonInverting_OC0 :

		Clear_Bit(Timer0_TCCR0 , COM00);
 a84:	a3 e5       	ldi	r26, 0x53	; 83
 a86:	b0 e0       	ldi	r27, 0x00	; 0
 a88:	e3 e5       	ldi	r30, 0x53	; 83
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	8f 7e       	andi	r24, 0xEF	; 239
 a90:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
 a92:	a3 e5       	ldi	r26, 0x53	; 83
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	e3 e5       	ldi	r30, 0x53	; 83
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	80 81       	ld	r24, Z
 a9c:	80 62       	ori	r24, 0x20	; 32
 a9e:	8c 93       	st	X, r24
 aa0:	0e c0       	rjmp	.+28     	; 0xabe <Timer0_init+0x1a0>

		break;

	case Inverting_OC0 :

		Set_Bit(Timer0_TCCR0 , COM00);
 aa2:	a3 e5       	ldi	r26, 0x53	; 83
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	e3 e5       	ldi	r30, 0x53	; 83
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	80 61       	ori	r24, 0x10	; 16
 aae:	8c 93       	st	X, r24
		Set_Bit(Timer0_TCCR0 , COM01);
 ab0:	a3 e5       	ldi	r26, 0x53	; 83
 ab2:	b0 e0       	ldi	r27, 0x00	; 0
 ab4:	e3 e5       	ldi	r30, 0x53	; 83
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	80 62       	ori	r24, 0x20	; 32
 abc:	8c 93       	st	X, r24

		break;
	}
}
 abe:	27 96       	adiw	r28, 0x07	; 7
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	f8 94       	cli
 ac4:	de bf       	out	0x3e, r29	; 62
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	cd bf       	out	0x3d, r28	; 61
 aca:	cf 91       	pop	r28
 acc:	df 91       	pop	r29
 ace:	08 95       	ret

00000ad0 <Timer0_OVF_Enable>:

void Timer0_OVF_Enable (void){
 ad0:	df 93       	push	r29
 ad2:	cf 93       	push	r28
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_TOIE0);
 ad8:	a9 e5       	ldi	r26, 0x59	; 89
 ada:	b0 e0       	ldi	r27, 0x00	; 0
 adc:	e9 e5       	ldi	r30, 0x59	; 89
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	81 60       	ori	r24, 0x01	; 1
 ae4:	8c 93       	st	X, r24
}
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <Timer0_OVF_Disable>:

void Timer0_OVF_Disable (void){
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_TOIE0);
 af4:	a9 e5       	ldi	r26, 0x59	; 89
 af6:	b0 e0       	ldi	r27, 0x00	; 0
 af8:	e9 e5       	ldi	r30, 0x59	; 89
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	80 81       	ld	r24, Z
 afe:	8e 7f       	andi	r24, 0xFE	; 254
 b00:	8c 93       	st	X, r24
}
 b02:	cf 91       	pop	r28
 b04:	df 91       	pop	r29
 b06:	08 95       	ret

00000b08 <Timer0_OC_Enable>:

void Timer0_OC_Enable (void){
 b08:	df 93       	push	r29
 b0a:	cf 93       	push	r28
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(Timer0_TIMSK , Timer0_OCIE0);
 b10:	a9 e5       	ldi	r26, 0x59	; 89
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	e9 e5       	ldi	r30, 0x59	; 89
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	80 81       	ld	r24, Z
 b1a:	82 60       	ori	r24, 0x02	; 2
 b1c:	8c 93       	st	X, r24

}
 b1e:	cf 91       	pop	r28
 b20:	df 91       	pop	r29
 b22:	08 95       	ret

00000b24 <Timer0_OC_Disable>:

void Timer0_OC_Disable (void){
 b24:	df 93       	push	r29
 b26:	cf 93       	push	r28
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62

	Clear_Bit(Timer0_TIMSK , Timer0_OCIE0);
 b2c:	a9 e5       	ldi	r26, 0x59	; 89
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	e9 e5       	ldi	r30, 0x59	; 89
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	8d 7f       	andi	r24, 0xFD	; 253
 b38:	8c 93       	st	X, r24

}
 b3a:	cf 91       	pop	r28
 b3c:	df 91       	pop	r29
 b3e:	08 95       	ret

00000b40 <Timer0_OVF_Callback>:
/********************************************************************************************
 * Callback Functions
 ********************************************************************************************/
void Timer0_OVF_Callback (void (* Local_PTR)(void ) ){
 b40:	df 93       	push	r29
 b42:	cf 93       	push	r28
 b44:	00 d0       	rcall	.+0      	; 0xb46 <Timer0_OVF_Callback+0x6>
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	9a 83       	std	Y+2, r25	; 0x02
 b4c:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OVF = Local_PTR;
 b4e:	89 81       	ldd	r24, Y+1	; 0x01
 b50:	9a 81       	ldd	r25, Y+2	; 0x02
 b52:	90 93 61 00 	sts	0x0061, r25
 b56:	80 93 60 00 	sts	0x0060, r24
}
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	cf 91       	pop	r28
 b60:	df 91       	pop	r29
 b62:	08 95       	ret

00000b64 <__vector_11>:
 * Timer0 ISR
 *********************************************************************************************/


void __vector_11(void)__attribute__((signal));
void __vector_11(){
 b64:	1f 92       	push	r1
 b66:	0f 92       	push	r0
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	0f 92       	push	r0
 b6c:	11 24       	eor	r1, r1
 b6e:	2f 93       	push	r18
 b70:	3f 93       	push	r19
 b72:	4f 93       	push	r20
 b74:	5f 93       	push	r21
 b76:	6f 93       	push	r22
 b78:	7f 93       	push	r23
 b7a:	8f 93       	push	r24
 b7c:	9f 93       	push	r25
 b7e:	af 93       	push	r26
 b80:	bf 93       	push	r27
 b82:	ef 93       	push	r30
 b84:	ff 93       	push	r31
 b86:	df 93       	push	r29
 b88:	cf 93       	push	r28
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_OVF != Null){
 b8e:	80 91 60 00 	lds	r24, 0x0060
 b92:	90 91 61 00 	lds	r25, 0x0061
 b96:	00 97       	sbiw	r24, 0x00	; 0
 b98:	29 f0       	breq	.+10     	; 0xba4 <__vector_11+0x40>

		Timer0_OVF ();
 b9a:	e0 91 60 00 	lds	r30, 0x0060
 b9e:	f0 91 61 00 	lds	r31, 0x0061
 ba2:	09 95       	icall
	}
	}
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	ff 91       	pop	r31
 baa:	ef 91       	pop	r30
 bac:	bf 91       	pop	r27
 bae:	af 91       	pop	r26
 bb0:	9f 91       	pop	r25
 bb2:	8f 91       	pop	r24
 bb4:	7f 91       	pop	r23
 bb6:	6f 91       	pop	r22
 bb8:	5f 91       	pop	r21
 bba:	4f 91       	pop	r20
 bbc:	3f 91       	pop	r19
 bbe:	2f 91       	pop	r18
 bc0:	0f 90       	pop	r0
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	0f 90       	pop	r0
 bc6:	1f 90       	pop	r1
 bc8:	18 95       	reti

00000bca <Timer0>:

/******************************************************************************************************
 *
 * ISR Function
 *****************************************************************************************************/
void Timer0 (void){
 bca:	df 93       	push	r29
 bcc:	cf 93       	push	r28
 bce:	cd b7       	in	r28, 0x3d	; 61
 bd0:	de b7       	in	r29, 0x3e	; 62
	static u32 Flag ;
	Flag ++ ;
 bd2:	80 91 62 00 	lds	r24, 0x0062
 bd6:	90 91 63 00 	lds	r25, 0x0063
 bda:	a0 91 64 00 	lds	r26, 0x0064
 bde:	b0 91 65 00 	lds	r27, 0x0065
 be2:	01 96       	adiw	r24, 0x01	; 1
 be4:	a1 1d       	adc	r26, r1
 be6:	b1 1d       	adc	r27, r1
 be8:	80 93 62 00 	sts	0x0062, r24
 bec:	90 93 63 00 	sts	0x0063, r25
 bf0:	a0 93 64 00 	sts	0x0064, r26
 bf4:	b0 93 65 00 	sts	0x0065, r27
	Timer0_TCNT0 = 56;
 bf8:	e2 e5       	ldi	r30, 0x52	; 82
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	88 e3       	ldi	r24, 0x38	; 56
 bfe:	80 83       	st	Z, r24
	 *
	 * Flag == 1 ,  means 1 Overflow
	 *
	 *******************************************************************/

	if (Flag == 4) {
 c00:	80 91 62 00 	lds	r24, 0x0062
 c04:	90 91 63 00 	lds	r25, 0x0063
 c08:	a0 91 64 00 	lds	r26, 0x0064
 c0c:	b0 91 65 00 	lds	r27, 0x0065
 c10:	84 30       	cpi	r24, 0x04	; 4
 c12:	91 05       	cpc	r25, r1
 c14:	a1 05       	cpc	r26, r1
 c16:	b1 05       	cpc	r27, r1
 c18:	29 f4       	brne	.+10     	; 0xc24 <Timer0+0x5a>

		Dio_u8_SetPinVal(Group_A, PIN0, Dio_PinHigh);
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	60 e0       	ldi	r22, 0x00	; 0
 c1e:	41 e0       	ldi	r20, 0x01	; 1
 c20:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>

	}
	if (Flag == 5){
 c24:	80 91 62 00 	lds	r24, 0x0062
 c28:	90 91 63 00 	lds	r25, 0x0063
 c2c:	a0 91 64 00 	lds	r26, 0x0064
 c30:	b0 91 65 00 	lds	r27, 0x0065
 c34:	85 30       	cpi	r24, 0x05	; 5
 c36:	91 05       	cpc	r25, r1
 c38:	a1 05       	cpc	r26, r1
 c3a:	b1 05       	cpc	r27, r1
 c3c:	69 f4       	brne	.+26     	; 0xc58 <Timer0+0x8e>


		Dio_u8_SetPinVal(Group_A, PIN0, Dio_PinLow);
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	40 e0       	ldi	r20, 0x00	; 0
 c44:	0e 94 0d 02 	call	0x41a	; 0x41a <Dio_u8_SetPinVal>

		Flag = 0;
 c48:	10 92 62 00 	sts	0x0062, r1
 c4c:	10 92 63 00 	sts	0x0063, r1
 c50:	10 92 64 00 	sts	0x0064, r1
 c54:	10 92 65 00 	sts	0x0065, r1
	}
}
 c58:	cf 91       	pop	r28
 c5a:	df 91       	pop	r29
 c5c:	08 95       	ret

00000c5e <main>:

int main (void){
 c5e:	df 93       	push	r29
 c60:	cf 93       	push	r28
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
	/*Timer0 Init */
	Dio_u8_SetPinDir(Group_A, PIN0, Dio_PinOutput);
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	41 e0       	ldi	r20, 0x01	; 1
 c6c:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>
	Dio_u8_SetPinDir(Group_B, PIN2, Dio_PinOutput);
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	62 e0       	ldi	r22, 0x02	; 2
 c74:	41 e0       	ldi	r20, 0x01	; 1
 c76:	0e 94 26 01 	call	0x24c	; 0x24c <Dio_u8_SetPinDir>

	/**************** Timer ************************/
	Gobal_interrput_Enbale(); 										 // Enable Global Interrupt
 c7a:	0e 94 3e 00 	call	0x7c	; 0x7c <Gobal_interrput_Enbale>
	Timer0_OVF_Enable ();  											// Over Flow Interrupt
 c7e:	0e 94 68 05 	call	0xad0	; 0xad0 <Timer0_OVF_Enable>
	Timer0_TCNT0 = 56; 											   //Start Counting from 56 , in order to OVF after 200 Reps
 c82:	e2 e5       	ldi	r30, 0x52	; 82
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	88 e3       	ldi	r24, 0x38	; 56
 c88:	80 83       	st	Z, r24
	Timer0_init( Timer0_NormalMode , _CLK8_, OC0_Disconnected);   // Init Timer0 Normal mode and F-cpu / 8 Pre-sacler
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	62 e0       	ldi	r22, 0x02	; 2
 c8e:	40 e0       	ldi	r20, 0x00	; 0
 c90:	0e 94 8f 04 	call	0x91e	; 0x91e <Timer0_init>
	Timer0_OVF_Callback(Timer0); 								 // Pass the address of the function to the ISR
 c94:	85 ee       	ldi	r24, 0xE5	; 229
 c96:	95 e0       	ldi	r25, 0x05	; 5
 c98:	0e 94 a0 05 	call	0xb40	; 0xb40 <Timer0_OVF_Callback>
 c9c:	ff cf       	rjmp	.-2      	; 0xc9c <main+0x3e>

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
