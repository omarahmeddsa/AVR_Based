
Car_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000461c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00800060  0000461c  000046b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008001f2  008001f2  00004842  2**0
                  ALLOC
  3 .stab         000042fc  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019bb  00000000  00000000  00008b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a69b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a88d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cc98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f1f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_1>
       8:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_2>
       c:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 17 	call	0x2fca	; 0x2fca <main>
      8a:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ed       	ldi	r22, 0xD8	; 216
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 01 23 	jmp	0x4602	; 0x4602 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 52       	subi	r30, 0x20	; 32
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <M_ADC_U16_ADCRead+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <M_ADC_U16_ADCRead+0x8>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
     eca:	19 82       	std	Y+1, r1	; 0x01
     ecc:	1a 82       	std	Y+2, r1	; 0x02
     ece:	1b 82       	std	Y+3, r1	; 0x03
     ed0:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX_REG = ADMUX_REG & 0b11100000;
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 7e       	andi	r24, 0xE0	; 224
     ede:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
     ee0:	a7 e2       	ldi	r26, 0x27	; 39
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e7 e2       	ldi	r30, 0x27	; 39
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	90 81       	ld	r25, Z
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	89 2b       	or	r24, r25
     eee:	8c 93       	st	X, r24
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <M_ADC_U16_ADCRead+0x64>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	ab 81       	ldd	r26, Y+3	; 0x03
     ef8:	bc 81       	ldd	r27, Y+4	; 0x04
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	a1 1d       	adc	r26, r1
     efe:	b1 1d       	adc	r27, r1
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	ab 83       	std	Y+3, r26	; 0x03
     f06:	bc 83       	std	Y+4, r27	; 0x04
		if((GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE))
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	82 95       	swap	r24
     f10:	8f 70       	andi	r24, 0x0F	; 15
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	88 23       	and	r24, r24
     f1c:	61 f4       	brne	.+24     	; 0xf36 <M_ADC_U16_ADCRead+0x7c>
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	ab 81       	ldd	r26, Y+3	; 0x03
     f24:	bc 81       	ldd	r27, Y+4	; 0x04
     f26:	80 38       	cpi	r24, 0x80	; 128
     f28:	24 e8       	ldi	r18, 0x84	; 132
     f2a:	92 07       	cpc	r25, r18
     f2c:	2e e1       	ldi	r18, 0x1E	; 30
     f2e:	a2 07       	cpc	r26, r18
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	b2 07       	cpc	r27, r18
     f34:	f0 f2       	brcs	.-68     	; 0xef2 <M_ADC_U16_ADCRead+0x38>
		if((GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE))
		{
			break;
		}
	}
	return ADCVALUE;
     f36:	e4 e2       	ldi	r30, 0x24	; 36
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
     f56:	84 e2       	ldi	r24, 0x24	; 36
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     f6c:	84 e2       	ldi	r24, 0x24	; 36
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     f82:	84 e2       	ldi	r24, 0x24	; 36
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
     f98:	84 e2       	ldi	r24, 0x24	; 36
     f9a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	2e 97       	sbiw	r28, 0x0e	; 14
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 ea       	ldi	r26, 0xA0	; 160
     fc6:	b2 e4       	ldi	r27, 0x42	; 66
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a e7       	ldi	r20, 0x7A	; 122
     fde:	55 e4       	ldi	r21, 0x45	; 69
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <H_Buzzer_Void_BuzzerOnce+0xce>
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <H_Buzzer_Void_BuzzerOnce+0xbc>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <H_Buzzer_Void_BuzzerOnce+0xb0>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <H_Buzzer_Void_BuzzerOnce+0xf8>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    10a4:	84 e2       	ldi	r24, 0x24	; 36
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    10ac:	2e 96       	adiw	r28, 0x0e	; 14
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	aa 97       	sbiw	r28, 0x2a	; 42
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    10d2:	84 e2       	ldi	r24, 0x24	; 36
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 ea       	ldi	r26, 0xA0	; 160
    10e0:	b2 e4       	ldi	r27, 0x42	; 66
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	55 e4       	ldi	r21, 0x45	; 69
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <H_Buzzer_Void_BuzzerTwice+0xce>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <H_Buzzer_Void_BuzzerTwice+0xbc>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <H_Buzzer_Void_BuzzerTwice+0xb0>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <H_Buzzer_Void_BuzzerTwice+0xf8>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    11be:	84 e2       	ldi	r24, 0x24	; 36
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e7       	ldi	r26, 0x70	; 112
    11cc:	b2 e4       	ldi	r27, 0x42	; 66
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a e7       	ldi	r20, 0x7A	; 122
    11e4:	55 e4       	ldi	r21, 0x45	; 69
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <H_Buzzer_Void_BuzzerTwice+0x1ba>
    125a:	80 e9       	ldi	r24, 0x90	; 144
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <H_Buzzer_Void_BuzzerTwice+0x1a8>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <H_Buzzer_Void_BuzzerTwice+0x19c>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <H_Buzzer_Void_BuzzerTwice+0x1e4>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    12aa:	84 e2       	ldi	r24, 0x24	; 36
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 ea       	ldi	r26, 0xA0	; 160
    12b8:	b2 e4       	ldi	r27, 0x42	; 66
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
    12be:	ad 87       	std	Y+13, r26	; 0x0d
    12c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
    12de:	a9 87       	std	Y+9, r26	; 0x09
    12e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <H_Buzzer_Void_BuzzerTwice+0x2a6>
    1346:	80 e9       	ldi	r24, 0x90	; 144
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <H_Buzzer_Void_BuzzerTwice+0x294>
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <H_Buzzer_Void_BuzzerTwice+0x288>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <H_Buzzer_Void_BuzzerTwice+0x2d0>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    1396:	84 e2       	ldi	r24, 0x24	; 36
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    139e:	aa 96       	adiw	r28, 0x2a	; 42
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	2a 97       	sbiw	r28, 0x0a	; 10
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	69 2f       	mov	r22, r25
    13ce:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    13d2:	89 2f       	mov	r24, r25
    13d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9a e0       	ldi	r25, 0x0A	; 10
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    13e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3a 87       	std	Y+10, r19	; 0x0a
    13ea:	29 87       	std	Y+9, r18	; 0x09
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <M_DIO_Void_SetPinDirection+0x52>
    13f4:	29 85       	ldd	r18, Y+9	; 0x09
    13f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f8:	21 30       	cpi	r18, 0x01	; 1
    13fa:	31 05       	cpc	r19, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <M_DIO_Void_SetPinDirection+0x50>
    13fe:	76 c0       	rjmp	.+236    	; 0x14ec <M_DIO_Void_SetPinDirection+0x13c>
    1400:	e4 c0       	rjmp	.+456    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	38 87       	std	Y+8, r19	; 0x08
    140a:	2f 83       	std	Y+7, r18	; 0x07
    140c:	8f 81       	ldd	r24, Y+7	; 0x07
    140e:	98 85       	ldd	r25, Y+8	; 0x08
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	91 05       	cpc	r25, r1
    1414:	61 f1       	breq	.+88     	; 0x146e <M_DIO_Void_SetPinDirection+0xbe>
    1416:	2f 81       	ldd	r18, Y+7	; 0x07
    1418:	38 85       	ldd	r19, Y+8	; 0x08
    141a:	23 30       	cpi	r18, 0x03	; 3
    141c:	31 05       	cpc	r19, r1
    141e:	34 f4       	brge	.+12     	; 0x142c <M_DIO_Void_SetPinDirection+0x7c>
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	98 85       	ldd	r25, Y+8	; 0x08
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	69 f0       	breq	.+26     	; 0x1444 <M_DIO_Void_SetPinDirection+0x94>
    142a:	cf c0       	rjmp	.+414    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
    142c:	2f 81       	ldd	r18, Y+7	; 0x07
    142e:	38 85       	ldd	r19, Y+8	; 0x08
    1430:	23 30       	cpi	r18, 0x03	; 3
    1432:	31 05       	cpc	r19, r1
    1434:	89 f1       	breq	.+98     	; 0x1498 <M_DIO_Void_SetPinDirection+0xe8>
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <M_DIO_Void_SetPinDirection+0x92>
    1440:	40 c0       	rjmp	.+128    	; 0x14c2 <M_DIO_Void_SetPinDirection+0x112>
    1442:	c3 c0       	rjmp	.+390    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    1444:	aa e3       	ldi	r26, 0x3A	; 58
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ea e3       	ldi	r30, 0x3A	; 58
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <M_DIO_Void_SetPinDirection+0xb2>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <M_DIO_Void_SetPinDirection+0xae>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	ae c0       	rjmp	.+348    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    146e:	a7 e3       	ldi	r26, 0x37	; 55
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e7 e3       	ldi	r30, 0x37	; 55
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <M_DIO_Void_SetPinDirection+0xdc>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <M_DIO_Void_SetPinDirection+0xd8>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	99 c0       	rjmp	.+306    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1498:	a4 e3       	ldi	r26, 0x34	; 52
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <M_DIO_Void_SetPinDirection+0x106>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <M_DIO_Void_SetPinDirection+0x102>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	84 c0       	rjmp	.+264    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <M_DIO_Void_SetPinDirection+0x130>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <M_DIO_Void_SetPinDirection+0x12c>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	6f c0       	rjmp	.+222    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	51 f1       	breq	.+84     	; 0x1554 <M_DIO_Void_SetPinDirection+0x1a4>
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	31 05       	cpc	r19, r1
    1508:	34 f4       	brge	.+12     	; 0x1516 <M_DIO_Void_SetPinDirection+0x166>
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	61 f0       	breq	.+24     	; 0x152c <M_DIO_Void_SetPinDirection+0x17c>
    1514:	5a c0       	rjmp	.+180    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	23 30       	cpi	r18, 0x03	; 3
    151c:	31 05       	cpc	r19, r1
    151e:	71 f1       	breq	.+92     	; 0x157c <M_DIO_Void_SetPinDirection+0x1cc>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	91 05       	cpc	r25, r1
    1528:	e9 f1       	breq	.+122    	; 0x15a4 <M_DIO_Void_SetPinDirection+0x1f4>
    152a:	4f c0       	rjmp	.+158    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    152c:	aa e3       	ldi	r26, 0x3A	; 58
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_Void_SetPinDirection+0x19a>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_Void_SetPinDirection+0x196>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	3b c0       	rjmp	.+118    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <M_DIO_Void_SetPinDirection+0x1c2>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <M_DIO_Void_SetPinDirection+0x1be>
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    157c:	a4 e3       	ldi	r26, 0x34	; 52
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e4 e3       	ldi	r30, 0x34	; 52
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <M_DIO_Void_SetPinDirection+0x1ea>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <M_DIO_Void_SetPinDirection+0x1e6>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	13 c0       	rjmp	.+38     	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    15a4:	a1 e3       	ldi	r26, 0x31	; 49
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e1 e3       	ldi	r30, 0x31	; 49
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <M_DIO_Void_SetPinDirection+0x212>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <M_DIO_Void_SetPinDirection+0x20e>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    15ca:	2a 96       	adiw	r28, 0x0a	; 10
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	2a 97       	sbiw	r28, 0x0a	; 10
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9a e0       	ldi	r25, 0x0A	; 10
    15f8:	69 2f       	mov	r22, r25
    15fa:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    15fe:	89 2f       	mov	r24, r25
    1600:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9a e0       	ldi	r25, 0x0A	; 10
    1606:	69 2f       	mov	r22, r25
    1608:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    160c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3a 87       	std	Y+10, r19	; 0x0a
    1616:	29 87       	std	Y+9, r18	; 0x09
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	39 f0       	breq	.+14     	; 0x162e <M_DIO_Void_SetPinValue+0x52>
    1620:	29 85       	ldd	r18, Y+9	; 0x09
    1622:	3a 85       	ldd	r19, Y+10	; 0x0a
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <M_DIO_Void_SetPinValue+0x50>
    162a:	76 c0       	rjmp	.+236    	; 0x1718 <M_DIO_Void_SetPinValue+0x13c>
    162c:	e4 c0       	rjmp	.+456    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	38 87       	std	Y+8, r19	; 0x08
    1636:	2f 83       	std	Y+7, r18	; 0x07
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	91 05       	cpc	r25, r1
    1640:	61 f1       	breq	.+88     	; 0x169a <M_DIO_Void_SetPinValue+0xbe>
    1642:	2f 81       	ldd	r18, Y+7	; 0x07
    1644:	38 85       	ldd	r19, Y+8	; 0x08
    1646:	23 30       	cpi	r18, 0x03	; 3
    1648:	31 05       	cpc	r19, r1
    164a:	34 f4       	brge	.+12     	; 0x1658 <M_DIO_Void_SetPinValue+0x7c>
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	98 85       	ldd	r25, Y+8	; 0x08
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	69 f0       	breq	.+26     	; 0x1670 <M_DIO_Void_SetPinValue+0x94>
    1656:	cf c0       	rjmp	.+414    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
    1658:	2f 81       	ldd	r18, Y+7	; 0x07
    165a:	38 85       	ldd	r19, Y+8	; 0x08
    165c:	23 30       	cpi	r18, 0x03	; 3
    165e:	31 05       	cpc	r19, r1
    1660:	89 f1       	breq	.+98     	; 0x16c4 <M_DIO_Void_SetPinValue+0xe8>
    1662:	8f 81       	ldd	r24, Y+7	; 0x07
    1664:	98 85       	ldd	r25, Y+8	; 0x08
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <M_DIO_Void_SetPinValue+0x92>
    166c:	40 c0       	rjmp	.+128    	; 0x16ee <M_DIO_Void_SetPinValue+0x112>
    166e:	c3 c0       	rjmp	.+390    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1670:	ab e3       	ldi	r26, 0x3B	; 59
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	eb e3       	ldi	r30, 0x3B	; 59
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <M_DIO_Void_SetPinValue+0xb2>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <M_DIO_Void_SetPinValue+0xae>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	ae c0       	rjmp	.+348    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <M_DIO_Void_SetPinValue+0xdc>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <M_DIO_Void_SetPinValue+0xd8>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	99 c0       	rjmp	.+306    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <M_DIO_Void_SetPinValue+0x106>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <M_DIO_Void_SetPinValue+0x102>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	84 c0       	rjmp	.+264    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <M_DIO_Void_SetPinValue+0x130>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <M_DIO_Void_SetPinValue+0x12c>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	6f c0       	rjmp	.+222    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3e 83       	std	Y+6, r19	; 0x06
    1720:	2d 83       	std	Y+5, r18	; 0x05
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	51 f1       	breq	.+84     	; 0x1780 <M_DIO_Void_SetPinValue+0x1a4>
    172c:	2d 81       	ldd	r18, Y+5	; 0x05
    172e:	3e 81       	ldd	r19, Y+6	; 0x06
    1730:	23 30       	cpi	r18, 0x03	; 3
    1732:	31 05       	cpc	r19, r1
    1734:	34 f4       	brge	.+12     	; 0x1742 <M_DIO_Void_SetPinValue+0x166>
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	61 f0       	breq	.+24     	; 0x1758 <M_DIO_Void_SetPinValue+0x17c>
    1740:	5a c0       	rjmp	.+180    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
    1742:	2d 81       	ldd	r18, Y+5	; 0x05
    1744:	3e 81       	ldd	r19, Y+6	; 0x06
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	71 f1       	breq	.+92     	; 0x17a8 <M_DIO_Void_SetPinValue+0x1cc>
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	91 05       	cpc	r25, r1
    1754:	e9 f1       	breq	.+122    	; 0x17d0 <M_DIO_Void_SetPinValue+0x1f4>
    1756:	4f c0       	rjmp	.+158    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <M_DIO_Void_SetPinValue+0x19a>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <M_DIO_Void_SetPinValue+0x196>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1780:	a8 e3       	ldi	r26, 0x38	; 56
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <M_DIO_Void_SetPinValue+0x1c2>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <M_DIO_Void_SetPinValue+0x1be>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	27 c0       	rjmp	.+78     	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <M_DIO_Void_SetPinValue+0x1ea>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <M_DIO_Void_SetPinValue+0x1e6>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    17d0:	a2 e3       	ldi	r26, 0x32	; 50
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <M_DIO_Void_SetPinValue+0x212>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <M_DIO_Void_SetPinValue+0x20e>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    17f6:	2a 96       	adiw	r28, 0x0a	; 10
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <M_DIO_Void_GetPinValue+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <M_DIO_Void_GetPinValue+0x8>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <M_DIO_Void_GetPinValue+0xa>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9a e0       	ldi	r25, 0x0A	; 10
    181c:	69 2f       	mov	r22, r25
    181e:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    1822:	89 2f       	mov	r24, r25
    1824:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9a e0       	ldi	r25, 0x0A	; 10
    182a:	69 2f       	mov	r22, r25
    182c:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    1830:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    1832:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3e 83       	std	Y+6, r19	; 0x06
    183c:	2d 83       	std	Y+5, r18	; 0x05
    183e:	4d 81       	ldd	r20, Y+5	; 0x05
    1840:	5e 81       	ldd	r21, Y+6	; 0x06
    1842:	42 30       	cpi	r20, 0x02	; 2
    1844:	51 05       	cpc	r21, r1
    1846:	41 f1       	breq	.+80     	; 0x1898 <M_DIO_Void_GetPinValue+0x90>
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	34 f4       	brge	.+12     	; 0x185e <M_DIO_Void_GetPinValue+0x56>
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	3e 81       	ldd	r19, Y+6	; 0x06
    1856:	21 30       	cpi	r18, 0x01	; 1
    1858:	31 05       	cpc	r19, r1
    185a:	61 f0       	breq	.+24     	; 0x1874 <M_DIO_Void_GetPinValue+0x6c>
    185c:	52 c0       	rjmp	.+164    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
    185e:	4d 81       	ldd	r20, Y+5	; 0x05
    1860:	5e 81       	ldd	r21, Y+6	; 0x06
    1862:	43 30       	cpi	r20, 0x03	; 3
    1864:	51 05       	cpc	r21, r1
    1866:	51 f1       	breq	.+84     	; 0x18bc <M_DIO_Void_GetPinValue+0xb4>
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	84 30       	cpi	r24, 0x04	; 4
    186e:	91 05       	cpc	r25, r1
    1870:	b9 f1       	breq	.+110    	; 0x18e0 <M_DIO_Void_GetPinValue+0xd8>
    1872:	47 c0       	rjmp	.+142    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <M_DIO_Void_GetPinValue+0x84>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <M_DIO_Void_GetPinValue+0x80>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	35 c0       	rjmp	.+106    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <M_DIO_Void_GetPinValue+0xa8>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <M_DIO_Void_GetPinValue+0xa4>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	23 c0       	rjmp	.+70     	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    18bc:	e3 e3       	ldi	r30, 0x33	; 51
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <M_DIO_Void_GetPinValue+0xcc>
    18d0:	55 95       	asr	r21
    18d2:	47 95       	ror	r20
    18d4:	8a 95       	dec	r24
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <M_DIO_Void_GetPinValue+0xc8>
    18d8:	ca 01       	movw	r24, r20
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <M_DIO_Void_GetPinValue+0xf0>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <M_DIO_Void_GetPinValue+0xec>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	26 96       	adiw	r28, 0x06	; 6
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <M_DIO_Void_TogPin+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <M_DIO_Void_TogPin+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9a e0       	ldi	r25, 0x0A	; 10
    192a:	69 2f       	mov	r22, r25
    192c:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    1930:	89 2f       	mov	r24, r25
    1932:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9a e0       	ldi	r25, 0x0A	; 10
    1938:	69 2f       	mov	r22, r25
    193a:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    193e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3d 83       	std	Y+5, r19	; 0x05
    1948:	2c 83       	std	Y+4, r18	; 0x04
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	91 05       	cpc	r25, r1
    1952:	51 f1       	breq	.+84     	; 0x19a8 <M_DIO_Void_TogPin+0x92>
    1954:	2c 81       	ldd	r18, Y+4	; 0x04
    1956:	3d 81       	ldd	r19, Y+5	; 0x05
    1958:	23 30       	cpi	r18, 0x03	; 3
    195a:	31 05       	cpc	r19, r1
    195c:	34 f4       	brge	.+12     	; 0x196a <M_DIO_Void_TogPin+0x54>
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	61 f0       	breq	.+24     	; 0x1980 <M_DIO_Void_TogPin+0x6a>
    1968:	5a c0       	rjmp	.+180    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	23 30       	cpi	r18, 0x03	; 3
    1970:	31 05       	cpc	r19, r1
    1972:	71 f1       	breq	.+92     	; 0x19d0 <M_DIO_Void_TogPin+0xba>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	91 05       	cpc	r25, r1
    197c:	e9 f1       	breq	.+122    	; 0x19f8 <M_DIO_Void_TogPin+0xe2>
    197e:	4f c0       	rjmp	.+158    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <M_DIO_Void_TogPin+0x88>
    199a:	95 95       	asr	r25
    199c:	87 95       	ror	r24
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <M_DIO_Void_TogPin+0x84>
    19a2:	84 27       	eor	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	3b c0       	rjmp	.+118    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    19a8:	a8 e3       	ldi	r26, 0x38	; 56
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e8 e3       	ldi	r30, 0x38	; 56
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <M_DIO_Void_TogPin+0xb0>
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <M_DIO_Void_TogPin+0xac>
    19ca:	84 27       	eor	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	27 c0       	rjmp	.+78     	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    19d0:	a5 e3       	ldi	r26, 0x35	; 53
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e5 e3       	ldi	r30, 0x35	; 53
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <M_DIO_Void_TogPin+0xd8>
    19ea:	95 95       	asr	r25
    19ec:	87 95       	ror	r24
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <M_DIO_Void_TogPin+0xd4>
    19f2:	84 27       	eor	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <M_DIO_Void_TogPin+0x100>
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <M_DIO_Void_TogPin+0xfc>
    1a1a:	84 27       	eor	r24, r20
    1a1c:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2a 97       	sbiw	r28, 0x0a	; 10
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9a e0       	ldi	r25, 0x0A	; 10
    1a4a:	69 2f       	mov	r22, r25
    1a4c:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    1a50:	89 2f       	mov	r24, r25
    1a52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9a e0       	ldi	r25, 0x0A	; 10
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 8c 22 	call	0x4518	; 0x4518 <__udivmodqi4>
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3a 87       	std	Y+10, r19	; 0x0a
    1a68:	29 87       	std	Y+9, r18	; 0x09
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	39 f0       	breq	.+14     	; 0x1a80 <M_DIO_Void_SetPinPullUpRes+0x52>
    1a72:	29 85       	ldd	r18, Y+9	; 0x09
    1a74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a76:	21 30       	cpi	r18, 0x01	; 1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <M_DIO_Void_SetPinPullUpRes+0x50>
    1a7c:	76 c0       	rjmp	.+236    	; 0x1b6a <M_DIO_Void_SetPinPullUpRes+0x13c>
    1a7e:	e4 c0       	rjmp	.+456    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	38 87       	std	Y+8, r19	; 0x08
    1a88:	2f 83       	std	Y+7, r18	; 0x07
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	61 f1       	breq	.+88     	; 0x1aec <M_DIO_Void_SetPinPullUpRes+0xbe>
    1a94:	2f 81       	ldd	r18, Y+7	; 0x07
    1a96:	38 85       	ldd	r19, Y+8	; 0x08
    1a98:	23 30       	cpi	r18, 0x03	; 3
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <M_DIO_Void_SetPinPullUpRes+0x7c>
    1a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa0:	98 85       	ldd	r25, Y+8	; 0x08
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <M_DIO_Void_SetPinPullUpRes+0x94>
    1aa8:	cf c0       	rjmp	.+414    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    1aac:	38 85       	ldd	r19, Y+8	; 0x08
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	89 f1       	breq	.+98     	; 0x1b16 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab6:	98 85       	ldd	r25, Y+8	; 0x08
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <M_DIO_Void_SetPinPullUpRes+0x92>
    1abe:	40 c0       	rjmp	.+128    	; 0x1b40 <M_DIO_Void_SetPinPullUpRes+0x112>
    1ac0:	c3 c0       	rjmp	.+390    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <M_DIO_Void_SetPinPullUpRes+0xae>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	ae c0       	rjmp	.+348    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1aec:	a8 e3       	ldi	r26, 0x38	; 56
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e8 e3       	ldi	r30, 0x38	; 56
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <M_DIO_Void_SetPinPullUpRes+0xdc>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <M_DIO_Void_SetPinPullUpRes+0xd8>
    1b0e:	80 95       	com	r24
    1b10:	84 23       	and	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	99 c0       	rjmp	.+306    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1b16:	a5 e3       	ldi	r26, 0x35	; 53
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e3       	ldi	r30, 0x35	; 53
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <M_DIO_Void_SetPinPullUpRes+0x106>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <M_DIO_Void_SetPinPullUpRes+0x102>
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	84 c0       	rjmp	.+264    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1b40:	a2 e3       	ldi	r26, 0x32	; 50
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e2 e3       	ldi	r30, 0x32	; 50
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <M_DIO_Void_SetPinPullUpRes+0x130>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <M_DIO_Void_SetPinPullUpRes+0x12c>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	6f c0       	rjmp	.+222    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3e 83       	std	Y+6, r19	; 0x06
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	51 f1       	breq	.+84     	; 0x1bd2 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1b7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b80:	3e 81       	ldd	r19, Y+6	; 0x06
    1b82:	23 30       	cpi	r18, 0x03	; 3
    1b84:	31 05       	cpc	r19, r1
    1b86:	34 f4       	brge	.+12     	; 0x1b94 <M_DIO_Void_SetPinPullUpRes+0x166>
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	61 f0       	breq	.+24     	; 0x1baa <M_DIO_Void_SetPinPullUpRes+0x17c>
    1b92:	5a c0       	rjmp	.+180    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	71 f1       	breq	.+92     	; 0x1bfa <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	e9 f1       	breq	.+122    	; 0x1c22 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1ba8:	4f c0       	rjmp	.+158    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1baa:	ab e3       	ldi	r26, 0x3B	; 59
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e3       	ldi	r30, 0x3B	; 59
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <M_DIO_Void_SetPinPullUpRes+0x19a>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <M_DIO_Void_SetPinPullUpRes+0x196>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	3b c0       	rjmp	.+118    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1bd2:	a8 e3       	ldi	r26, 0x38	; 56
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <M_DIO_Void_SetPinPullUpRes+0x1be>
    1bf4:	84 2b       	or	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	27 c0       	rjmp	.+78     	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1bfa:	a5 e3       	ldi	r26, 0x35	; 53
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e3       	ldi	r30, 0x35	; 53
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1c22:	a2 e3       	ldi	r26, 0x32	; 50
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e2 e3       	ldi	r30, 0x32	; 50
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <M_DIO_Void_SetPinPullUpRes+0x212>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <M_DIO_Void_SetPinPullUpRes+0x20e>
    1c44:	84 2b       	or	r24, r20
    1c46:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1c48:	2a 96       	adiw	r28, 0x0a	; 10
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <M_EXTINT_Void_EXTINTInit+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3b 83       	std	Y+3, r19	; 0x03
    1c70:	2a 83       	std	Y+2, r18	; 0x02
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	f9 f0       	breq	.+62     	; 0x1cba <M_EXTINT_Void_EXTINTInit+0x60>
    1c7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	49 f1       	breq	.+82     	; 0x1cd8 <M_EXTINT_Void_EXTINTInit+0x7e>
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	99 f5       	brne	.+102    	; 0x1cf4 <M_EXTINT_Void_EXTINTInit+0x9a>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	82 60       	ori	r24, 0x02	; 2
    1ca8:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
    1caa:	ab e5       	ldi	r26, 0x5B	; 91
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 64       	ori	r24, 0x40	; 64
    1cb6:	8c 93       	st	X, r24
    1cb8:	1d c0       	rjmp	.+58     	; 0x1cf4 <M_EXTINT_Void_EXTINTInit+0x9a>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8b 7f       	andi	r24, 0xFB	; 251
    1cc6:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1cc8:	a5 e5       	ldi	r26, 0x55	; 85
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e5       	ldi	r30, 0x55	; 85
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 60       	ori	r24, 0x08	; 8
    1cd4:	8c 93       	st	X, r24
    1cd6:	0e c0       	rjmp	.+28     	; 0x1cf4 <M_EXTINT_Void_EXTINTInit+0x9a>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1cd8:	a4 e5       	ldi	r26, 0x54	; 84
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e4 e5       	ldi	r30, 0x54	; 84
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 64       	ori	r24, 0x40	; 64
    1ce4:	8c 93       	st	X, r24
#endif
		// to enable int2 local int
		SET_BIT(GICR_REG,INT2_BIT);
    1ce6:	ab e5       	ldi	r26, 0x5B	; 91
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e5       	ldi	r30, 0x5B	; 91
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 62       	ori	r24, 0x20	; 32
    1cf2:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <M_EXTINT_Void_SetCallBack+0x6>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <M_EXTINT_Void_SetCallBack+0x8>
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	7b 83       	std	Y+3, r23	; 0x03
    1d12:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <M_EXTINT_Void_SetCallBack+0x48>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	91 f0       	breq	.+36     	; 0x1d56 <M_EXTINT_Void_SetCallBack+0x56>
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	a1 f4       	brne	.+40     	; 0x1d62 <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	90 93 0f 02 	sts	0x020F, r25
    1d42:	80 93 0e 02 	sts	0x020E, r24
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	90 93 0b 02 	sts	0x020B, r25
    1d50:	80 93 0a 02 	sts	0x020A, r24
    1d54:	06 c0       	rjmp	.+12     	; 0x1d62 <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	90 93 0d 02 	sts	0x020D, r25
    1d5e:	80 93 0c 02 	sts	0x020C, r24
	default:                                       break;
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <EXINT1_Enable>:
void EXINT1_Enable (void ){
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT1_BIT);
    1d7a:	ab e5       	ldi	r26, 0x5B	; 91
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	eb e5       	ldi	r30, 0x5B	; 91
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	8c 93       	st	X, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <EXINT1_Disable>:

void EXINT1_Disable (void ){
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR_REG,INT1_BIT);
    1d96:	ab e5       	ldi	r26, 0x5B	; 91
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e5       	ldi	r30, 0x5B	; 91
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	8c 93       	st	X, r24
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <__vector_1>:

ISR(INT0_vect)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    1dd4:	e0 91 0e 02 	lds	r30, 0x020E
    1dd8:	f0 91 0f 02 	lds	r31, 0x020F
    1ddc:	09 95       	icall
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_2>:
ISR(INT1_vect)
{
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	2f 93       	push	r18
    1e10:	3f 93       	push	r19
    1e12:	4f 93       	push	r20
    1e14:	5f 93       	push	r21
    1e16:	6f 93       	push	r22
    1e18:	7f 93       	push	r23
    1e1a:	8f 93       	push	r24
    1e1c:	9f 93       	push	r25
    1e1e:	af 93       	push	r26
    1e20:	bf 93       	push	r27
    1e22:	ef 93       	push	r30
    1e24:	ff 93       	push	r31
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    1e2e:	e0 91 0a 02 	lds	r30, 0x020A
    1e32:	f0 91 0b 02 	lds	r31, 0x020B
    1e36:	09 95       	icall
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	ff 91       	pop	r31
    1e3e:	ef 91       	pop	r30
    1e40:	bf 91       	pop	r27
    1e42:	af 91       	pop	r26
    1e44:	9f 91       	pop	r25
    1e46:	8f 91       	pop	r24
    1e48:	7f 91       	pop	r23
    1e4a:	6f 91       	pop	r22
    1e4c:	5f 91       	pop	r21
    1e4e:	4f 91       	pop	r20
    1e50:	3f 91       	pop	r19
    1e52:	2f 91       	pop	r18
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_3>:
ISR(INT2_vect)
{
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	2f 93       	push	r18
    1e6a:	3f 93       	push	r19
    1e6c:	4f 93       	push	r20
    1e6e:	5f 93       	push	r21
    1e70:	6f 93       	push	r22
    1e72:	7f 93       	push	r23
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	af 93       	push	r26
    1e7a:	bf 93       	push	r27
    1e7c:	ef 93       	push	r30
    1e7e:	ff 93       	push	r31
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    1e88:	e0 91 0c 02 	lds	r30, 0x020C
    1e8c:	f0 91 0d 02 	lds	r31, 0x020D
    1e90:	09 95       	icall
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <GIE_voidEnable>:


void GIE_voidEnable(){
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1ec0:	af e5       	ldi	r26, 0x5F	; 95
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ef e5       	ldi	r30, 0x5F	; 95
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	8c 93       	st	X, r24
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <GIE_voidDisable>:

void GIE_voidDisable(){
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1edc:	af e5       	ldi	r26, 0x5F	; 95
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ef e5       	ldi	r30, 0x5F	; 95
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 77       	andi	r24, 0x7F	; 127
    1ee8:	8c 93       	st	X, r24
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <H_KeyPad_Void_KeyPadInit>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    1ef8:	83 e2       	ldi	r24, 0x23	; 35
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    1f00:	82 e2       	ldi	r24, 0x22	; 34
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    1f08:	81 e2       	ldi	r24, 0x21	; 33
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,LOW);
    1f18:	83 e2       	ldi	r24, 0x23	; 35
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    1f20:	82 e2       	ldi	r24, 0x22	; 34
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    1f28:	81 e2       	ldi	r24, 0x21	; 33
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	61 e0       	ldi	r22, 0x01	; 1
    1f34:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    1f38:	8f e2       	ldi	r24, 0x2F	; 47
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    1f40:	8e e2       	ldi	r24, 0x2E	; 46
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    1f48:	8d e2       	ldi	r24, 0x2D	; 45
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    1f50:	8b e2       	ldi	r24, 0x2B	; 43
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	af 97       	sbiw	r28, 0x2f	; 47
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[3] = {  KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    1f72:	ce 01       	movw	r24, r28
    1f74:	42 96       	adiw	r24, 0x12	; 18
    1f76:	9a a3       	std	Y+34, r25	; 0x22
    1f78:	89 a3       	std	Y+33, r24	; 0x21
    1f7a:	ee ee       	ldi	r30, 0xEE	; 238
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	fc a3       	std	Y+36, r31	; 0x24
    1f80:	eb a3       	std	Y+35, r30	; 0x23
    1f82:	f3 e0       	ldi	r31, 0x03	; 3
    1f84:	fd a3       	std	Y+37, r31	; 0x25
    1f86:	eb a1       	ldd	r30, Y+35	; 0x23
    1f88:	fc a1       	ldd	r31, Y+36	; 0x24
    1f8a:	00 80       	ld	r0, Z
    1f8c:	8b a1       	ldd	r24, Y+35	; 0x23
    1f8e:	9c a1       	ldd	r25, Y+36	; 0x24
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	9c a3       	std	Y+36, r25	; 0x24
    1f94:	8b a3       	std	Y+35, r24	; 0x23
    1f96:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f98:	fa a1       	ldd	r31, Y+34	; 0x22
    1f9a:	00 82       	st	Z, r0
    1f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	9a a3       	std	Y+34, r25	; 0x22
    1fa4:	89 a3       	std	Y+33, r24	; 0x21
    1fa6:	9d a1       	ldd	r25, Y+37	; 0x25
    1fa8:	91 50       	subi	r25, 0x01	; 1
    1faa:	9d a3       	std	Y+37, r25	; 0x25
    1fac:	ed a1       	ldd	r30, Y+37	; 0x25
    1fae:	ee 23       	and	r30, r30
    1fb0:	51 f7       	brne	.-44     	; 0x1f86 <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_U8_KeypadColPins[3] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN };
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	45 96       	adiw	r24, 0x15	; 21
    1fb6:	9f a3       	std	Y+39, r25	; 0x27
    1fb8:	8e a3       	std	Y+38, r24	; 0x26
    1fba:	eb ee       	ldi	r30, 0xEB	; 235
    1fbc:	f1 e0       	ldi	r31, 0x01	; 1
    1fbe:	f9 a7       	std	Y+41, r31	; 0x29
    1fc0:	e8 a7       	std	Y+40, r30	; 0x28
    1fc2:	f3 e0       	ldi	r31, 0x03	; 3
    1fc4:	fa a7       	std	Y+42, r31	; 0x2a
    1fc6:	e8 a5       	ldd	r30, Y+40	; 0x28
    1fc8:	f9 a5       	ldd	r31, Y+41	; 0x29
    1fca:	00 80       	ld	r0, Z
    1fcc:	88 a5       	ldd	r24, Y+40	; 0x28
    1fce:	99 a5       	ldd	r25, Y+41	; 0x29
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	99 a7       	std	Y+41, r25	; 0x29
    1fd4:	88 a7       	std	Y+40, r24	; 0x28
    1fd6:	ee a1       	ldd	r30, Y+38	; 0x26
    1fd8:	ff a1       	ldd	r31, Y+39	; 0x27
    1fda:	00 82       	st	Z, r0
    1fdc:	8e a1       	ldd	r24, Y+38	; 0x26
    1fde:	9f a1       	ldd	r25, Y+39	; 0x27
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	9f a3       	std	Y+39, r25	; 0x27
    1fe4:	8e a3       	std	Y+38, r24	; 0x26
    1fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe8:	91 50       	subi	r25, 0x01	; 1
    1fea:	9a a7       	std	Y+42, r25	; 0x2a
    1fec:	ea a5       	ldd	r30, Y+42	; 0x2a
    1fee:	ee 23       	and	r30, r30
    1ff0:	51 f7       	brne	.-44     	; 0x1fc6 <H_KeyPad_U8_KeyPadRead+0x68>
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [3][3] = {{ '1' , '2' , '3'},
			                          { '4' , '5' , '6'},
							          { '7' , '8' , '9'}};
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	48 96       	adiw	r24, 0x18	; 24
    1ff6:	9c a7       	std	Y+44, r25	; 0x2c
    1ff8:	8b a7       	std	Y+43, r24	; 0x2b
    1ffa:	e2 ee       	ldi	r30, 0xE2	; 226
    1ffc:	f1 e0       	ldi	r31, 0x01	; 1
    1ffe:	fe a7       	std	Y+46, r31	; 0x2e
    2000:	ed a7       	std	Y+45, r30	; 0x2d
    2002:	f9 e0       	ldi	r31, 0x09	; 9
    2004:	ff a7       	std	Y+47, r31	; 0x2f
    2006:	ed a5       	ldd	r30, Y+45	; 0x2d
    2008:	fe a5       	ldd	r31, Y+46	; 0x2e
    200a:	00 80       	ld	r0, Z
    200c:	8d a5       	ldd	r24, Y+45	; 0x2d
    200e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	9e a7       	std	Y+46, r25	; 0x2e
    2014:	8d a7       	std	Y+45, r24	; 0x2d
    2016:	eb a5       	ldd	r30, Y+43	; 0x2b
    2018:	fc a5       	ldd	r31, Y+44	; 0x2c
    201a:	00 82       	st	Z, r0
    201c:	8b a5       	ldd	r24, Y+43	; 0x2b
    201e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	9c a7       	std	Y+44, r25	; 0x2c
    2024:	8b a7       	std	Y+43, r24	; 0x2b
    2026:	9f a5       	ldd	r25, Y+47	; 0x2f
    2028:	91 50       	subi	r25, 0x01	; 1
    202a:	9f a7       	std	Y+47, r25	; 0x2f
    202c:	ef a5       	ldd	r30, Y+47	; 0x2f
    202e:	ee 23       	and	r30, r30
    2030:	51 f7       	brne	.-44     	; 0x2006 <H_KeyPad_U8_KeyPadRead+0xa8>
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_RowCounter = 0;
    2036:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_ColCounter = 0;
    2038:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
    203a:	18 8a       	std	Y+16, r1	; 0x10
    203c:	c8 c0       	rjmp	.+400    	; 0x21ce <H_KeyPad_U8_KeyPadRead+0x270>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    203e:	88 89       	ldd	r24, Y+16	; 0x10
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	ce 01       	movw	r24, r28
    2046:	42 96       	adiw	r24, 0x12	; 18
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	80 81       	ld	r24, Z
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 2 ; Local_U8_ColCounter++)
    2056:	1f 86       	std	Y+15, r1	; 0x0f
    2058:	a7 c0       	rjmp	.+334    	; 0x21a8 <H_KeyPad_U8_KeyPadRead+0x24a>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    205a:	8f 85       	ldd	r24, Y+15	; 0x0f
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	ce 01       	movw	r24, r28
    2062:	45 96       	adiw	r24, 0x15	; 21
    2064:	fc 01       	movw	r30, r24
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	80 81       	ld	r24, Z
    206c:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    2070:	88 23       	and	r24, r24
    2072:	09 f0       	breq	.+2      	; 0x2076 <H_KeyPad_U8_KeyPadRead+0x118>
    2074:	96 c0       	rjmp	.+300    	; 0x21a2 <H_KeyPad_U8_KeyPadRead+0x244>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e7       	ldi	r26, 0x70	; 112
    207c:	b2 e4       	ldi	r27, 0x42	; 66
    207e:	8b 87       	std	Y+11, r24	; 0x0b
    2080:	9c 87       	std	Y+12, r25	; 0x0c
    2082:	ad 87       	std	Y+13, r26	; 0x0d
    2084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	6b 85       	ldd	r22, Y+11	; 0x0b
    2088:	7c 85       	ldd	r23, Y+12	; 0x0c
    208a:	8d 85       	ldd	r24, Y+13	; 0x0d
    208c:	9e 85       	ldd	r25, Y+14	; 0x0e
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a e7       	ldi	r20, 0x7A	; 122
    2094:	55 e4       	ldi	r21, 0x45	; 69
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8f 83       	std	Y+7, r24	; 0x07
    20a0:	98 87       	std	Y+8, r25	; 0x08
    20a2:	a9 87       	std	Y+9, r26	; 0x09
    20a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <H_KeyPad_U8_KeyPadRead+0x16a>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <H_KeyPad_U8_KeyPadRead+0x1e8>
	else if (__tmp > 65535)
    20c8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ca:	78 85       	ldd	r23, Y+8	; 0x08
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	4c f5       	brge	.+82     	; 0x2132 <H_KeyPad_U8_KeyPadRead+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <H_KeyPad_U8_KeyPadRead+0x1ca>
    210a:	80 e9       	ldi	r24, 0x90	; 144
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	9c 83       	std	Y+4, r25	; 0x04
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <H_KeyPad_U8_KeyPadRead+0x1b8>
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f7       	brne	.-38     	; 0x210a <H_KeyPad_U8_KeyPadRead+0x1ac>
    2130:	14 c0       	rjmp	.+40     	; 0x215a <H_KeyPad_U8_KeyPadRead+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <H_KeyPad_U8_KeyPadRead+0x1f4>
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ce 01       	movw	r24, r28
    2162:	45 96       	adiw	r24, 0x15	; 21
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    2170:	88 23       	and	r24, r24
    2172:	b9 f4       	brne	.+46     	; 0x21a2 <H_KeyPad_U8_KeyPadRead+0x244>
				{
//					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    2174:	88 89       	ldd	r24, Y+16	; 0x10
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	48 2f       	mov	r20, r24
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	c9 01       	movw	r24, r18
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	82 0f       	add	r24, r18
    2188:	93 1f       	adc	r25, r19
    218a:	9e 01       	movw	r18, r28
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	82 0f       	add	r24, r18
    2192:	93 1f       	adc	r25, r19
    2194:	84 0f       	add	r24, r20
    2196:	95 1f       	adc	r25, r21
    2198:	fc 01       	movw	r30, r24
    219a:	77 96       	adiw	r30, 0x17	; 23
    219c:	80 81       	ld	r24, Z
    219e:	89 8b       	std	Y+17, r24	; 0x11
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <H_KeyPad_U8_KeyPadRead+0x252>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 2 ; Local_U8_ColCounter++)
    21a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8f 87       	std	Y+15, r24	; 0x0f
    21a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <H_KeyPad_U8_KeyPadRead+0x252>
    21ae:	55 cf       	rjmp	.-342    	; 0x205a <H_KeyPad_U8_KeyPadRead+0xfc>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    21b0:	88 89       	ldd	r24, Y+16	; 0x10
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	ce 01       	movw	r24, r28
    21b8:	42 96       	adiw	r24, 0x12	; 18
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	80 81       	ld	r24, Z
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
    21c8:	88 89       	ldd	r24, Y+16	; 0x10
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	88 8b       	std	Y+16, r24	; 0x10
    21ce:	88 89       	ldd	r24, Y+16	; 0x10
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	08 f4       	brcc	.+2      	; 0x21d6 <H_KeyPad_U8_KeyPadRead+0x278>
    21d4:	34 cf       	rjmp	.-408    	; 0x203e <H_KeyPad_U8_KeyPadRead+0xe0>

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
}
    21d8:	af 96       	adiw	r28, 0x2f	; 47
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    21f2:	84 e1       	ldi	r24, 0x14	; 20
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    21fa:	85 e1       	ldi	r24, 0x15	; 21
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    2202:	86 e1       	ldi	r24, 0x16	; 22
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    220a:	88 e1       	ldi	r24, 0x18	; 24
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    2212:	8d e0       	ldi	r24, 0x0D	; 13
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    221a:	8c e0       	ldi	r24, 0x0C	; 12
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    2222:	83 e3       	ldi	r24, 0x33	; 51
    2224:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    2228:	82 e3       	ldi	r24, 0x32	; 50
    222a:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    222e:	88 e2       	ldi	r24, 0x28	; 40
    2230:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    2234:	8c e0       	ldi	r24, 0x0C	; 12
    2236:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>


#endif
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	e9 97       	sbiw	r28, 0x39	; 57
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    2262:	8d e0       	ldi	r24, 0x0D	; 13
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    226a:	89 ad       	ldd	r24, Y+57	; 0x39
    226c:	82 95       	swap	r24
    226e:	8f 70       	andi	r24, 0x0F	; 15
    2270:	98 2f       	mov	r25, r24
    2272:	91 70       	andi	r25, 0x01	; 1
    2274:	84 e1       	ldi	r24, 0x14	; 20
    2276:	69 2f       	mov	r22, r25
    2278:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    227c:	89 ad       	ldd	r24, Y+57	; 0x39
    227e:	82 95       	swap	r24
    2280:	86 95       	lsr	r24
    2282:	87 70       	andi	r24, 0x07	; 7
    2284:	98 2f       	mov	r25, r24
    2286:	91 70       	andi	r25, 0x01	; 1
    2288:	85 e1       	ldi	r24, 0x15	; 21
    228a:	69 2f       	mov	r22, r25
    228c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    2290:	89 ad       	ldd	r24, Y+57	; 0x39
    2292:	82 95       	swap	r24
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	83 70       	andi	r24, 0x03	; 3
    229a:	98 2f       	mov	r25, r24
    229c:	91 70       	andi	r25, 0x01	; 1
    229e:	86 e1       	ldi	r24, 0x16	; 22
    22a0:	69 2f       	mov	r22, r25
    22a2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    22a6:	89 ad       	ldd	r24, Y+57	; 0x39
    22a8:	98 2f       	mov	r25, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	99 27       	eor	r25, r25
    22ae:	99 1f       	adc	r25, r25
    22b0:	88 e1       	ldi	r24, 0x18	; 24
    22b2:	69 2f       	mov	r22, r25
    22b4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    22b8:	8c e0       	ldi	r24, 0x0C	; 12
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e8       	ldi	r26, 0x80	; 128
    22c6:	bf e3       	ldi	r27, 0x3F	; 63
    22c8:	8d ab       	std	Y+53, r24	; 0x35
    22ca:	9e ab       	std	Y+54, r25	; 0x36
    22cc:	af ab       	std	Y+55, r26	; 0x37
    22ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	6d a9       	ldd	r22, Y+53	; 0x35
    22d2:	7e a9       	ldd	r23, Y+54	; 0x36
    22d4:	8f a9       	ldd	r24, Y+55	; 0x37
    22d6:	98 ad       	ldd	r25, Y+56	; 0x38
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	55 e4       	ldi	r21, 0x45	; 69
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	89 ab       	std	Y+49, r24	; 0x31
    22ea:	9a ab       	std	Y+50, r25	; 0x32
    22ec:	ab ab       	std	Y+51, r26	; 0x33
    22ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	98 ab       	std	Y+48, r25	; 0x30
    230e:	8f a7       	std	Y+47, r24	; 0x2f
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	6d a9       	ldd	r22, Y+53	; 0x35
    232c:	7e a9       	ldd	r23, Y+54	; 0x36
    232e:	8f a9       	ldd	r24, Y+55	; 0x37
    2330:	98 ad       	ldd	r25, Y+56	; 0x38
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <H_Lcd_Void_LCDWriteCharacter+0x126>
    2354:	80 e9       	ldi	r24, 0x90	; 144
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	9e a7       	std	Y+46, r25	; 0x2e
    235a:	8d a7       	std	Y+45, r24	; 0x2d
    235c:	8d a5       	ldd	r24, Y+45	; 0x2d
    235e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <H_Lcd_Void_LCDWriteCharacter+0x114>
    2364:	9e a7       	std	Y+46, r25	; 0x2e
    2366:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8f a5       	ldd	r24, Y+47	; 0x2f
    236a:	98 a9       	ldd	r25, Y+48	; 0x30
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	98 ab       	std	Y+48, r25	; 0x30
    2370:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <H_Lcd_Void_LCDWriteCharacter+0x108>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	69 a9       	ldd	r22, Y+49	; 0x31
    237e:	7a a9       	ldd	r23, Y+50	; 0x32
    2380:	8b a9       	ldd	r24, Y+51	; 0x33
    2382:	9c a9       	ldd	r25, Y+52	; 0x34
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	98 ab       	std	Y+48, r25	; 0x30
    238e:	8f a7       	std	Y+47, r24	; 0x2f
    2390:	8f a5       	ldd	r24, Y+47	; 0x2f
    2392:	98 a9       	ldd	r25, Y+48	; 0x30
    2394:	9c a7       	std	Y+44, r25	; 0x2c
    2396:	8b a7       	std	Y+43, r24	; 0x2b
    2398:	8b a5       	ldd	r24, Y+43	; 0x2b
    239a:	9c a5       	ldd	r25, Y+44	; 0x2c
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <H_Lcd_Void_LCDWriteCharacter+0x150>
    23a0:	9c a7       	std	Y+44, r25	; 0x2c
    23a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    23a4:	8c e0       	ldi	r24, 0x0C	; 12
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a0 e8       	ldi	r26, 0x80	; 128
    23b2:	bf e3       	ldi	r27, 0x3F	; 63
    23b4:	8f a3       	std	Y+39, r24	; 0x27
    23b6:	98 a7       	std	Y+40, r25	; 0x28
    23b8:	a9 a7       	std	Y+41, r26	; 0x29
    23ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	6f a1       	ldd	r22, Y+39	; 0x27
    23be:	78 a5       	ldd	r23, Y+40	; 0x28
    23c0:	89 a5       	ldd	r24, Y+41	; 0x29
    23c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8b a3       	std	Y+35, r24	; 0x23
    23d6:	9c a3       	std	Y+36, r25	; 0x24
    23d8:	ad a3       	std	Y+37, r26	; 0x25
    23da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23dc:	6b a1       	ldd	r22, Y+35	; 0x23
    23de:	7c a1       	ldd	r23, Y+36	; 0x24
    23e0:	8d a1       	ldd	r24, Y+37	; 0x25
    23e2:	9e a1       	ldd	r25, Y+38	; 0x26
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	2c f4       	brge	.+10     	; 0x23fe <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9a a3       	std	Y+34, r25	; 0x22
    23fa:	89 a3       	std	Y+33, r24	; 0x21
    23fc:	3f c0       	rjmp	.+126    	; 0x247c <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    23fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2400:	7c a1       	ldd	r23, Y+36	; 0x24
    2402:	8d a1       	ldd	r24, Y+37	; 0x25
    2404:	9e a1       	ldd	r25, Y+38	; 0x26
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	4c f5       	brge	.+82     	; 0x2468 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	6f a1       	ldd	r22, Y+39	; 0x27
    2418:	78 a5       	ldd	r23, Y+40	; 0x28
    241a:	89 a5       	ldd	r24, Y+41	; 0x29
    241c:	9a a5       	ldd	r25, Y+42	; 0x2a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9a a3       	std	Y+34, r25	; 0x22
    243c:	89 a3       	std	Y+33, r24	; 0x21
    243e:	0f c0       	rjmp	.+30     	; 0x245e <H_Lcd_Void_LCDWriteCharacter+0x212>
    2440:	80 e9       	ldi	r24, 0x90	; 144
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	98 a3       	std	Y+32, r25	; 0x20
    2446:	8f 8f       	std	Y+31, r24	; 0x1f
    2448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    244a:	98 a1       	ldd	r25, Y+32	; 0x20
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <H_Lcd_Void_LCDWriteCharacter+0x200>
    2450:	98 a3       	std	Y+32, r25	; 0x20
    2452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	89 a1       	ldd	r24, Y+33	; 0x21
    2460:	9a a1       	ldd	r25, Y+34	; 0x22
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	69 f7       	brne	.-38     	; 0x2440 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2468:	6b a1       	ldd	r22, Y+35	; 0x23
    246a:	7c a1       	ldd	r23, Y+36	; 0x24
    246c:	8d a1       	ldd	r24, Y+37	; 0x25
    246e:	9e a1       	ldd	r25, Y+38	; 0x26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9a a3       	std	Y+34, r25	; 0x22
    247a:	89 a3       	std	Y+33, r24	; 0x21
    247c:	89 a1       	ldd	r24, Y+33	; 0x21
    247e:	9a a1       	ldd	r25, Y+34	; 0x22
    2480:	9e 8f       	std	Y+30, r25	; 0x1e
    2482:	8d 8f       	std	Y+29, r24	; 0x1d
    2484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    248c:	9e 8f       	std	Y+30, r25	; 0x1e
    248e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2490:	89 ad       	ldd	r24, Y+57	; 0x39
    2492:	98 2f       	mov	r25, r24
    2494:	91 70       	andi	r25, 0x01	; 1
    2496:	84 e1       	ldi	r24, 0x14	; 20
    2498:	69 2f       	mov	r22, r25
    249a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    249e:	89 ad       	ldd	r24, Y+57	; 0x39
    24a0:	86 95       	lsr	r24
    24a2:	98 2f       	mov	r25, r24
    24a4:	91 70       	andi	r25, 0x01	; 1
    24a6:	85 e1       	ldi	r24, 0x15	; 21
    24a8:	69 2f       	mov	r22, r25
    24aa:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    24ae:	89 ad       	ldd	r24, Y+57	; 0x39
    24b0:	86 95       	lsr	r24
    24b2:	86 95       	lsr	r24
    24b4:	98 2f       	mov	r25, r24
    24b6:	91 70       	andi	r25, 0x01	; 1
    24b8:	86 e1       	ldi	r24, 0x16	; 22
    24ba:	69 2f       	mov	r22, r25
    24bc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    24c0:	89 ad       	ldd	r24, Y+57	; 0x39
    24c2:	86 95       	lsr	r24
    24c4:	86 95       	lsr	r24
    24c6:	86 95       	lsr	r24
    24c8:	98 2f       	mov	r25, r24
    24ca:	91 70       	andi	r25, 0x01	; 1
    24cc:	88 e1       	ldi	r24, 0x18	; 24
    24ce:	69 2f       	mov	r22, r25
    24d0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    24d4:	8c e0       	ldi	r24, 0x0C	; 12
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e8       	ldi	r26, 0x80	; 128
    24e2:	bf e3       	ldi	r27, 0x3F	; 63
    24e4:	89 8f       	std	Y+25, r24	; 0x19
    24e6:	9a 8f       	std	Y+26, r25	; 0x1a
    24e8:	ab 8f       	std	Y+27, r26	; 0x1b
    24ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	69 8d       	ldd	r22, Y+25	; 0x19
    24ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	55 e4       	ldi	r21, 0x45	; 69
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8d 8b       	std	Y+21, r24	; 0x15
    2506:	9e 8b       	std	Y+22, r25	; 0x16
    2508:	af 8b       	std	Y+23, r26	; 0x17
    250a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250c:	6d 89       	ldd	r22, Y+21	; 0x15
    250e:	7e 89       	ldd	r23, Y+22	; 0x16
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    252e:	6d 89       	ldd	r22, Y+21	; 0x15
    2530:	7e 89       	ldd	r23, Y+22	; 0x16
    2532:	8f 89       	ldd	r24, Y+23	; 0x17
    2534:	98 8d       	ldd	r25, Y+24	; 0x18
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9c 8b       	std	Y+20, r25	; 0x14
    256c:	8b 8b       	std	Y+19, r24	; 0x13
    256e:	0f c0       	rjmp	.+30     	; 0x258e <H_Lcd_Void_LCDWriteCharacter+0x342>
    2570:	80 e9       	ldi	r24, 0x90	; 144
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
    2578:	89 89       	ldd	r24, Y+17	; 0x11
    257a:	9a 89       	ldd	r25, Y+18	; 0x12
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <H_Lcd_Void_LCDWriteCharacter+0x330>
    2580:	9a 8b       	std	Y+18, r25	; 0x12
    2582:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8b 89       	ldd	r24, Y+19	; 0x13
    2586:	9c 89       	ldd	r25, Y+20	; 0x14
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <H_Lcd_Void_LCDWriteCharacter+0x324>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
    25ac:	8b 89       	ldd	r24, Y+19	; 0x13
    25ae:	9c 89       	ldd	r25, Y+20	; 0x14
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
    25b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b6:	98 89       	ldd	r25, Y+16	; 0x10
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    25bc:	98 8b       	std	Y+16, r25	; 0x10
    25be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    25c0:	8c e0       	ldi	r24, 0x0C	; 12
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 ea       	ldi	r26, 0xA0	; 160
    25ce:	b0 e4       	ldi	r27, 0x40	; 64
    25d0:	8b 87       	std	Y+11, r24	; 0x0b
    25d2:	9c 87       	std	Y+12, r25	; 0x0c
    25d4:	ad 87       	std	Y+13, r26	; 0x0d
    25d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	55 e4       	ldi	r21, 0x45	; 69
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8f 83       	std	Y+7, r24	; 0x07
    25f2:	98 87       	std	Y+8, r25	; 0x08
    25f4:	a9 87       	std	Y+9, r26	; 0x09
    25f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6b 85       	ldd	r22, Y+11	; 0x0b
    2634:	7c 85       	ldd	r23, Y+12	; 0x0c
    2636:	8d 85       	ldd	r24, Y+13	; 0x0d
    2638:	9e 85       	ldd	r25, Y+14	; 0x0e
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	0f c0       	rjmp	.+30     	; 0x267a <H_Lcd_Void_LCDWriteCharacter+0x42e>
    265c:	80 e9       	ldi	r24, 0x90	; 144
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <H_Lcd_Void_LCDWriteCharacter+0x410>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <H_Lcd_Void_LCDWriteCharacter+0x458>
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    26ac:	e9 96       	adiw	r28, 0x39	; 57
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	e9 97       	sbiw	r28, 0x39	; 57
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    26d4:	8d e0       	ldi	r24, 0x0D	; 13
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    26dc:	89 ad       	ldd	r24, Y+57	; 0x39
    26de:	82 95       	swap	r24
    26e0:	8f 70       	andi	r24, 0x0F	; 15
    26e2:	98 2f       	mov	r25, r24
    26e4:	91 70       	andi	r25, 0x01	; 1
    26e6:	84 e1       	ldi	r24, 0x14	; 20
    26e8:	69 2f       	mov	r22, r25
    26ea:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    26ee:	89 ad       	ldd	r24, Y+57	; 0x39
    26f0:	82 95       	swap	r24
    26f2:	86 95       	lsr	r24
    26f4:	87 70       	andi	r24, 0x07	; 7
    26f6:	98 2f       	mov	r25, r24
    26f8:	91 70       	andi	r25, 0x01	; 1
    26fa:	85 e1       	ldi	r24, 0x15	; 21
    26fc:	69 2f       	mov	r22, r25
    26fe:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    2702:	89 ad       	ldd	r24, Y+57	; 0x39
    2704:	82 95       	swap	r24
    2706:	86 95       	lsr	r24
    2708:	86 95       	lsr	r24
    270a:	83 70       	andi	r24, 0x03	; 3
    270c:	98 2f       	mov	r25, r24
    270e:	91 70       	andi	r25, 0x01	; 1
    2710:	86 e1       	ldi	r24, 0x16	; 22
    2712:	69 2f       	mov	r22, r25
    2714:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2718:	89 ad       	ldd	r24, Y+57	; 0x39
    271a:	98 2f       	mov	r25, r24
    271c:	99 1f       	adc	r25, r25
    271e:	99 27       	eor	r25, r25
    2720:	99 1f       	adc	r25, r25
    2722:	88 e1       	ldi	r24, 0x18	; 24
    2724:	69 2f       	mov	r22, r25
    2726:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    272a:	8c e0       	ldi	r24, 0x0C	; 12
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	8d ab       	std	Y+53, r24	; 0x35
    273c:	9e ab       	std	Y+54, r25	; 0x36
    273e:	af ab       	std	Y+55, r26	; 0x37
    2740:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6d a9       	ldd	r22, Y+53	; 0x35
    2744:	7e a9       	ldd	r23, Y+54	; 0x36
    2746:	8f a9       	ldd	r24, Y+55	; 0x37
    2748:	98 ad       	ldd	r25, Y+56	; 0x38
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a e7       	ldi	r20, 0x7A	; 122
    2750:	55 e4       	ldi	r21, 0x45	; 69
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	89 ab       	std	Y+49, r24	; 0x31
    275c:	9a ab       	std	Y+50, r25	; 0x32
    275e:	ab ab       	std	Y+51, r26	; 0x33
    2760:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2762:	69 a9       	ldd	r22, Y+49	; 0x31
    2764:	7a a9       	ldd	r23, Y+50	; 0x32
    2766:	8b a9       	ldd	r24, Y+51	; 0x33
    2768:	9c a9       	ldd	r25, Y+52	; 0x34
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	98 ab       	std	Y+48, r25	; 0x30
    2780:	8f a7       	std	Y+47, r24	; 0x2f
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    2784:	69 a9       	ldd	r22, Y+49	; 0x31
    2786:	7a a9       	ldd	r23, Y+50	; 0x32
    2788:	8b a9       	ldd	r24, Y+51	; 0x33
    278a:	9c a9       	ldd	r25, Y+52	; 0x34
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6d a9       	ldd	r22, Y+53	; 0x35
    279e:	7e a9       	ldd	r23, Y+54	; 0x36
    27a0:	8f a9       	ldd	r24, Y+55	; 0x37
    27a2:	98 ad       	ldd	r25, Y+56	; 0x38
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	98 ab       	std	Y+48, r25	; 0x30
    27c2:	8f a7       	std	Y+47, r24	; 0x2f
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <H_Lcd_Void_LCDWriteCommand+0x126>
    27c6:	80 e9       	ldi	r24, 0x90	; 144
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	9e a7       	std	Y+46, r25	; 0x2e
    27cc:	8d a7       	std	Y+45, r24	; 0x2d
    27ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <H_Lcd_Void_LCDWriteCommand+0x114>
    27d6:	9e a7       	std	Y+46, r25	; 0x2e
    27d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	8f a5       	ldd	r24, Y+47	; 0x2f
    27dc:	98 a9       	ldd	r25, Y+48	; 0x30
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e6:	98 a9       	ldd	r25, Y+48	; 0x30
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <H_Lcd_Void_LCDWriteCommand+0x108>
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	69 a9       	ldd	r22, Y+49	; 0x31
    27f0:	7a a9       	ldd	r23, Y+50	; 0x32
    27f2:	8b a9       	ldd	r24, Y+51	; 0x33
    27f4:	9c a9       	ldd	r25, Y+52	; 0x34
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	98 ab       	std	Y+48, r25	; 0x30
    2800:	8f a7       	std	Y+47, r24	; 0x2f
    2802:	8f a5       	ldd	r24, Y+47	; 0x2f
    2804:	98 a9       	ldd	r25, Y+48	; 0x30
    2806:	9c a7       	std	Y+44, r25	; 0x2c
    2808:	8b a7       	std	Y+43, r24	; 0x2b
    280a:	8b a5       	ldd	r24, Y+43	; 0x2b
    280c:	9c a5       	ldd	r25, Y+44	; 0x2c
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <H_Lcd_Void_LCDWriteCommand+0x150>
    2812:	9c a7       	std	Y+44, r25	; 0x2c
    2814:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2816:	8c e0       	ldi	r24, 0x0C	; 12
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e8       	ldi	r26, 0x80	; 128
    2824:	bf e3       	ldi	r27, 0x3F	; 63
    2826:	8f a3       	std	Y+39, r24	; 0x27
    2828:	98 a7       	std	Y+40, r25	; 0x28
    282a:	a9 a7       	std	Y+41, r26	; 0x29
    282c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	6f a1       	ldd	r22, Y+39	; 0x27
    2830:	78 a5       	ldd	r23, Y+40	; 0x28
    2832:	89 a5       	ldd	r24, Y+41	; 0x29
    2834:	9a a5       	ldd	r25, Y+42	; 0x2a
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	55 e4       	ldi	r21, 0x45	; 69
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	8b a3       	std	Y+35, r24	; 0x23
    2848:	9c a3       	std	Y+36, r25	; 0x24
    284a:	ad a3       	std	Y+37, r26	; 0x25
    284c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    284e:	6b a1       	ldd	r22, Y+35	; 0x23
    2850:	7c a1       	ldd	r23, Y+36	; 0x24
    2852:	8d a1       	ldd	r24, Y+37	; 0x25
    2854:	9e a1       	ldd	r25, Y+38	; 0x26
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9a a3       	std	Y+34, r25	; 0x22
    286c:	89 a3       	std	Y+33, r24	; 0x21
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2870:	6b a1       	ldd	r22, Y+35	; 0x23
    2872:	7c a1       	ldd	r23, Y+36	; 0x24
    2874:	8d a1       	ldd	r24, Y+37	; 0x25
    2876:	9e a1       	ldd	r25, Y+38	; 0x26
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	6f a1       	ldd	r22, Y+39	; 0x27
    288a:	78 a5       	ldd	r23, Y+40	; 0x28
    288c:	89 a5       	ldd	r24, Y+41	; 0x29
    288e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9a a3       	std	Y+34, r25	; 0x22
    28ae:	89 a3       	std	Y+33, r24	; 0x21
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <H_Lcd_Void_LCDWriteCommand+0x212>
    28b2:	80 e9       	ldi	r24, 0x90	; 144
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	98 a3       	std	Y+32, r25	; 0x20
    28b8:	8f 8f       	std	Y+31, r24	; 0x1f
    28ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28bc:	98 a1       	ldd	r25, Y+32	; 0x20
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <H_Lcd_Void_LCDWriteCommand+0x200>
    28c2:	98 a3       	std	Y+32, r25	; 0x20
    28c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	89 a1       	ldd	r24, Y+33	; 0x21
    28c8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	89 a1       	ldd	r24, Y+33	; 0x21
    28d2:	9a a1       	ldd	r25, Y+34	; 0x22
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <H_Lcd_Void_LCDWriteCommand+0x1f4>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	6b a1       	ldd	r22, Y+35	; 0x23
    28dc:	7c a1       	ldd	r23, Y+36	; 0x24
    28de:	8d a1       	ldd	r24, Y+37	; 0x25
    28e0:	9e a1       	ldd	r25, Y+38	; 0x26
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9a a3       	std	Y+34, r25	; 0x22
    28ec:	89 a3       	std	Y+33, r24	; 0x21
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	9a a1       	ldd	r25, Y+34	; 0x22
    28f2:	9e 8f       	std	Y+30, r25	; 0x1e
    28f4:	8d 8f       	std	Y+29, r24	; 0x1d
    28f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <H_Lcd_Void_LCDWriteCommand+0x23c>
    28fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2900:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    2902:	89 ad       	ldd	r24, Y+57	; 0x39
    2904:	98 2f       	mov	r25, r24
    2906:	91 70       	andi	r25, 0x01	; 1
    2908:	84 e1       	ldi	r24, 0x14	; 20
    290a:	69 2f       	mov	r22, r25
    290c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2910:	89 ad       	ldd	r24, Y+57	; 0x39
    2912:	86 95       	lsr	r24
    2914:	98 2f       	mov	r25, r24
    2916:	91 70       	andi	r25, 0x01	; 1
    2918:	85 e1       	ldi	r24, 0x15	; 21
    291a:	69 2f       	mov	r22, r25
    291c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2920:	89 ad       	ldd	r24, Y+57	; 0x39
    2922:	86 95       	lsr	r24
    2924:	86 95       	lsr	r24
    2926:	98 2f       	mov	r25, r24
    2928:	91 70       	andi	r25, 0x01	; 1
    292a:	86 e1       	ldi	r24, 0x16	; 22
    292c:	69 2f       	mov	r22, r25
    292e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    2932:	89 ad       	ldd	r24, Y+57	; 0x39
    2934:	86 95       	lsr	r24
    2936:	86 95       	lsr	r24
    2938:	86 95       	lsr	r24
    293a:	98 2f       	mov	r25, r24
    293c:	91 70       	andi	r25, 0x01	; 1
    293e:	88 e1       	ldi	r24, 0x18	; 24
    2940:	69 2f       	mov	r22, r25
    2942:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2946:	8c e0       	ldi	r24, 0x0C	; 12
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e8       	ldi	r26, 0x80	; 128
    2954:	bf e3       	ldi	r27, 0x3F	; 63
    2956:	89 8f       	std	Y+25, r24	; 0x19
    2958:	9a 8f       	std	Y+26, r25	; 0x1a
    295a:	ab 8f       	std	Y+27, r26	; 0x1b
    295c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a e7       	ldi	r20, 0x7A	; 122
    296c:	55 e4       	ldi	r21, 0x45	; 69
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8d 8b       	std	Y+21, r24	; 0x15
    2978:	9e 8b       	std	Y+22, r25	; 0x16
    297a:	af 8b       	std	Y+23, r26	; 0x17
    297c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <H_Lcd_Void_LCDWriteCommand+0x342>
    29e2:	80 e9       	ldi	r24, 0x90	; 144
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	9a 89       	ldd	r25, Y+18	; 0x12
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <H_Lcd_Void_LCDWriteCommand+0x330>
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <H_Lcd_Void_LCDWriteCommand+0x324>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
    2a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a28:	98 89       	ldd	r25, Y+16	; 0x10
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <H_Lcd_Void_LCDWriteCommand+0x36c>
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2a32:	8c e0       	ldi	r24, 0x0C	; 12
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a40:	b0 e4       	ldi	r27, 0x40	; 64
    2a42:	8b 87       	std	Y+11, r24	; 0x0b
    2a44:	9c 87       	std	Y+12, r25	; 0x0c
    2a46:	ad 87       	std	Y+13, r26	; 0x0d
    2a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	55 e4       	ldi	r21, 0x45	; 69
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8f 83       	std	Y+7, r24	; 0x07
    2a64:	98 87       	std	Y+8, r25	; 0x08
    2a66:	a9 87       	std	Y+9, r26	; 0x09
    2a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9e 83       	std	Y+6, r25	; 0x06
    2aca:	8d 83       	std	Y+5, r24	; 0x05
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <H_Lcd_Void_LCDWriteCommand+0x42e>
    2ace:	80 e9       	ldi	r24, 0x90	; 144
    2ad0:	91 e0       	ldi	r25, 0x01	; 1
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <H_Lcd_Void_LCDWriteCommand+0x41c>
    2ade:	9c 83       	std	Y+4, r25	; 0x04
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <H_Lcd_Void_LCDWriteCommand+0x410>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <H_Lcd_Void_LCDWriteCommand+0x458>
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2b1e:	e9 96       	adiw	r28, 0x39	; 57
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <H_Lcd_Void_LCDWriteString+0x6>
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9b 83       	std	Y+3, r25	; 0x03
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	0e c0       	rjmp	.+28     	; 0x2b60 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	fc 01       	movw	r30, r24
    2b50:	e2 0f       	add	r30, r18
    2b52:	f3 1f       	adc	r31, r19
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 26 11 	call	0x224c	; 0x224c <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	80 81       	ld	r24, Z
    2b72:	88 23       	and	r24, r24
    2b74:	39 f7       	brne	.-50     	; 0x2b44 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
}
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	2f 97       	sbiw	r28, 0x0f	; 15
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	6c 87       	std	Y+12, r22	; 0x0c
    2bb0:	7d 87       	std	Y+13, r23	; 0x0d
    2bb2:	8e 87       	std	Y+14, r24	; 0x0e
    2bb4:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2bb6:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2bb8:	8a e0       	ldi	r24, 0x0A	; 10
    2bba:	fe 01       	movw	r30, r28
    2bbc:	32 96       	adiw	r30, 0x02	; 2
    2bbe:	df 01       	movw	r26, r30
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	1d 92       	st	X+, r1
    2bc4:	9a 95       	dec	r25
    2bc6:	e9 f7       	brne	.-6      	; 0x2bc2 <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2bc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bcc:	ae 85       	ldd	r26, Y+14	; 0x0e
    2bce:	bf 85       	ldd	r27, Y+15	; 0x0f
    2bd0:	bb 23       	and	r27, r27
    2bd2:	94 f4       	brge	.+36     	; 0x2bf8 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    2bd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bd8:	ae 85       	ldd	r26, Y+14	; 0x0e
    2bda:	bf 85       	ldd	r27, Y+15	; 0x0f
    2bdc:	b0 95       	com	r27
    2bde:	a0 95       	com	r26
    2be0:	90 95       	com	r25
    2be2:	81 95       	neg	r24
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	af 4f       	sbci	r26, 0xFF	; 255
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	8c 87       	std	Y+12, r24	; 0x0c
    2bec:	9d 87       	std	Y+13, r25	; 0x0d
    2bee:	ae 87       	std	Y+14, r26	; 0x0e
    2bf0:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    2bf2:	8d e2       	ldi	r24, 0x2D	; 45
    2bf4:	0e 94 26 11 	call	0x224c	; 0x224c <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	08 2f       	mov	r16, r24
    2bfc:	11 27       	eor	r17, r17
    2bfe:	07 fd       	sbrc	r16, 7
    2c00:	10 95       	com	r17
    2c02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c04:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c06:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c08:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c0a:	2a e0       	ldi	r18, 0x0A	; 10
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodsi4>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	28 2f       	mov	r18, r24
    2c20:	ce 01       	movw	r24, r28
    2c22:	02 96       	adiw	r24, 0x02	; 2
    2c24:	fc 01       	movw	r30, r24
    2c26:	e0 0f       	add	r30, r16
    2c28:	f1 1f       	adc	r31, r17
    2c2a:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2c2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c30:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c32:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c34:	2a e0       	ldi	r18, 0x0A	; 10
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 ba 22 	call	0x4574	; 0x4574 <__divmodsi4>
    2c44:	da 01       	movw	r26, r20
    2c46:	c9 01       	movw	r24, r18
    2c48:	8c 87       	std	Y+12, r24	; 0x0c
    2c4a:	9d 87       	std	Y+13, r25	; 0x0d
    2c4c:	ae 87       	std	Y+14, r26	; 0x0e
    2c4e:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	8f 5f       	subi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    2c56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	a1 05       	cpc	r26, r1
    2c62:	b1 05       	cpc	r27, r1
    2c64:	49 f6       	brne	.-110    	; 0x2bf8 <H_Lcd_Void_LCDWriteNumber+0x62>
    2c66:	11 c0       	rjmp	.+34     	; 0x2c8a <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	81 50       	subi	r24, 0x01	; 1
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	33 27       	eor	r19, r19
    2c74:	27 fd       	sbrc	r18, 7
    2c76:	30 95       	com	r19
    2c78:	ce 01       	movw	r24, r28
    2c7a:	02 96       	adiw	r24, 0x02	; 2
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e2 0f       	add	r30, r18
    2c80:	f3 1f       	adc	r31, r19
    2c82:	80 81       	ld	r24, Z
    2c84:	80 5d       	subi	r24, 0xD0	; 208
    2c86:	0e 94 26 11 	call	0x224c	; 0x224c <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	18 16       	cp	r1, r24
    2c8e:	64 f3       	brlt	.-40     	; 0x2c68 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    2c90:	2f 96       	adiw	r28, 0x0f	; 15
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <H_Lcd_Void_LCDGoTo+0x6>
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <H_Lcd_Void_LCDGoTo+0x8>
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <H_Lcd_Void_LCDGoTo+0xa>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2cb8:	80 e8       	ldi	r24, 0x80	; 128
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	80 ec       	ldi	r24, 0xC0	; 192
    2cbe:	8a 83       	std	Y+2, r24	; 0x02
    2cc0:	84 e9       	ldi	r24, 0x94	; 148
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
    2cc4:	84 ed       	ldi	r24, 0xD4	; 212
    2cc6:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	ce 01       	movw	r24, r28
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e2 0f       	add	r30, r18
    2cd6:	f3 1f       	adc	r31, r19
    2cd8:	90 81       	ld	r25, Z
    2cda:	8e 81       	ldd	r24, Y+6	; 0x06
    2cdc:	89 0f       	add	r24, r25
    2cde:	0e 94 5f 13 	call	0x26be	; 0x26be <H_Lcd_Void_LCDWriteCommand>
}
    2ce2:	26 96       	adiw	r28, 0x06	; 6
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <H_LED_Void_LedInit>:

#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <H_LED_Void_LedInit+0x6>
    2cfa:	0f 92       	push	r0
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	3b 83       	std	Y+3, r19	; 0x03
    2d0a:	2a 83       	std	Y+2, r18	; 0x02
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	91 05       	cpc	r25, r1
    2d14:	d1 f0       	breq	.+52     	; 0x2d4a <H_LED_Void_LedInit+0x56>
    2d16:	2a 81       	ldd	r18, Y+2	; 0x02
    2d18:	3b 81       	ldd	r19, Y+3	; 0x03
    2d1a:	22 30       	cpi	r18, 0x02	; 2
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <H_LED_Void_LedInit+0x36>
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	61 f0       	breq	.+24     	; 0x2d40 <H_LED_Void_LedInit+0x4c>
    2d28:	1e c0       	rjmp	.+60     	; 0x2d66 <H_LED_Void_LedInit+0x72>
    2d2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d2c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	31 05       	cpc	r19, r1
    2d32:	81 f0       	breq	.+32     	; 0x2d54 <H_LED_Void_LedInit+0x60>
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	83 30       	cpi	r24, 0x03	; 3
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	81 f0       	breq	.+32     	; 0x2d5e <H_LED_Void_LedInit+0x6a>
    2d3e:	13 c0       	rjmp	.+38     	; 0x2d66 <H_LED_Void_LedInit+0x72>
	{
	case LED0:
		M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT);
    2d40:	8b e1       	ldi	r24, 0x1B	; 27
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2d48:	0e c0       	rjmp	.+28     	; 0x2d66 <H_LED_Void_LedInit+0x72>
		break;
	case LED1:
		M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT);
    2d4a:	8e e0       	ldi	r24, 0x0E	; 14
    2d4c:	61 e0       	ldi	r22, 0x01	; 1
    2d4e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2d52:	09 c0       	rjmp	.+18     	; 0x2d66 <H_LED_Void_LedInit+0x72>
		break;
	case LED2:
		M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT);
    2d54:	80 e1       	ldi	r24, 0x10	; 16
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <H_LED_Void_LedInit+0x72>
		break;
	case LED3:
		M_DIO_Void_SetPinDirection(LED3_PIN,OUTPUT);
    2d5e:	8f e0       	ldi	r24, 0x0F	; 15
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
		break;
	default:
		break;
	}
}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <H_LED_Void_LedSetOn>:
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <H_LED_Void_LedSetOn+0x6>
    2d78:	0f 92       	push	r0
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	3b 83       	std	Y+3, r19	; 0x03
    2d88:	2a 83       	std	Y+2, r18	; 0x02
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	91 05       	cpc	r25, r1
    2d92:	d1 f0       	breq	.+52     	; 0x2dc8 <H_LED_Void_LedSetOn+0x56>
    2d94:	2a 81       	ldd	r18, Y+2	; 0x02
    2d96:	3b 81       	ldd	r19, Y+3	; 0x03
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <H_LED_Void_LedSetOn+0x36>
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	61 f0       	breq	.+24     	; 0x2dbe <H_LED_Void_LedSetOn+0x4c>
    2da6:	1e c0       	rjmp	.+60     	; 0x2de4 <H_LED_Void_LedSetOn+0x72>
    2da8:	2a 81       	ldd	r18, Y+2	; 0x02
    2daa:	3b 81       	ldd	r19, Y+3	; 0x03
    2dac:	22 30       	cpi	r18, 0x02	; 2
    2dae:	31 05       	cpc	r19, r1
    2db0:	81 f0       	breq	.+32     	; 0x2dd2 <H_LED_Void_LedSetOn+0x60>
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	83 30       	cpi	r24, 0x03	; 3
    2db8:	91 05       	cpc	r25, r1
    2dba:	81 f0       	breq	.+32     	; 0x2ddc <H_LED_Void_LedSetOn+0x6a>
    2dbc:	13 c0       	rjmp	.+38     	; 0x2de4 <H_LED_Void_LedSetOn+0x72>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    2dbe:	8b e1       	ldi	r24, 0x1B	; 27
    2dc0:	61 e0       	ldi	r22, 0x01	; 1
    2dc2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2dc6:	0e c0       	rjmp	.+28     	; 0x2de4 <H_LED_Void_LedSetOn+0x72>
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    2dc8:	8e e0       	ldi	r24, 0x0E	; 14
    2dca:	61 e0       	ldi	r22, 0x01	; 1
    2dcc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <H_LED_Void_LedSetOn+0x72>
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    2dd2:	80 e1       	ldi	r24, 0x10	; 16
    2dd4:	61 e0       	ldi	r22, 0x01	; 1
    2dd6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <H_LED_Void_LedSetOn+0x72>
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,HIGH); break;
    2ddc:	8f e0       	ldi	r24, 0x0F	; 15
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	default:                                          break;
	}
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <H_LED_Void_LedSetOff>:
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <H_LED_Void_LedSetOff+0x6>
    2df6:	0f 92       	push	r0
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	3b 83       	std	Y+3, r19	; 0x03
    2e06:	2a 83       	std	Y+2, r18	; 0x02
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	91 05       	cpc	r25, r1
    2e10:	d1 f0       	breq	.+52     	; 0x2e46 <H_LED_Void_LedSetOff+0x56>
    2e12:	2a 81       	ldd	r18, Y+2	; 0x02
    2e14:	3b 81       	ldd	r19, Y+3	; 0x03
    2e16:	22 30       	cpi	r18, 0x02	; 2
    2e18:	31 05       	cpc	r19, r1
    2e1a:	2c f4       	brge	.+10     	; 0x2e26 <H_LED_Void_LedSetOff+0x36>
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	61 f0       	breq	.+24     	; 0x2e3c <H_LED_Void_LedSetOff+0x4c>
    2e24:	1e c0       	rjmp	.+60     	; 0x2e62 <H_LED_Void_LedSetOff+0x72>
    2e26:	2a 81       	ldd	r18, Y+2	; 0x02
    2e28:	3b 81       	ldd	r19, Y+3	; 0x03
    2e2a:	22 30       	cpi	r18, 0x02	; 2
    2e2c:	31 05       	cpc	r19, r1
    2e2e:	81 f0       	breq	.+32     	; 0x2e50 <H_LED_Void_LedSetOff+0x60>
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	83 30       	cpi	r24, 0x03	; 3
    2e36:	91 05       	cpc	r25, r1
    2e38:	81 f0       	breq	.+32     	; 0x2e5a <H_LED_Void_LedSetOff+0x6a>
    2e3a:	13 c0       	rjmp	.+38     	; 0x2e62 <H_LED_Void_LedSetOff+0x72>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    2e3c:	8b e1       	ldi	r24, 0x1B	; 27
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2e44:	0e c0       	rjmp	.+28     	; 0x2e62 <H_LED_Void_LedSetOff+0x72>
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    2e46:	8e e0       	ldi	r24, 0x0E	; 14
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2e4e:	09 c0       	rjmp	.+18     	; 0x2e62 <H_LED_Void_LedSetOff+0x72>
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    2e50:	80 e1       	ldi	r24, 0x10	; 16
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <H_LED_Void_LedSetOff+0x72>
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,LOW); break;
    2e5a:	8f e0       	ldi	r24, 0x0F	; 15
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	default:                                         break;
	}
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <H_LED_Void_LedToggle>:


void H_LED_Void_LedToggle(u8 Copy_U8_Led)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <H_LED_Void_LedToggle+0x6>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    u8 current_state = M_DIO_Void_GetPinValue(Copy_U8_Led);
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    2e80:	89 83       	std	Y+1, r24	; 0x01

    if (current_state == HIGH)
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	21 f4       	brne	.+8      	; 0x2e90 <H_LED_Void_LedToggle+0x22>
    {
        H_LED_Void_LedSetOff(Copy_U8_Led);
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <H_LED_Void_LedSetOff>
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <H_LED_Void_LedToggle+0x2e>
    }
    else if (current_state == LOW)
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	88 23       	and	r24, r24
    2e94:	19 f4       	brne	.+6      	; 0x2e9c <H_LED_Void_LedToggle+0x2e>
    {
        H_LED_Void_LedSetOn(Copy_U8_Led);
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_LED_Void_LedSetOn>
    }
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <Driver_Mode_Button>:

void set_relay_Mode(u8 Mode);


/*ISR Function , switch between the drive mode*/
void Driver_Mode_Button(void){
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	2e 97       	sbiw	r28, 0x0e	; 14
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 ef       	ldi	r26, 0xF0	; 240
    2ec0:	b1 e4       	ldi	r27, 0x41	; 65
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a e7       	ldi	r20, 0x7A	; 122
    2ed8:	55 e4       	ldi	r21, 0x45	; 69
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <Driver_Mode_Button+0x66>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <Driver_Mode_Button+0xe4>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <Driver_Mode_Button+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <Driver_Mode_Button+0xc6>
    2f4e:	80 e9       	ldi	r24, 0x90	; 144
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <Driver_Mode_Button+0xb4>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <Driver_Mode_Button+0xa8>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <Driver_Mode_Button+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <Driver_Mode_Button+0xf0>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01

	//	H_LED_Void_LedSetOn(E_LED_Green);

	_delay_ms(30);
	Drive_Mode_Counter++;
    2f9e:	80 91 12 02 	lds	r24, 0x0212
    2fa2:	8f 5f       	subi	r24, 0xFF	; 255
    2fa4:	80 93 12 02 	sts	0x0212, r24

	if (Drive_Mode_Counter == 3){
    2fa8:	80 91 12 02 	lds	r24, 0x0212
    2fac:	83 30       	cpi	r24, 0x03	; 3
    2fae:	11 f4       	brne	.+4      	; 0x2fb4 <Driver_Mode_Button+0x10e>

		Drive_Mode_Counter = E_Mode_Normal;
    2fb0:	10 92 12 02 	sts	0x0212, r1
		//H_Buzzer_Void_BuzzerOnce();

	}

	Drive_Mode();
    2fb4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <Drive_Mode>

}
    2fb8:	2e 96       	adiw	r28, 0x0e	; 14
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <main>:


/*--------------------------------------------------------------------------------------------*/
/*   Main Function */
/*--------------------------------------------------------------------------------------------*/
int main(void){
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62



	G_PAGE = E_PAGE_1;
    2fd2:	10 92 f8 01 	sts	0x01F8, r1
	G_Break_Control = E_ON;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 f6 01 	sts	0x01F6, r24
	/* Func to init all system*/
	Init_Func();
    2fdc:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Init_Func>
//	_delay_ms(500);
//	set_relay_Mode(E_OFF); // Turn off the relay
//	_delay_ms(500);


	Speed_Limit_Mode(E_OFF);
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <Speed_Limit_Mode>
	Menu_On_Screen(G_PAGE);
    2fe6:	80 91 f8 01 	lds	r24, 0x01F8
    2fea:	0e 94 84 1a 	call	0x3508	; 0x3508 <Menu_On_Screen>

	while(1){
		System();
    2fee:	0e 94 2e 18 	call	0x305c	; 0x305c <System>
		Speed_alert();
    2ff2:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Speed_alert>
    2ff6:	fb cf       	rjmp	.-10     	; 0x2fee <main+0x24>

00002ff8 <Init_Func>:
		//		Menu_On_Screen(G_PAGE);
	}
}

/*Init Function for LCD BUZZER AND LEDS PUSHBUTTONS*/
void Init_Func(void){
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62

	/*LED-Init*/
	H_LED_Void_LedInit(E_LED_Red);
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <H_LED_Void_LedInit>
	//	H_LED_Void_LedInit(E_LED_Green);
	H_LED_Void_LedInit(E_LED_Blue);
    3006:	83 e0       	ldi	r24, 0x03	; 3
    3008:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(E_LED_Yellow);
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <H_LED_Void_LedInit>
	/*Pushbutton-Init
	 *Make it Pull-Up*/

	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_3);
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <H_PushButton_Void_PushButtonInit>
	M_DIO_Void_SetPinPullUpRes(PD7_PIN,ENABLE);
    3018:	8f e2       	ldi	r24, 0x2F	; 47
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <M_DIO_Void_SetPinPullUpRes>

	 M_DIO_Void_SetPinDirection(PC7_PIN,OUTPUT);
    3020:	85 e2       	ldi	r24, 0x25	; 37
    3022:	61 e0       	ldi	r22, 0x01	; 1
    3024:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>



	/*LCD-Init*/
	H_Lcd_Void_LCDInit();
    3028:	0e 94 f5 10 	call	0x21ea	; 0x21ea <H_Lcd_Void_LCDInit>
	/*Buzzer-Init*/
	H_Buzzer_Void_BuzzerInit();
    302c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <H_Buzzer_Void_BuzzerInit>
	/*ADC Init*/
	M_ADC_Void_ADCInit();
    3030:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_ADC_Void_ADCInit>
	/*Interrupt Enable*/
	M_EXTINT_Void_EXTINTInit(INT1_CHANNEL);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <M_EXTINT_Void_EXTINTInit>
	M_EXTINT_Void_SetCallBack(INT1_CHANNEL,Driver_Mode_Button);
    303a:	23 e5       	ldi	r18, 0x53	; 83
    303c:	37 e1       	ldi	r19, 0x17	; 23
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	b9 01       	movw	r22, r18
    3042:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <M_EXTINT_Void_SetCallBack>
	GIE_voidEnable();
    3046:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GIE_voidEnable>
	M_ADC_Void_ADCInit();
    304a:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_ADC_Void_ADCInit>
	H_KeyPad_Void_KeyPadInit();
    304e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <H_KeyPad_Void_KeyPadInit>

	M_Timer_Void_TimerInit();
    3052:	0e 94 06 20 	call	0x400c	; 0x400c <M_Timer_Void_TimerInit>



}
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <System>:
/*--------------------------------------------------------------------------------------------*/
/*   System Func    */
/*--------------------------------------------------------------------------------------------*/
void System(void){
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <System+0x6>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62

	switch (g_DriveModeState) {
    3066:	80 91 f2 01 	lds	r24, 0x01F2
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3a 83       	std	Y+2, r19	; 0x02
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	61 f0       	breq	.+24     	; 0x3094 <System+0x38>
    307c:	29 81       	ldd	r18, Y+1	; 0x01
    307e:	3a 81       	ldd	r19, Y+2	; 0x02
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	51 f0       	breq	.+20     	; 0x309a <System+0x3e>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	41 f4       	brne	.+16     	; 0x309e <System+0x42>

	case E_Mode_Normal:

		Normal_Mode_Func();
    308e:	0e 94 0d 1a 	call	0x341a	; 0x341a <Normal_Mode_Func>
    3092:	05 c0       	rjmp	.+10     	; 0x309e <System+0x42>

		break;
	case E_Mode_Drive:

		Direct_Mode_Func();
    3094:	0e 94 22 1a 	call	0x3444	; 0x3444 <Direct_Mode_Func>
    3098:	02 c0       	rjmp	.+4      	; 0x309e <System+0x42>

		break;

	case E_Mode_Reverse:

		Reverse_Mode_Func();
    309a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <Reverse_Mode_Func>

		break;
	default:
		break;
	}
}
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <printCCRMode>:





void printCCRMode(CCS_E mode) {
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <printCCRMode+0x6>
    30ae:	0f 92       	push	r0
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	89 83       	std	Y+1, r24	; 0x01

	H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_06);
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	65 e0       	ldi	r22, 0x05	; 5
    30ba:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>

	switch (mode) {
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	3b 83       	std	Y+3, r19	; 0x03
    30c6:	2a 83       	std	Y+2, r18	; 0x02
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	9b 81       	ldd	r25, Y+3	; 0x03
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	31 f0       	breq	.+12     	; 0x30dc <printCCRMode+0x34>
    30d0:	2a 81       	ldd	r18, Y+2	; 0x02
    30d2:	3b 81       	ldd	r19, Y+3	; 0x03
    30d4:	21 30       	cpi	r18, 0x01	; 1
    30d6:	31 05       	cpc	r19, r1
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <printCCRMode+0x3e>
    30da:	09 c0       	rjmp	.+18     	; 0x30ee <printCCRMode+0x46>

	case E_OFF:
		H_Lcd_Void_LCDWriteString((u8*)"OFF");
    30dc:	80 e6       	ldi	r24, 0x60	; 96
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    30e4:	04 c0       	rjmp	.+8      	; 0x30ee <printCCRMode+0x46>

		break;

	case E_ON:
		H_Lcd_Void_LCDWriteString((u8*)"ON ");
    30e6:	84 e6       	ldi	r24, 0x64	; 100
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		break;

	default:
		break;
	}
}
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <Accelerator_Button>:

void Accelerator_Button (void ){
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
	Display_Speed();
    3102:	0e 94 01 1c 	call	0x3802	; 0x3802 <Display_Speed>
	if (G_Accelerator_Control == E_ON){
    3106:	80 91 f5 01 	lds	r24, 0x01F5
    310a:	81 30       	cpi	r24, 0x01	; 1
    310c:	e9 f4       	brne	.+58     	; 0x3148 <Accelerator_Button+0x4e>
		if(!H_PushButton_U8_PushButtonRead(E_BTN_Accreration)){
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <H_PushButton_U8_PushButtonRead>
    3114:	88 23       	and	r24, r24
    3116:	81 f4       	brne	.+32     	; 0x3138 <Accelerator_Button+0x3e>

			H_Buzzer_Void_BuzzerOnce();
    3118:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <H_Buzzer_Void_BuzzerOnce>
			H_LED_Void_LedSetOn(E_LED_Blue);
    311c:	83 e0       	ldi	r24, 0x03	; 3
    311e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_LED_Void_LedSetOn>
			G_CCS_State = E_OFF;
    3122:	10 92 f4 01 	sts	0x01F4, r1
			H_LED_Void_LedSetOff(E_LED_Green);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <H_LED_Void_LedSetOff>
			while(!H_PushButton_U8_PushButtonRead(E_BTN_Accreration));
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <H_PushButton_U8_PushButtonRead>
    3132:	88 23       	and	r24, r24
    3134:	d9 f3       	breq	.-10     	; 0x312c <Accelerator_Button+0x32>
    3136:	08 c0       	rjmp	.+16     	; 0x3148 <Accelerator_Button+0x4e>

		}else if (H_PushButton_U8_PushButtonRead(E_BTN_Accreration)){
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <H_PushButton_U8_PushButtonRead>
    313e:	88 23       	and	r24, r24
    3140:	19 f0       	breq	.+6      	; 0x3148 <Accelerator_Button+0x4e>
			H_LED_Void_LedSetOff(E_LED_Blue);
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <H_LED_Void_LedSetOff>
		}

	}
}
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <Break_Button>:


void Break_Button (void ){
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	0f 92       	push	r0
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62

	u8 KeyPressedValue ;

	if (G_Break_Control == E_ON ){
    3158:	80 91 f6 01 	lds	r24, 0x01F6
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	a1 f4       	brne	.+40     	; 0x3188 <Break_Button+0x3a>


		KeyPressedValue = H_KeyPad_U8_KeyPadRead();
    3160:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <H_KeyPad_U8_KeyPadRead>
    3164:	89 83       	std	Y+1, r24	; 0x01


		if  (KeyPressedValue == '3' ){
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	83 33       	cpi	r24, 0x33	; 51
    316a:	31 f4       	brne	.+12     	; 0x3178 <Break_Button+0x2a>
			H_LED_Void_LedSetOn(E_LED_Red);
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_LED_Void_LedSetOn>
			EXINT1_Enable();
    3172:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <EXINT1_Enable>
    3176:	08 c0       	rjmp	.+16     	; 0x3188 <Break_Button+0x3a>

		}
		else if (KeyPressedValue == KEYPAD_RELEASED){
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	81 30       	cpi	r24, 0x01	; 1
    317c:	29 f4       	brne	.+10     	; 0x3188 <Break_Button+0x3a>
			H_LED_Void_LedSetOff(E_LED_Red);
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <H_LED_Void_LedSetOff>
			EXINT1_Disable();
    3184:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <EXINT1_Disable>
		}
	}
}
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <CCS_Button>:
//	}
//
//}


void CCS_Button(void) {
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62

	static u8 Flag = 0 ;
	u8 KeyPressedValue ;

	if (G_CCS_State_Control == E_ON ){
    319a:	80 91 f3 01 	lds	r24, 0x01F3
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	e1 f4       	brne	.+56     	; 0x31da <CCS_Button+0x4a>


		KeyPressedValue = H_KeyPad_U8_KeyPadRead();
    31a2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <H_KeyPad_U8_KeyPadRead>
    31a6:	89 83       	std	Y+1, r24	; 0x01


		if  (KeyPressedValue == '2' ){
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	82 33       	cpi	r24, 0x32	; 50
    31ac:	e1 f4       	brne	.+56     	; 0x31e6 <CCS_Button+0x56>

			Flag++;
    31ae:	80 91 fb 01 	lds	r24, 0x01FB
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	80 93 fb 01 	sts	0x01FB, r24
			if (Flag == 1){
    31b8:	80 91 fb 01 	lds	r24, 0x01FB
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	21 f4       	brne	.+8      	; 0x31c8 <CCS_Button+0x38>

				//				H_LED_Void_LedSetOn(E_LED_Green);
				G_CCS_State  = E_ON;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	80 93 f4 01 	sts	0x01F4, r24
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <CCS_Button+0x56>


			}

			else if (Flag == 2) {
    31c8:	80 91 fb 01 	lds	r24, 0x01FB
    31cc:	82 30       	cpi	r24, 0x02	; 2
    31ce:	59 f4       	brne	.+22     	; 0x31e6 <CCS_Button+0x56>
				//				H_LED_Void_LedSetOff(E_LED_Green);
				G_CCS_State  = E_OFF;
    31d0:	10 92 f4 01 	sts	0x01F4, r1
				Flag = 0;
    31d4:	10 92 fb 01 	sts	0x01FB, r1
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <CCS_Button+0x56>
			}
		}
	}

	else if(G_CCS_State_Control == E_OFF){
    31da:	80 91 f3 01 	lds	r24, 0x01F3
    31de:	88 23       	and	r24, r24
    31e0:	11 f4       	brne	.+4      	; 0x31e6 <CCS_Button+0x56>
		// Turn on green LED and beep once
		//		H_LED_Void_LedSetOff(E_LED_Green);
		G_CCS_State = E_OFF;
    31e2:	10 92 f4 01 	sts	0x01F4, r1
	}



}
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <DriveModeAlert>:


/*Alert Function for any wrong access */
void DriveModeAlert(void){
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	6c 97       	sbiw	r28, 0x1c	; 28
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61

	H_Buzzer_Void_BuzzerOnce();
    3202:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <H_Buzzer_Void_BuzzerOnce>
	H_LED_Void_LedSetOn(E_LED_Yellow);
    3206:	82 e0       	ldi	r24, 0x02	; 2
    3208:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_LED_Void_LedSetOn>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	aa e7       	ldi	r26, 0x7A	; 122
    3212:	b4 e4       	ldi	r27, 0x44	; 68
    3214:	89 8f       	std	Y+25, r24	; 0x19
    3216:	9a 8f       	std	Y+26, r25	; 0x1a
    3218:	ab 8f       	std	Y+27, r26	; 0x1b
    321a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	69 8d       	ldd	r22, Y+25	; 0x19
    321e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	4a e7       	ldi	r20, 0x7A	; 122
    322a:	55 e4       	ldi	r21, 0x45	; 69
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	8d 8b       	std	Y+21, r24	; 0x15
    3236:	9e 8b       	std	Y+22, r25	; 0x16
    3238:	af 8b       	std	Y+23, r26	; 0x17
    323a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    323c:	6d 89       	ldd	r22, Y+21	; 0x15
    323e:	7e 89       	ldd	r23, Y+22	; 0x16
    3240:	8f 89       	ldd	r24, Y+23	; 0x17
    3242:	98 8d       	ldd	r25, Y+24	; 0x18
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	2c f4       	brge	.+10     	; 0x325e <DriveModeAlert+0x70>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	3f c0       	rjmp	.+126    	; 0x32dc <DriveModeAlert+0xee>
	else if (__tmp > 65535)
    325e:	6d 89       	ldd	r22, Y+21	; 0x15
    3260:	7e 89       	ldd	r23, Y+22	; 0x16
    3262:	8f 89       	ldd	r24, Y+23	; 0x17
    3264:	98 8d       	ldd	r25, Y+24	; 0x18
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	3f ef       	ldi	r19, 0xFF	; 255
    326a:	4f e7       	ldi	r20, 0x7F	; 127
    326c:	57 e4       	ldi	r21, 0x47	; 71
    326e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3272:	18 16       	cp	r1, r24
    3274:	4c f5       	brge	.+82     	; 0x32c8 <DriveModeAlert+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3276:	69 8d       	ldd	r22, Y+25	; 0x19
    3278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e2       	ldi	r20, 0x20	; 32
    3284:	51 e4       	ldi	r21, 0x41	; 65
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9c 8b       	std	Y+20, r25	; 0x14
    329c:	8b 8b       	std	Y+19, r24	; 0x13
    329e:	0f c0       	rjmp	.+30     	; 0x32be <DriveModeAlert+0xd0>
    32a0:	80 e9       	ldi	r24, 0x90	; 144
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	9a 8b       	std	Y+18, r25	; 0x12
    32a6:	89 8b       	std	Y+17, r24	; 0x11
    32a8:	89 89       	ldd	r24, Y+17	; 0x11
    32aa:	9a 89       	ldd	r25, Y+18	; 0x12
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <DriveModeAlert+0xbe>
    32b0:	9a 8b       	std	Y+18, r25	; 0x12
    32b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	9c 8b       	std	Y+20, r25	; 0x14
    32bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	8b 89       	ldd	r24, Y+19	; 0x13
    32c0:	9c 89       	ldd	r25, Y+20	; 0x14
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <DriveModeAlert+0xb2>
    32c6:	14 c0       	rjmp	.+40     	; 0x32f0 <DriveModeAlert+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ca:	7e 89       	ldd	r23, Y+22	; 0x16
    32cc:	8f 89       	ldd	r24, Y+23	; 0x17
    32ce:	98 8d       	ldd	r25, Y+24	; 0x18
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9c 8b       	std	Y+20, r25	; 0x14
    32da:	8b 8b       	std	Y+19, r24	; 0x13
    32dc:	8b 89       	ldd	r24, Y+19	; 0x13
    32de:	9c 89       	ldd	r25, Y+20	; 0x14
    32e0:	98 8b       	std	Y+16, r25	; 0x10
    32e2:	8f 87       	std	Y+15, r24	; 0x0f
    32e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e6:	98 89       	ldd	r25, Y+16	; 0x10
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <DriveModeAlert+0xfa>
    32ec:	98 8b       	std	Y+16, r25	; 0x10
    32ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	H_LED_Void_LedSetOff(E_LED_Yellow);
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <H_LED_Void_LedSetOff>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	aa e7       	ldi	r26, 0x7A	; 122
    32fc:	b4 e4       	ldi	r27, 0x44	; 68
    32fe:	8b 87       	std	Y+11, r24	; 0x0b
    3300:	9c 87       	std	Y+12, r25	; 0x0c
    3302:	ad 87       	std	Y+13, r26	; 0x0d
    3304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a e7       	ldi	r20, 0x7A	; 122
    3314:	55 e4       	ldi	r21, 0x45	; 69
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	8f 83       	std	Y+7, r24	; 0x07
    3320:	98 87       	std	Y+8, r25	; 0x08
    3322:	a9 87       	std	Y+9, r26	; 0x09
    3324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	5f e3       	ldi	r21, 0x3F	; 63
    3336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    333a:	88 23       	and	r24, r24
    333c:	2c f4       	brge	.+10     	; 0x3348 <DriveModeAlert+0x15a>
		__ticks = 1;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	3f c0       	rjmp	.+126    	; 0x33c6 <DriveModeAlert+0x1d8>
	else if (__tmp > 65535)
    3348:	6f 81       	ldd	r22, Y+7	; 0x07
    334a:	78 85       	ldd	r23, Y+8	; 0x08
    334c:	89 85       	ldd	r24, Y+9	; 0x09
    334e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	4c f5       	brge	.+82     	; 0x33b2 <DriveModeAlert+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <DriveModeAlert+0x1ba>
    338a:	80 e9       	ldi	r24, 0x90	; 144
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <DriveModeAlert+0x1a8>
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a8:	8d 81       	ldd	r24, Y+5	; 0x05
    33aa:	9e 81       	ldd	r25, Y+6	; 0x06
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	69 f7       	brne	.-38     	; 0x338a <DriveModeAlert+0x19c>
    33b0:	14 c0       	rjmp	.+40     	; 0x33da <DriveModeAlert+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	6f 81       	ldd	r22, Y+7	; 0x07
    33b4:	78 85       	ldd	r23, Y+8	; 0x08
    33b6:	89 85       	ldd	r24, Y+9	; 0x09
    33b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <DriveModeAlert+0x1e4>
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    33da:	6c 96       	adiw	r28, 0x1c	; 28
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <DriveMode_violet_Button>:

void DriveMode_violet_Button(void){
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62

	if (G_Voilet_Button_Control == E_ON){
    33f4:	80 91 f7 01 	lds	r24, 0x01F7
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	61 f4       	brne	.+24     	; 0x3414 <DriveMode_violet_Button+0x28>
		if(!(H_PushButton_U8_PushButtonRead(E_BTN_Drive_Mode))){
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <H_PushButton_U8_PushButtonRead>
    3402:	88 23       	and	r24, r24
    3404:	39 f4       	brne	.+14     	; 0x3414 <DriveMode_violet_Button+0x28>
			DriveModeAlert();
    3406:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DriveModeAlert>
			while(!H_PushButton_U8_PushButtonRead(E_BTN_Drive_Mode));
    340a:	83 e0       	ldi	r24, 0x03	; 3
    340c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <H_PushButton_U8_PushButtonRead>
    3410:	88 23       	and	r24, r24
    3412:	d9 f3       	breq	.-10     	; 0x340a <DriveMode_violet_Button+0x1e>

		}
	}

}
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <Normal_Mode_Func>:

/*--------------------------------------------------------------------------------------------*/
/*   Normal Func    */
/*--------------------------------------------------------------------------------------------*/

void Normal_Mode_Func(void){
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	/*CCS Control is OFF*/
	G_CCS_State_Control = E_OFF;
    3422:	10 92 f3 01 	sts	0x01F3, r1
	G_Accelerator_Control = E_ON;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	80 93 f5 01 	sts	0x01F5, r24
	G_Break_Control = E_ON;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	80 93 f6 01 	sts	0x01F6, r24
	Show_Page();
    3432:	0e 94 12 1b 	call	0x3624	; 0x3624 <Show_Page>
	//	Speed_Limit_Mode(E_OFF);

	//	Speed_Limit_Set();
	Break_Button();			/*Break function with interrupt*/
    3436:	0e 94 a7 18 	call	0x314e	; 0x314e <Break_Button>
	CCS_Button();
    343a:	0e 94 c8 18 	call	0x3190	; 0x3190 <CCS_Button>


}
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <Direct_Mode_Func>:

/*--------------------------------------------------------------------------------------------*/
/*   Drive Func    */
/*--------------------------------------------------------------------------------------------*/

void Direct_Mode_Func(void){
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	//	/*CCS Control is OFF*
	G_CCS_State_Control = E_OFF;
    344c:	10 92 f3 01 	sts	0x01F3, r1
	G_Accelerator_Control = E_ON;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 f5 01 	sts	0x01F5, r24
	G_Break_Control = E_ON;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	80 93 f6 01 	sts	0x01F6, r24
	Show_Page();
    345c:	0e 94 12 1b 	call	0x3624	; 0x3624 <Show_Page>

	Display_Speed();
    3460:	0e 94 01 1c 	call	0x3802	; 0x3802 <Display_Speed>
	Speed_Limit_Set();
    3464:	0e 94 93 1b 	call	0x3726	; 0x3726 <Speed_Limit_Set>
	Break_Button();			/*Break function with interrupt*/
    3468:	0e 94 a7 18 	call	0x314e	; 0x314e <Break_Button>
	CCS_Button();
    346c:	0e 94 c8 18 	call	0x3190	; 0x3190 <CCS_Button>
	//				Speed_Limit_Mode(E_OFF);
	//			}



}
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <Reverse_Mode_Func>:

/*--------------------------------------------------------------------------------------------*/
/*   Reverse Func    */
/*--------------------------------------------------------------------------------------------*/

void Reverse_Mode_Func(void){
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62

	/*CCS Control is OFF*/
	G_CCS_State_Control = E_OFF;
    347e:	10 92 f3 01 	sts	0x01F3, r1
	G_Accelerator_Control = E_ON;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	80 93 f5 01 	sts	0x01F5, r24
	G_Break_Control = E_ON;
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	80 93 f6 01 	sts	0x01F6, r24
	Show_Page();
    348e:	0e 94 12 1b 	call	0x3624	; 0x3624 <Show_Page>

	//	Speed_Limit_Set();


	Break_Button();			/*Break function with interrupt*/
    3492:	0e 94 a7 18 	call	0x314e	; 0x314e <Break_Button>
	CCS_Button();
    3496:	0e 94 c8 18 	call	0x3190	; 0x3190 <CCS_Button>





}
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <Drive_Mode>:
//	// Scale the ADC value to represent distance
//	Speed = (300 * Speed) /511;
//	return Speed;
//}

void Drive_Mode (void){
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <Drive_Mode+0x6>
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62

	switch (Drive_Mode_Counter){
    34aa:	80 91 12 02 	lds	r24, 0x0212
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	3a 83       	std	Y+2, r19	; 0x02
    34b4:	29 83       	std	Y+1, r18	; 0x01
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ba:	81 30       	cpi	r24, 0x01	; 1
    34bc:	91 05       	cpc	r25, r1
    34be:	81 f0       	breq	.+32     	; 0x34e0 <Drive_Mode+0x40>
    34c0:	29 81       	ldd	r18, Y+1	; 0x01
    34c2:	3a 81       	ldd	r19, Y+2	; 0x02
    34c4:	22 30       	cpi	r18, 0x02	; 2
    34c6:	31 05       	cpc	r19, r1
    34c8:	99 f0       	breq	.+38     	; 0x34f0 <Drive_Mode+0x50>
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	b1 f4       	brne	.+44     	; 0x34fe <Drive_Mode+0x5e>

	case 0 :
		g_DriveModeState = E_Mode_Normal;
    34d2:	10 92 f2 01 	sts	0x01F2, r1
		printDriveMode(g_DriveModeState);
    34d6:	80 91 f2 01 	lds	r24, 0x01F2
    34da:	0e 94 31 1b 	call	0x3662	; 0x3662 <printDriveMode>
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <Drive_Mode+0x5e>

		break ;

	case 1 :
		g_DriveModeState = E_Mode_Drive;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	80 93 f2 01 	sts	0x01F2, r24
		printDriveMode(g_DriveModeState);
    34e6:	80 91 f2 01 	lds	r24, 0x01F2
    34ea:	0e 94 31 1b 	call	0x3662	; 0x3662 <printDriveMode>
    34ee:	07 c0       	rjmp	.+14     	; 0x34fe <Drive_Mode+0x5e>
		break ;

	case 2 :
		g_DriveModeState =E_Mode_Reverse;
    34f0:	82 e0       	ldi	r24, 0x02	; 2
    34f2:	80 93 f2 01 	sts	0x01F2, r24
		printDriveMode(g_DriveModeState);
    34f6:	80 91 f2 01 	lds	r24, 0x01F2
    34fa:	0e 94 31 1b 	call	0x3662	; 0x3662 <printDriveMode>
		break;

	}


}
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <Menu_On_Screen>:




void Menu_On_Screen(u8 page){
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	00 d0       	rcall	.+0      	; 0x350e <Menu_On_Screen+0x6>
    350e:	0f 92       	push	r0
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	89 83       	std	Y+1, r24	; 0x01

	//	u8 flag=0;

	//	static u8 flag= E_OFF;
	H_Lcd_Void_LCDClear();
    3516:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <H_Lcd_Void_LCDClear>
	//		Show_Page();
	//	}



	switch (page) {
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	3b 83       	std	Y+3, r19	; 0x03
    3522:	2a 83       	std	Y+2, r18	; 0x02
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	81 30       	cpi	r24, 0x01	; 1
    352a:	91 05       	cpc	r25, r1
    352c:	11 f1       	breq	.+68     	; 0x3572 <Menu_On_Screen+0x6a>
    352e:	2a 81       	ldd	r18, Y+2	; 0x02
    3530:	3b 81       	ldd	r19, Y+3	; 0x03
    3532:	22 30       	cpi	r18, 0x02	; 2
    3534:	31 05       	cpc	r19, r1
    3536:	a1 f1       	breq	.+104    	; 0x35a0 <Menu_On_Screen+0x98>
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	09 f0       	breq	.+2      	; 0x3542 <Menu_On_Screen+0x3a>
    3540:	6b c0       	rjmp	.+214    	; 0x3618 <Menu_On_Screen+0x110>

	case E_PAGE_1:

		H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_01);
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"Gear Box: ");
    354a:	88 e6       	ldi	r24, 0x68	; 104
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>

		H_LED_Void_LedToggle(E_LED_Red);
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <H_LED_Void_LedToggle>
		H_Lcd_Void_LCDGoTo(LCD_ROW_4,LCD_COL_16);		/*page number 1*/
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	6f e0       	ldi	r22, 0x0F	; 15
    355c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"[1/3]");
    3560:	83 e7       	ldi	r24, 0x73	; 115
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		printDriveMode(g_DriveModeState);
    3568:	80 91 f2 01 	lds	r24, 0x01F2
    356c:	0e 94 31 1b 	call	0x3662	; 0x3662 <printDriveMode>
    3570:	53 c0       	rjmp	.+166    	; 0x3618 <Menu_On_Screen+0x110>

		break;

	case E_PAGE_2:
		H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_01);
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"CCS ");
    357a:	89 e7       	ldi	r24, 0x79	; 121
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>


		printCCRMode(G_CCS_State);
    3582:	80 91 f4 01 	lds	r24, 0x01F4
    3586:	0e 94 54 18 	call	0x30a8	; 0x30a8 <printCCRMode>
		CCS_Button();
    358a:	0e 94 c8 18 	call	0x3190	; 0x3190 <CCS_Button>

		H_Lcd_Void_LCDGoTo(LCD_ROW_4,LCD_COL_16);		/*page number 2*/
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	6f e0       	ldi	r22, 0x0F	; 15
    3592:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"[2/3]");
    3596:	8e e7       	ldi	r24, 0x7E	; 126
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    359e:	3c c0       	rjmp	.+120    	; 0x3618 <Menu_On_Screen+0x110>
		break;

	case E_PAGE_3:
		//		do{

		H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_02);
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	61 e0       	ldi	r22, 0x01	; 1
    35a4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"Speed");
    35a8:	84 e8       	ldi	r24, 0x84	; 132
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>

		H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_09);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	68 e0       	ldi	r22, 0x08	; 8
    35b4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"Speed limit");
    35b8:	8a e8       	ldi	r24, 0x8A	; 138
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>


		H_Lcd_Void_LCDGoTo(LCD_ROW_1,LCD_COL_08);
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	67 e0       	ldi	r22, 0x07	; 7
    35c4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"|");
    35c8:	86 e9       	ldi	r24, 0x96	; 150
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_08);
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"|");
    35d8:	86 e9       	ldi	r24, 0x96	; 150
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(LCD_ROW_3,LCD_COL_08);
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	67 e0       	ldi	r22, 0x07	; 7
    35e4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"|");
    35e8:	86 e9       	ldi	r24, 0x96	; 150
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(LCD_ROW_4,LCD_COL_08);
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	67 e0       	ldi	r22, 0x07	; 7
    35f4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"|");
    35f8:	86 e9       	ldi	r24, 0x96	; 150
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>


		H_Lcd_Void_LCDGoTo(LCD_ROW_4,LCD_COL_16);		/*page number 3*/
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	6f e0       	ldi	r22, 0x0F	; 15
    3604:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"[3/3]");
    3608:	88 e9       	ldi	r24, 0x98	; 152
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>


		Speed_Limit_Set();
    3610:	0e 94 93 1b 	call	0x3726	; 0x3726 <Speed_Limit_Set>
		Display_Speed();
    3614:	0e 94 01 1c 	call	0x3802	; 0x3802 <Display_Speed>

	default:
		break;
	}

}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <Show_Page>:



void Show_Page(void){
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	0f 92       	push	r0
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
	u8 KeyVal;
	KeyVal = H_KeyPad_U8_KeyPadRead();
    362e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <H_KeyPad_U8_KeyPadRead>
    3632:	89 83       	std	Y+1, r24	; 0x01


	if('8' == KeyVal ){
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	88 33       	cpi	r24, 0x38	; 56
    3638:	81 f4       	brne	.+32     	; 0x365a <Show_Page+0x36>
		if(G_PAGE < 3){
    363a:	80 91 f8 01 	lds	r24, 0x01F8
    363e:	83 30       	cpi	r24, 0x03	; 3
    3640:	50 f4       	brcc	.+20     	; 0x3656 <Show_Page+0x32>
			Menu_On_Screen(G_PAGE);
    3642:	80 91 f8 01 	lds	r24, 0x01F8
    3646:	0e 94 84 1a 	call	0x3508	; 0x3508 <Menu_On_Screen>
			G_PAGE++;
    364a:	80 91 f8 01 	lds	r24, 0x01F8
    364e:	8f 5f       	subi	r24, 0xFF	; 255
    3650:	80 93 f8 01 	sts	0x01F8, r24
    3654:	02 c0       	rjmp	.+4      	; 0x365a <Show_Page+0x36>
		}else{
			G_PAGE = E_PAGE_1;
    3656:	10 92 f8 01 	sts	0x01F8, r1
		}
	}

}
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <printDriveMode>:



void printDriveMode(DRIVE_MODE_E mode) {
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <printDriveMode+0x6>
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	89 83       	std	Y+1, r24	; 0x01

	H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_05);
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	64 e0       	ldi	r22, 0x04	; 4
    3674:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>

	switch (mode) {
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	3b 83       	std	Y+3, r19	; 0x03
    3680:	2a 83       	std	Y+2, r18	; 0x02
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	9b 81       	ldd	r25, Y+3	; 0x03
    3686:	81 30       	cpi	r24, 0x01	; 1
    3688:	91 05       	cpc	r25, r1
    368a:	51 f0       	breq	.+20     	; 0x36a0 <printDriveMode+0x3e>
    368c:	2a 81       	ldd	r18, Y+2	; 0x02
    368e:	3b 81       	ldd	r19, Y+3	; 0x03
    3690:	22 30       	cpi	r18, 0x02	; 2
    3692:	31 05       	cpc	r19, r1
    3694:	79 f0       	breq	.+30     	; 0x36b4 <printDriveMode+0x52>
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	31 f0       	breq	.+12     	; 0x36aa <printDriveMode+0x48>
    369e:	0e c0       	rjmp	.+28     	; 0x36bc <printDriveMode+0x5a>
	case E_Mode_Drive:
		H_Lcd_Void_LCDWriteString((u8*)" N  R (D) ");
    36a0:	8e e9       	ldi	r24, 0x9E	; 158
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    36a8:	09 c0       	rjmp	.+18     	; 0x36bc <printDriveMode+0x5a>
		break;
	case E_Mode_Normal:
		H_Lcd_Void_LCDWriteString((u8*)"(N) R  D ");
    36aa:	89 ea       	ldi	r24, 0xA9	; 169
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    36b2:	04 c0       	rjmp	.+8      	; 0x36bc <printDriveMode+0x5a>
		break;
	case E_Mode_Reverse:
		H_Lcd_Void_LCDWriteString((u8*)" N (R) D ");
    36b4:	83 eb       	ldi	r24, 0xB3	; 179
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
		break;
	default:
		break;
	}
}
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <Speed_Limit_Mode>:

void Speed_Limit_Mode(u8 mode){
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	0f 92       	push	r0
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	89 83       	std	Y+1, r24	; 0x01
	H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_12);
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	6b e0       	ldi	r22, 0x0B	; 11
    36d8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"           ");
    36dc:	8d eb       	ldi	r24, 0xBD	; 189
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_12);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	6b e0       	ldi	r22, 0x0B	; 11
    36e8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>

	if(E_OFF == mode){
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	88 23       	and	r24, r24
    36f0:	41 f4       	brne	.+16     	; 0x3702 <Speed_Limit_Mode+0x3a>
		set_relay_Mode(E_OFF); // Ensure the relay is off
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	0e 94 65 1c 	call	0x38ca	; 0x38ca <set_relay_Mode>
		H_Lcd_Void_LCDWriteString((u8*)"OFF   ");
    36f8:	89 ec       	ldi	r24, 0xC9	; 201
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    3700:	0e c0       	rjmp	.+28     	; 0x371e <Speed_Limit_Mode+0x56>


	}else if(E_ON == mode){
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	81 30       	cpi	r24, 0x01	; 1
    3706:	59 f4       	brne	.+22     	; 0x371e <Speed_Limit_Mode+0x56>
		/*H_Lcd_Void_LCDWriteString((u8)"ON");*/   	/*print the value not "ON "*/
		H_Lcd_Void_LCDWriteNumber(G_SpeedLimit);
    3708:	80 91 e0 01 	lds	r24, 0x01E0
    370c:	90 91 e1 01 	lds	r25, 0x01E1
    3710:	cc 01       	movw	r24, r24
    3712:	a0 e0       	ldi	r26, 0x00	; 0
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <H_Lcd_Void_LCDWriteNumber>
	}
}
    371e:	0f 90       	pop	r0
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <Speed_Limit_Set>:
//}




void Speed_Limit_Set(void){
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	0f 92       	push	r0
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	u8 key;
	static u8 flag = E_OFF; // Initialize flag to E_OFF and make it static so its value persists between function calls

	H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_12);
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	6b e0       	ldi	r22, 0x0B	; 11
    3734:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
	key = H_KeyPad_U8_KeyPadRead();
    3738:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <H_KeyPad_U8_KeyPadRead>
    373c:	89 83       	std	Y+1, r24	; 0x01
	// _delay_ms(100); // Optional delay, not needed here
	if('1' == key){
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	81 33       	cpi	r24, 0x31	; 49
    3742:	01 f5       	brne	.+64     	; 0x3784 <Speed_Limit_Set+0x5e>
		if((G_SpeedLimit >= 0) && (G_SpeedLimit < 100)){
    3744:	80 91 e0 01 	lds	r24, 0x01E0
    3748:	90 91 e1 01 	lds	r25, 0x01E1
    374c:	84 36       	cpi	r24, 0x64	; 100
    374e:	91 05       	cpc	r25, r1
    3750:	48 f4       	brcc	.+18     	; 0x3764 <Speed_Limit_Set+0x3e>
			G_SpeedLimit += 5;
    3752:	80 91 e0 01 	lds	r24, 0x01E0
    3756:	90 91 e1 01 	lds	r25, 0x01E1
    375a:	05 96       	adiw	r24, 0x05	; 5
    375c:	90 93 e1 01 	sts	0x01E1, r25
    3760:	80 93 e0 01 	sts	0x01E0, r24
		} else {
			/*Do Nothing*/
		}

		H_Lcd_Void_LCDWriteNumber(G_SpeedLimit);
    3764:	80 91 e0 01 	lds	r24, 0x01E0
    3768:	90 91 e1 01 	lds	r25, 0x01E1
    376c:	cc 01       	movw	r24, r24
    376e:	a0 e0       	ldi	r26, 0x00	; 0
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)"       ");
    377a:	80 ed       	ldi	r24, 0xD0	; 208
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    3782:	3b c0       	rjmp	.+118    	; 0x37fa <Speed_Limit_Set+0xd4>


	} else if('7' == key){
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	87 33       	cpi	r24, 0x37	; 55
    3788:	01 f5       	brne	.+64     	; 0x37ca <Speed_Limit_Set+0xa4>
		if(G_SpeedLimit >= 5){
    378a:	80 91 e0 01 	lds	r24, 0x01E0
    378e:	90 91 e1 01 	lds	r25, 0x01E1
    3792:	85 30       	cpi	r24, 0x05	; 5
    3794:	91 05       	cpc	r25, r1
    3796:	48 f0       	brcs	.+18     	; 0x37aa <Speed_Limit_Set+0x84>
			G_SpeedLimit -= 5;
    3798:	80 91 e0 01 	lds	r24, 0x01E0
    379c:	90 91 e1 01 	lds	r25, 0x01E1
    37a0:	05 97       	sbiw	r24, 0x05	; 5
    37a2:	90 93 e1 01 	sts	0x01E1, r25
    37a6:	80 93 e0 01 	sts	0x01E0, r24
		} else{
			/*Do Nothing*/
		}

		H_Lcd_Void_LCDWriteNumber(G_SpeedLimit);
    37aa:	80 91 e0 01 	lds	r24, 0x01E0
    37ae:	90 91 e1 01 	lds	r25, 0x01E1
    37b2:	cc 01       	movw	r24, r24
    37b4:	a0 e0       	ldi	r26, 0x00	; 0
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)"       ");
    37c0:	80 ed       	ldi	r24, 0xD0	; 208
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <H_Lcd_Void_LCDWriteString>
    37c8:	18 c0       	rjmp	.+48     	; 0x37fa <Speed_Limit_Set+0xd4>


	} else if('4' == key){
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	84 33       	cpi	r24, 0x34	; 52
    37ce:	a9 f4       	brne	.+42     	; 0x37fa <Speed_Limit_Set+0xd4>
		if(flag == E_OFF){
    37d0:	80 91 fc 01 	lds	r24, 0x01FC
    37d4:	88 23       	and	r24, r24
    37d6:	49 f4       	brne	.+18     	; 0x37ea <Speed_Limit_Set+0xc4>
			Speed_Limit_Mode(E_ON);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <Speed_Limit_Mode>
			flag = E_ON; // Set flag to E_ON when switching the mode
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	80 93 fc 01 	sts	0x01FC, r24
			relay_flag = 0 ;
    37e4:	10 92 fa 01 	sts	0x01FA, r1
    37e8:	08 c0       	rjmp	.+16     	; 0x37fa <Speed_Limit_Set+0xd4>
		} else {
			Speed_Limit_Mode(E_OFF);
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <Speed_Limit_Mode>
			flag = E_OFF; // Set flag back to E_OFF when switching the mode
    37f0:	10 92 fc 01 	sts	0x01FC, r1
			relay_flag = 1 ;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	80 93 fa 01 	sts	0x01FA, r24
		}
	} else {
		/* Do Nothing */
	}
}
    37fa:	0f 90       	pop	r0
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <Display_Speed>:
//    }
//}


///*Function get reading from pot ADC */
void  Display_Speed(void){
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
	G_Speed = M_ADC_U16_ADCRead(ADC_CHANNEL_0); // Read ADC value from channel A0
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	0e 94 5d 07 	call	0xeba	; 0xeba <M_ADC_U16_ADCRead>
    3810:	90 93 11 02 	sts	0x0211, r25
    3814:	80 93 10 02 	sts	0x0210, r24
	H_Lcd_Void_LCDGoTo(LCD_ROW_4,LCD_COL_05);
    3818:	83 e0       	ldi	r24, 0x03	; 3
    381a:	64 e0       	ldi	r22, 0x04	; 4
    381c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(G_Speed);
    3820:	80 91 10 02 	lds	r24, 0x0210
    3824:	90 91 11 02 	lds	r25, 0x0211
    3828:	cc 01       	movw	r24, r24
    382a:	a0 e0       	ldi	r26, 0x00	; 0
    382c:	b0 e0       	ldi	r27, 0x00	; 0
    382e:	bc 01       	movw	r22, r24
    3830:	cd 01       	movw	r24, r26
    3832:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <H_Lcd_Void_LCDWriteNumber>

	// Scale the ADC value to represent distance
	// Map ADC value from 0-1023 to 0-300
	G_Speed = (200 * (u32)G_Speed) /1023;
    3836:	80 91 10 02 	lds	r24, 0x0210
    383a:	90 91 11 02 	lds	r25, 0x0211
    383e:	cc 01       	movw	r24, r24
    3840:	a0 e0       	ldi	r26, 0x00	; 0
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	28 ec       	ldi	r18, 0xC8	; 200
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	0e 94 6d 22 	call	0x44da	; 0x44da <__mulsi3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	2f ef       	ldi	r18, 0xFF	; 255
    385a:	33 e0       	ldi	r19, 0x03	; 3
    385c:	40 e0       	ldi	r20, 0x00	; 0
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	bc 01       	movw	r22, r24
    3862:	cd 01       	movw	r24, r26
    3864:	0e 94 98 22 	call	0x4530	; 0x4530 <__udivmodsi4>
    3868:	da 01       	movw	r26, r20
    386a:	c9 01       	movw	r24, r18
    386c:	90 93 11 02 	sts	0x0211, r25
    3870:	80 93 10 02 	sts	0x0210, r24
	H_Lcd_Void_LCDGoTo(LCD_ROW_2,LCD_COL_03);
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	62 e0       	ldi	r22, 0x02	; 2
    3878:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(G_Speed);
    387c:	80 91 10 02 	lds	r24, 0x0210
    3880:	90 91 11 02 	lds	r25, 0x0211
    3884:	cc 01       	movw	r24, r24
    3886:	a0 e0       	ldi	r26, 0x00	; 0
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	bc 01       	movw	r22, r24
    388c:	cd 01       	movw	r24, r26
    388e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <H_Lcd_Void_LCDWriteNumber>




}
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <toggle_or_set_relay_Mode>:

// Define a variable to keep track of the current state of the relay
//static u8 relay_state = E_OFF;

// Function to toggle the relay mode
void toggle_or_set_relay_Mode(void) {
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
	if (relay_state == E_OFF) {
    38a0:	80 91 f9 01 	lds	r24, 0x01F9
    38a4:	88 23       	and	r24, r24
    38a6:	41 f4       	brne	.+16     	; 0x38b8 <toggle_or_set_relay_Mode+0x20>
		relay_state = E_ON;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 93 f9 01 	sts	0x01F9, r24
		M_DIO_Void_SetPinValue(PC7_PIN, HIGH);
    38ae:	85 e2       	ldi	r24, 0x25	; 37
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    38b6:	06 c0       	rjmp	.+12     	; 0x38c4 <toggle_or_set_relay_Mode+0x2c>
	} else {
		relay_state = E_OFF;
    38b8:	10 92 f9 01 	sts	0x01F9, r1
		M_DIO_Void_SetPinValue(PC7_PIN, LOW);
    38bc:	85 e2       	ldi	r24, 0x25	; 37
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	}
}
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	08 95       	ret

000038ca <set_relay_Mode>:

// Function to set the relay mode directly
void set_relay_Mode(u8 Mode) {
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	0f 92       	push	r0
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	89 83       	std	Y+1, r24	; 0x01
	if (Mode == E_OFF) {
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	88 23       	and	r24, r24
    38da:	29 f4       	brne	.+10     	; 0x38e6 <set_relay_Mode+0x1c>
		M_DIO_Void_SetPinValue(PC7_PIN, LOW);
    38dc:	85 e2       	ldi	r24, 0x25	; 37
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <set_relay_Mode+0x2a>
	} else if (Mode == E_ON) {
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	81 30       	cpi	r24, 0x01	; 1
    38ea:	21 f4       	brne	.+8      	; 0x38f4 <set_relay_Mode+0x2a>
		M_DIO_Void_SetPinValue(PC7_PIN, HIGH);
    38ec:	85 e2       	ldi	r24, 0x25	; 37
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	}
}
    38f4:	0f 90       	pop	r0
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	08 95       	ret

000038fc <Speed_alert>:

void Speed_alert(void) {
    38fc:	df 93       	push	r29
    38fe:	cf 93       	push	r28
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	6c 97       	sbiw	r28, 0x1c	; 28
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
	if ((G_Speed > G_SpeedLimit) && (relay_flag == 0)) {
    3910:	20 91 10 02 	lds	r18, 0x0210
    3914:	30 91 11 02 	lds	r19, 0x0211
    3918:	80 91 e0 01 	lds	r24, 0x01E0
    391c:	90 91 e1 01 	lds	r25, 0x01E1
    3920:	82 17       	cp	r24, r18
    3922:	93 07       	cpc	r25, r19
    3924:	08 f0       	brcs	.+2      	; 0x3928 <Speed_alert+0x2c>
    3926:	f0 c0       	rjmp	.+480    	; 0x3b08 <Speed_alert+0x20c>
    3928:	80 91 fa 01 	lds	r24, 0x01FA
    392c:	88 23       	and	r24, r24
    392e:	09 f0       	breq	.+2      	; 0x3932 <Speed_alert+0x36>
    3930:	eb c0       	rjmp	.+470    	; 0x3b08 <Speed_alert+0x20c>
		set_relay_Mode(E_ON); // Turn on the relay
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	0e 94 65 1c 	call	0x38ca	; 0x38ca <set_relay_Mode>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	aa e7       	ldi	r26, 0x7A	; 122
    393e:	b3 e4       	ldi	r27, 0x43	; 67
    3940:	89 8f       	std	Y+25, r24	; 0x19
    3942:	9a 8f       	std	Y+26, r25	; 0x1a
    3944:	ab 8f       	std	Y+27, r26	; 0x1b
    3946:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	69 8d       	ldd	r22, Y+25	; 0x19
    394a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    394c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    394e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a e7       	ldi	r20, 0x7A	; 122
    3956:	55 e4       	ldi	r21, 0x45	; 69
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8d 8b       	std	Y+21, r24	; 0x15
    3962:	9e 8b       	std	Y+22, r25	; 0x16
    3964:	af 8b       	std	Y+23, r26	; 0x17
    3966:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3968:	6d 89       	ldd	r22, Y+21	; 0x15
    396a:	7e 89       	ldd	r23, Y+22	; 0x16
    396c:	8f 89       	ldd	r24, Y+23	; 0x17
    396e:	98 8d       	ldd	r25, Y+24	; 0x18
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <Speed_alert+0x8e>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9c 8b       	std	Y+20, r25	; 0x14
    3986:	8b 8b       	std	Y+19, r24	; 0x13
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <Speed_alert+0x10c>
	else if (__tmp > 65535)
    398a:	6d 89       	ldd	r22, Y+21	; 0x15
    398c:	7e 89       	ldd	r23, Y+22	; 0x16
    398e:	8f 89       	ldd	r24, Y+23	; 0x17
    3990:	98 8d       	ldd	r25, Y+24	; 0x18
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <Speed_alert+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	69 8d       	ldd	r22, Y+25	; 0x19
    39a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9c 8b       	std	Y+20, r25	; 0x14
    39c8:	8b 8b       	std	Y+19, r24	; 0x13
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <Speed_alert+0xee>
    39cc:	80 e9       	ldi	r24, 0x90	; 144
    39ce:	91 e0       	ldi	r25, 0x01	; 1
    39d0:	9a 8b       	std	Y+18, r25	; 0x12
    39d2:	89 8b       	std	Y+17, r24	; 0x11
    39d4:	89 89       	ldd	r24, Y+17	; 0x11
    39d6:	9a 89       	ldd	r25, Y+18	; 0x12
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <Speed_alert+0xdc>
    39dc:	9a 8b       	std	Y+18, r25	; 0x12
    39de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	8b 89       	ldd	r24, Y+19	; 0x13
    39e2:	9c 89       	ldd	r25, Y+20	; 0x14
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9c 8b       	std	Y+20, r25	; 0x14
    39e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	8b 89       	ldd	r24, Y+19	; 0x13
    39ec:	9c 89       	ldd	r25, Y+20	; 0x14
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <Speed_alert+0xd0>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <Speed_alert+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6d 89       	ldd	r22, Y+21	; 0x15
    39f6:	7e 89       	ldd	r23, Y+22	; 0x16
    39f8:	8f 89       	ldd	r24, Y+23	; 0x17
    39fa:	98 8d       	ldd	r25, Y+24	; 0x18
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9c 8b       	std	Y+20, r25	; 0x14
    3a06:	8b 8b       	std	Y+19, r24	; 0x13
    3a08:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a0c:	98 8b       	std	Y+16, r25	; 0x10
    3a0e:	8f 87       	std	Y+15, r24	; 0x0f
    3a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a12:	98 89       	ldd	r25, Y+16	; 0x10
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <Speed_alert+0x118>
    3a18:	98 8b       	std	Y+16, r25	; 0x10
    3a1a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		set_relay_Mode(E_OFF); // Turn off the relay
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <set_relay_Mode>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	aa e7       	ldi	r26, 0x7A	; 122
    3a28:	b3 e4       	ldi	r27, 0x43	; 67
    3a2a:	8b 87       	std	Y+11, r24	; 0x0b
    3a2c:	9c 87       	std	Y+12, r25	; 0x0c
    3a2e:	ad 87       	std	Y+13, r26	; 0x0d
    3a30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a e7       	ldi	r20, 0x7A	; 122
    3a40:	55 e4       	ldi	r21, 0x45	; 69
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	8f 83       	std	Y+7, r24	; 0x07
    3a4c:	98 87       	std	Y+8, r25	; 0x08
    3a4e:	a9 87       	std	Y+9, r26	; 0x09
    3a50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	2c f4       	brge	.+10     	; 0x3a74 <Speed_alert+0x178>
		__ticks = 1;
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	9e 83       	std	Y+6, r25	; 0x06
    3a70:	8d 83       	std	Y+5, r24	; 0x05
    3a72:	3f c0       	rjmp	.+126    	; 0x3af2 <Speed_alert+0x1f6>
	else if (__tmp > 65535)
    3a74:	6f 81       	ldd	r22, Y+7	; 0x07
    3a76:	78 85       	ldd	r23, Y+8	; 0x08
    3a78:	89 85       	ldd	r24, Y+9	; 0x09
    3a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	4c f5       	brge	.+82     	; 0x3ade <Speed_alert+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9e 83       	std	Y+6, r25	; 0x06
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
    3ab4:	0f c0       	rjmp	.+30     	; 0x3ad4 <Speed_alert+0x1d8>
    3ab6:	80 e9       	ldi	r24, 0x90	; 144
    3ab8:	91 e0       	ldi	r25, 0x01	; 1
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    3abc:	8b 83       	std	Y+3, r24	; 0x03
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <Speed_alert+0x1c6>
    3ac6:	9c 83       	std	Y+4, r25	; 0x04
    3ac8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	69 f7       	brne	.-38     	; 0x3ab6 <Speed_alert+0x1ba>
    3adc:	18 c0       	rjmp	.+48     	; 0x3b0e <Speed_alert+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ade:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae0:	78 85       	ldd	r23, Y+8	; 0x08
    3ae2:	89 85       	ldd	r24, Y+9	; 0x09
    3ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <Speed_alert+0x202>
    3b02:	9a 83       	std	Y+2, r25	; 0x02
    3b04:	89 83       	std	Y+1, r24	; 0x01
    3b06:	03 c0       	rjmp	.+6      	; 0x3b0e <Speed_alert+0x212>
		_delay_ms(250);
	} else {
		set_relay_Mode(E_OFF); // Ensure the relay is off
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <set_relay_Mode>
	}
}
    3b0e:	6c 96       	adiw	r28, 0x1c	; 28
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <H_PushButton_Void_PushButtonInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <H_PushButton_Void_PushButtonInit+0x6>
    3b26:	0f 92       	push	r0
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	3b 83       	std	Y+3, r19	; 0x03
    3b36:	2a 83       	std	Y+2, r18	; 0x02
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	81 30       	cpi	r24, 0x01	; 1
    3b3e:	91 05       	cpc	r25, r1
    3b40:	d1 f0       	breq	.+52     	; 0x3b76 <H_PushButton_Void_PushButtonInit+0x56>
    3b42:	2a 81       	ldd	r18, Y+2	; 0x02
    3b44:	3b 81       	ldd	r19, Y+3	; 0x03
    3b46:	22 30       	cpi	r18, 0x02	; 2
    3b48:	31 05       	cpc	r19, r1
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <H_PushButton_Void_PushButtonInit+0x36>
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	61 f0       	breq	.+24     	; 0x3b6c <H_PushButton_Void_PushButtonInit+0x4c>
    3b54:	1e c0       	rjmp	.+60     	; 0x3b92 <H_PushButton_Void_PushButtonInit+0x72>
    3b56:	2a 81       	ldd	r18, Y+2	; 0x02
    3b58:	3b 81       	ldd	r19, Y+3	; 0x03
    3b5a:	22 30       	cpi	r18, 0x02	; 2
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	81 f0       	breq	.+32     	; 0x3b80 <H_PushButton_Void_PushButtonInit+0x60>
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	9b 81       	ldd	r25, Y+3	; 0x03
    3b64:	83 30       	cpi	r24, 0x03	; 3
    3b66:	91 05       	cpc	r25, r1
    3b68:	81 f0       	breq	.+32     	; 0x3b8a <H_PushButton_Void_PushButtonInit+0x6a>
    3b6a:	13 c0       	rjmp	.+38     	; 0x3b92 <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0:
		M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    3b6c:	8f e2       	ldi	r24, 0x2F	; 47
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    3b74:	0e c0       	rjmp	.+28     	; 0x3b92 <H_PushButton_Void_PushButtonInit+0x72>

	case PUSH_BUTTON_1:
		M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    3b76:	8e e2       	ldi	r24, 0x2E	; 46
    3b78:	60 e0       	ldi	r22, 0x00	; 0
    3b7a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    3b7e:	09 c0       	rjmp	.+18     	; 0x3b92 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2:
		M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    3b80:	8d e2       	ldi	r24, 0x2D	; 45
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    3b88:	04 c0       	rjmp	.+8      	; 0x3b92 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3:
		M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    3b8a:	8b e2       	ldi	r24, 0x2B	; 43
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	cf 91       	pop	r28
    3b9a:	df 91       	pop	r29
    3b9c:	08 95       	ret

00003b9e <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    3b9e:	df 93       	push	r29
    3ba0:	cf 93       	push	r28
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	ec 97       	sbiw	r28, 0x3c	; 60
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    3bb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bba:	28 2f       	mov	r18, r24
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	3c af       	std	Y+60, r19	; 0x3c
    3bc0:	2b af       	std	Y+59, r18	; 0x3b
    3bc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bc6:	81 30       	cpi	r24, 0x01	; 1
    3bc8:	91 05       	cpc	r25, r1
    3bca:	09 f4       	brne	.+2      	; 0x3bce <H_PushButton_U8_PushButtonRead+0x30>
    3bcc:	97 c0       	rjmp	.+302    	; 0x3cfc <H_PushButton_U8_PushButtonRead+0x15e>
    3bce:	2b ad       	ldd	r18, Y+59	; 0x3b
    3bd0:	3c ad       	ldd	r19, Y+60	; 0x3c
    3bd2:	22 30       	cpi	r18, 0x02	; 2
    3bd4:	31 05       	cpc	r19, r1
    3bd6:	2c f4       	brge	.+10     	; 0x3be2 <H_PushButton_U8_PushButtonRead+0x44>
    3bd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bda:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	71 f0       	breq	.+28     	; 0x3bfc <H_PushButton_U8_PushButtonRead+0x5e>
    3be0:	0b c2       	rjmp	.+1046   	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
    3be2:	2b ad       	ldd	r18, Y+59	; 0x3b
    3be4:	3c ad       	ldd	r19, Y+60	; 0x3c
    3be6:	22 30       	cpi	r18, 0x02	; 2
    3be8:	31 05       	cpc	r19, r1
    3bea:	09 f4       	brne	.+2      	; 0x3bee <H_PushButton_U8_PushButtonRead+0x50>
    3bec:	07 c1       	rjmp	.+526    	; 0x3dfc <H_PushButton_U8_PushButtonRead+0x25e>
    3bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bf2:	83 30       	cpi	r24, 0x03	; 3
    3bf4:	91 05       	cpc	r25, r1
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <H_PushButton_U8_PushButtonRead+0x5c>
    3bf8:	81 c1       	rjmp	.+770    	; 0x3efc <H_PushButton_U8_PushButtonRead+0x35e>
    3bfa:	fe c1       	rjmp	.+1020   	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3bfc:	8f e2       	ldi	r24, 0x2F	; 47
    3bfe:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3c02:	88 23       	and	r24, r24
    3c04:	09 f0       	breq	.+2      	; 0x3c08 <H_PushButton_U8_PushButtonRead+0x6a>
    3c06:	f8 c1       	rjmp	.+1008   	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	a8 e4       	ldi	r26, 0x48	; 72
    3c0e:	b2 e4       	ldi	r27, 0x42	; 66
    3c10:	8d ab       	std	Y+53, r24	; 0x35
    3c12:	9e ab       	std	Y+54, r25	; 0x36
    3c14:	af ab       	std	Y+55, r26	; 0x37
    3c16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c18:	6d a9       	ldd	r22, Y+53	; 0x35
    3c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	4a e7       	ldi	r20, 0x7A	; 122
    3c26:	55 e4       	ldi	r21, 0x45	; 69
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	89 ab       	std	Y+49, r24	; 0x31
    3c32:	9a ab       	std	Y+50, r25	; 0x32
    3c34:	ab ab       	std	Y+51, r26	; 0x33
    3c36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c38:	69 a9       	ldd	r22, Y+49	; 0x31
    3c3a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c3c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c3e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	40 e8       	ldi	r20, 0x80	; 128
    3c46:	5f e3       	ldi	r21, 0x3F	; 63
    3c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c4c:	88 23       	and	r24, r24
    3c4e:	2c f4       	brge	.+10     	; 0x3c5a <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	98 ab       	std	Y+48, r25	; 0x30
    3c56:	8f a7       	std	Y+47, r24	; 0x2f
    3c58:	3f c0       	rjmp	.+126    	; 0x3cd8 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    3c5a:	69 a9       	ldd	r22, Y+49	; 0x31
    3c5c:	7a a9       	ldd	r23, Y+50	; 0x32
    3c5e:	8b a9       	ldd	r24, Y+51	; 0x33
    3c60:	9c a9       	ldd	r25, Y+52	; 0x34
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	3f ef       	ldi	r19, 0xFF	; 255
    3c66:	4f e7       	ldi	r20, 0x7F	; 127
    3c68:	57 e4       	ldi	r21, 0x47	; 71
    3c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c6e:	18 16       	cp	r1, r24
    3c70:	4c f5       	brge	.+82     	; 0x3cc4 <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c72:	6d a9       	ldd	r22, Y+53	; 0x35
    3c74:	7e a9       	ldd	r23, Y+54	; 0x36
    3c76:	8f a9       	ldd	r24, Y+55	; 0x37
    3c78:	98 ad       	ldd	r25, Y+56	; 0x38
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e2       	ldi	r20, 0x20	; 32
    3c80:	51 e4       	ldi	r21, 0x41	; 65
    3c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	bc 01       	movw	r22, r24
    3c8c:	cd 01       	movw	r24, r26
    3c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	98 ab       	std	Y+48, r25	; 0x30
    3c98:	8f a7       	std	Y+47, r24	; 0x2f
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <H_PushButton_U8_PushButtonRead+0x11c>
    3c9c:	80 e9       	ldi	r24, 0x90	; 144
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	9e a7       	std	Y+46, r25	; 0x2e
    3ca2:	8d a7       	std	Y+45, r24	; 0x2d
    3ca4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ca6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <H_PushButton_U8_PushButtonRead+0x10a>
    3cac:	9e a7       	std	Y+46, r25	; 0x2e
    3cae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	98 ab       	std	Y+48, r25	; 0x30
    3cb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	69 f7       	brne	.-38     	; 0x3c9c <H_PushButton_U8_PushButtonRead+0xfe>
    3cc2:	14 c0       	rjmp	.+40     	; 0x3cec <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    3cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    3cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    3cca:	9c a9       	ldd	r25, Y+52	; 0x34
    3ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	98 ab       	std	Y+48, r25	; 0x30
    3cd6:	8f a7       	std	Y+47, r24	; 0x2f
    3cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cda:	98 a9       	ldd	r25, Y+48	; 0x30
    3cdc:	9c a7       	std	Y+44, r25	; 0x2c
    3cde:	8b a7       	std	Y+43, r24	; 0x2b
    3ce0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ce2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <H_PushButton_U8_PushButtonRead+0x146>
    3ce8:	9c a7       	std	Y+44, r25	; 0x2c
    3cea:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3cec:	8f e2       	ldi	r24, 0x2F	; 47
    3cee:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3cf2:	88 23       	and	r24, r24
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <H_PushButton_U8_PushButtonRead+0x15a>
    3cf6:	80 c1       	rjmp	.+768    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3cf8:	19 ae       	std	Y+57, r1	; 0x39
    3cfa:	7e c1       	rjmp	.+764    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3cfc:	8e e2       	ldi	r24, 0x2E	; 46
    3cfe:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3d02:	88 23       	and	r24, r24
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <H_PushButton_U8_PushButtonRead+0x16a>
    3d06:	78 c1       	rjmp	.+752    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	a8 e4       	ldi	r26, 0x48	; 72
    3d0e:	b2 e4       	ldi	r27, 0x42	; 66
    3d10:	8f a3       	std	Y+39, r24	; 0x27
    3d12:	98 a7       	std	Y+40, r25	; 0x28
    3d14:	a9 a7       	std	Y+41, r26	; 0x29
    3d16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d18:	6f a1       	ldd	r22, Y+39	; 0x27
    3d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4a e7       	ldi	r20, 0x7A	; 122
    3d26:	55 e4       	ldi	r21, 0x45	; 69
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	8b a3       	std	Y+35, r24	; 0x23
    3d32:	9c a3       	std	Y+36, r25	; 0x24
    3d34:	ad a3       	std	Y+37, r26	; 0x25
    3d36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d38:	6b a1       	ldd	r22, Y+35	; 0x23
    3d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e8       	ldi	r20, 0x80	; 128
    3d46:	5f e3       	ldi	r21, 0x3F	; 63
    3d48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d4c:	88 23       	and	r24, r24
    3d4e:	2c f4       	brge	.+10     	; 0x3d5a <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9a a3       	std	Y+34, r25	; 0x22
    3d56:	89 a3       	std	Y+33, r24	; 0x21
    3d58:	3f c0       	rjmp	.+126    	; 0x3dd8 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    3d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3d60:	9e a1       	ldd	r25, Y+38	; 0x26
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	3f ef       	ldi	r19, 0xFF	; 255
    3d66:	4f e7       	ldi	r20, 0x7F	; 127
    3d68:	57 e4       	ldi	r21, 0x47	; 71
    3d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6e:	18 16       	cp	r1, r24
    3d70:	4c f5       	brge	.+82     	; 0x3dc4 <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d72:	6f a1       	ldd	r22, Y+39	; 0x27
    3d74:	78 a5       	ldd	r23, Y+40	; 0x28
    3d76:	89 a5       	ldd	r24, Y+41	; 0x29
    3d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e2       	ldi	r20, 0x20	; 32
    3d80:	51 e4       	ldi	r21, 0x41	; 65
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	bc 01       	movw	r22, r24
    3d8c:	cd 01       	movw	r24, r26
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	9a a3       	std	Y+34, r25	; 0x22
    3d98:	89 a3       	std	Y+33, r24	; 0x21
    3d9a:	0f c0       	rjmp	.+30     	; 0x3dba <H_PushButton_U8_PushButtonRead+0x21c>
    3d9c:	80 e9       	ldi	r24, 0x90	; 144
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	98 a3       	std	Y+32, r25	; 0x20
    3da2:	8f 8f       	std	Y+31, r24	; 0x1f
    3da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3da6:	98 a1       	ldd	r25, Y+32	; 0x20
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <H_PushButton_U8_PushButtonRead+0x20a>
    3dac:	98 a3       	std	Y+32, r25	; 0x20
    3dae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db0:	89 a1       	ldd	r24, Y+33	; 0x21
    3db2:	9a a1       	ldd	r25, Y+34	; 0x22
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	9a a3       	std	Y+34, r25	; 0x22
    3db8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	69 f7       	brne	.-38     	; 0x3d9c <H_PushButton_U8_PushButtonRead+0x1fe>
    3dc2:	14 c0       	rjmp	.+40     	; 0x3dec <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3dc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3dca:	9e a1       	ldd	r25, Y+38	; 0x26
    3dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	9a a3       	std	Y+34, r25	; 0x22
    3dd6:	89 a3       	std	Y+33, r24	; 0x21
    3dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dda:	9a a1       	ldd	r25, Y+34	; 0x22
    3ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    3dde:	8d 8f       	std	Y+29, r24	; 0x1d
    3de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <H_PushButton_U8_PushButtonRead+0x246>
    3de8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dea:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3dec:	8e e2       	ldi	r24, 0x2E	; 46
    3dee:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3df2:	88 23       	and	r24, r24
    3df4:	09 f0       	breq	.+2      	; 0x3df8 <H_PushButton_U8_PushButtonRead+0x25a>
    3df6:	00 c1       	rjmp	.+512    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);

				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3df8:	19 ae       	std	Y+57, r1	; 0x39
    3dfa:	fe c0       	rjmp	.+508    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3dfc:	8d e2       	ldi	r24, 0x2D	; 45
    3dfe:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3e02:	88 23       	and	r24, r24
    3e04:	09 f0       	breq	.+2      	; 0x3e08 <H_PushButton_U8_PushButtonRead+0x26a>
    3e06:	f8 c0       	rjmp	.+496    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	a8 e4       	ldi	r26, 0x48	; 72
    3e0e:	b2 e4       	ldi	r27, 0x42	; 66
    3e10:	89 8f       	std	Y+25, r24	; 0x19
    3e12:	9a 8f       	std	Y+26, r25	; 0x1a
    3e14:	ab 8f       	std	Y+27, r26	; 0x1b
    3e16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e18:	69 8d       	ldd	r22, Y+25	; 0x19
    3e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	4a e7       	ldi	r20, 0x7A	; 122
    3e26:	55 e4       	ldi	r21, 0x45	; 69
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	8d 8b       	std	Y+21, r24	; 0x15
    3e32:	9e 8b       	std	Y+22, r25	; 0x16
    3e34:	af 8b       	std	Y+23, r26	; 0x17
    3e36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e38:	6d 89       	ldd	r22, Y+21	; 0x15
    3e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	2c f4       	brge	.+10     	; 0x3e5a <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	9c 8b       	std	Y+20, r25	; 0x14
    3e56:	8b 8b       	std	Y+19, r24	; 0x13
    3e58:	3f c0       	rjmp	.+126    	; 0x3ed8 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    3e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e60:	98 8d       	ldd	r25, Y+24	; 0x18
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	3f ef       	ldi	r19, 0xFF	; 255
    3e66:	4f e7       	ldi	r20, 0x7F	; 127
    3e68:	57 e4       	ldi	r21, 0x47	; 71
    3e6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e6e:	18 16       	cp	r1, r24
    3e70:	4c f5       	brge	.+82     	; 0x3ec4 <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e72:	69 8d       	ldd	r22, Y+25	; 0x19
    3e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e2       	ldi	r20, 0x20	; 32
    3e80:	51 e4       	ldi	r21, 0x41	; 65
    3e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	bc 01       	movw	r22, r24
    3e8c:	cd 01       	movw	r24, r26
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9c 8b       	std	Y+20, r25	; 0x14
    3e98:	8b 8b       	std	Y+19, r24	; 0x13
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <H_PushButton_U8_PushButtonRead+0x31c>
    3e9c:	80 e9       	ldi	r24, 0x90	; 144
    3e9e:	91 e0       	ldi	r25, 0x01	; 1
    3ea0:	9a 8b       	std	Y+18, r25	; 0x12
    3ea2:	89 8b       	std	Y+17, r24	; 0x11
    3ea4:	89 89       	ldd	r24, Y+17	; 0x11
    3ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <H_PushButton_U8_PushButtonRead+0x30a>
    3eac:	9a 8b       	std	Y+18, r25	; 0x12
    3eae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    3eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	9c 8b       	std	Y+20, r25	; 0x14
    3eb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eba:	8b 89       	ldd	r24, Y+19	; 0x13
    3ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	69 f7       	brne	.-38     	; 0x3e9c <H_PushButton_U8_PushButtonRead+0x2fe>
    3ec2:	14 c0       	rjmp	.+40     	; 0x3eec <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eca:	98 8d       	ldd	r25, Y+24	; 0x18
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9c 8b       	std	Y+20, r25	; 0x14
    3ed6:	8b 8b       	std	Y+19, r24	; 0x13
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	98 8b       	std	Y+16, r25	; 0x10
    3ede:	8f 87       	std	Y+15, r24	; 0x0f
    3ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee2:	98 89       	ldd	r25, Y+16	; 0x10
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <H_PushButton_U8_PushButtonRead+0x346>
    3ee8:	98 8b       	std	Y+16, r25	; 0x10
    3eea:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3eec:	8d e2       	ldi	r24, 0x2D	; 45
    3eee:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <H_PushButton_U8_PushButtonRead+0x35a>
    3ef6:	80 c0       	rjmp	.+256    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3ef8:	19 ae       	std	Y+57, r1	; 0x39
    3efa:	7e c0       	rjmp	.+252    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3efc:	8b e2       	ldi	r24, 0x2B	; 43
    3efe:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3f02:	88 23       	and	r24, r24
    3f04:	09 f0       	breq	.+2      	; 0x3f08 <H_PushButton_U8_PushButtonRead+0x36a>
    3f06:	78 c0       	rjmp	.+240    	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a8 e4       	ldi	r26, 0x48	; 72
    3f0e:	b2 e4       	ldi	r27, 0x42	; 66
    3f10:	8b 87       	std	Y+11, r24	; 0x0b
    3f12:	9c 87       	std	Y+12, r25	; 0x0c
    3f14:	ad 87       	std	Y+13, r26	; 0x0d
    3f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	4a e7       	ldi	r20, 0x7A	; 122
    3f26:	55 e4       	ldi	r21, 0x45	; 69
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	8f 83       	std	Y+7, r24	; 0x07
    3f32:	98 87       	std	Y+8, r25	; 0x08
    3f34:	a9 87       	std	Y+9, r26	; 0x09
    3f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f38:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3a:	78 85       	ldd	r23, Y+8	; 0x08
    3f3c:	89 85       	ldd	r24, Y+9	; 0x09
    3f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e8       	ldi	r20, 0x80	; 128
    3f46:	5f e3       	ldi	r21, 0x3F	; 63
    3f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f4c:	88 23       	and	r24, r24
    3f4e:	2c f4       	brge	.+10     	; 0x3f5a <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	9e 83       	std	Y+6, r25	; 0x06
    3f56:	8d 83       	std	Y+5, r24	; 0x05
    3f58:	3f c0       	rjmp	.+126    	; 0x3fd8 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    3f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5c:	78 85       	ldd	r23, Y+8	; 0x08
    3f5e:	89 85       	ldd	r24, Y+9	; 0x09
    3f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	3f ef       	ldi	r19, 0xFF	; 255
    3f66:	4f e7       	ldi	r20, 0x7F	; 127
    3f68:	57 e4       	ldi	r21, 0x47	; 71
    3f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f6e:	18 16       	cp	r1, r24
    3f70:	4c f5       	brge	.+82     	; 0x3fc4 <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	40 e2       	ldi	r20, 0x20	; 32
    3f80:	51 e4       	ldi	r21, 0x41	; 65
    3f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	bc 01       	movw	r22, r24
    3f8c:	cd 01       	movw	r24, r26
    3f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	9e 83       	std	Y+6, r25	; 0x06
    3f98:	8d 83       	std	Y+5, r24	; 0x05
    3f9a:	0f c0       	rjmp	.+30     	; 0x3fba <H_PushButton_U8_PushButtonRead+0x41c>
    3f9c:	80 e9       	ldi	r24, 0x90	; 144
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	9c 83       	std	Y+4, r25	; 0x04
    3fa2:	8b 83       	std	Y+3, r24	; 0x03
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <H_PushButton_U8_PushButtonRead+0x40a>
    3fac:	9c 83       	std	Y+4, r25	; 0x04
    3fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	9e 83       	std	Y+6, r25	; 0x06
    3fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fba:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fbe:	00 97       	sbiw	r24, 0x00	; 0
    3fc0:	69 f7       	brne	.-38     	; 0x3f9c <H_PushButton_U8_PushButtonRead+0x3fe>
    3fc2:	14 c0       	rjmp	.+40     	; 0x3fec <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc6:	78 85       	ldd	r23, Y+8	; 0x08
    3fc8:	89 85       	ldd	r24, Y+9	; 0x09
    3fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	9e 83       	std	Y+6, r25	; 0x06
    3fd6:	8d 83       	std	Y+5, r24	; 0x05
    3fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fda:	9e 81       	ldd	r25, Y+6	; 0x06
    3fdc:	9a 83       	std	Y+2, r25	; 0x02
    3fde:	89 83       	std	Y+1, r24	; 0x01
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <H_PushButton_U8_PushButtonRead+0x446>
    3fe8:	9a 83       	std	Y+2, r25	; 0x02
    3fea:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3fec:	8b e2       	ldi	r24, 0x2B	; 43
    3fee:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    3ff2:	88 23       	and	r24, r24
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3ff6:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    3ff8:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3ffa:	ec 96       	adiw	r28, 0x3c	; 60
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <M_Timer_Void_TimerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
    4014:	a3 e5       	ldi	r26, 0x53	; 83
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	e3 e5       	ldi	r30, 0x53	; 83
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	80 81       	ld	r24, Z
    401e:	8f 7b       	andi	r24, 0xBF	; 191
    4020:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
    4022:	a3 e5       	ldi	r26, 0x53	; 83
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	e3 e5       	ldi	r30, 0x53	; 83
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	87 7f       	andi	r24, 0xF7	; 247
    402e:	8c 93       	st	X, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
    4030:	a9 e5       	ldi	r26, 0x59	; 89
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e9 e5       	ldi	r30, 0x59	; 89
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	81 60       	ori	r24, 0x01	; 1
    403c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <M_Timer_Void_TimerSetTime>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
    404c:	2c 97       	sbiw	r28, 0x0c	; 12
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	f8 94       	cli
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	cd bf       	out	0x3d, r28	; 61
    4058:	69 87       	std	Y+9, r22	; 0x09
    405a:	7a 87       	std	Y+10, r23	; 0x0a
    405c:	8b 87       	std	Y+11, r24	; 0x0b
    405e:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
    4060:	80 e4       	ldi	r24, 0x40	; 64
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	a0 e0       	ldi	r26, 0x00	; 0
    4066:	b0 e0       	ldi	r27, 0x00	; 0
    4068:	8d 83       	std	Y+5, r24	; 0x05
    406a:	9e 83       	std	Y+6, r25	; 0x06
    406c:	af 83       	std	Y+7, r26	; 0x07
    406e:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
    4070:	89 85       	ldd	r24, Y+9	; 0x09
    4072:	9a 85       	ldd	r25, Y+10	; 0x0a
    4074:	ab 85       	ldd	r26, Y+11	; 0x0b
    4076:	bc 85       	ldd	r27, Y+12	; 0x0c
    4078:	28 ee       	ldi	r18, 0xE8	; 232
    407a:	33 e0       	ldi	r19, 0x03	; 3
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	0e 94 6d 22 	call	0x44da	; 0x44da <__mulsi3>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	2d 81       	ldd	r18, Y+5	; 0x05
    408e:	3e 81       	ldd	r19, Y+6	; 0x06
    4090:	4f 81       	ldd	r20, Y+7	; 0x07
    4092:	58 85       	ldd	r21, Y+8	; 0x08
    4094:	bc 01       	movw	r22, r24
    4096:	cd 01       	movw	r24, r26
    4098:	0e 94 98 22 	call	0x4530	; 0x4530 <__udivmodsi4>
    409c:	da 01       	movw	r26, r20
    409e:	c9 01       	movw	r24, r18
    40a0:	89 83       	std	Y+1, r24	; 0x01
    40a2:	9a 83       	std	Y+2, r25	; 0x02
    40a4:	ab 83       	std	Y+3, r26	; 0x03
    40a6:	bc 83       	std	Y+4, r27	; 0x04

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
    40a8:	89 81       	ldd	r24, Y+1	; 0x01
    40aa:	9a 81       	ldd	r25, Y+2	; 0x02
    40ac:	ab 81       	ldd	r26, Y+3	; 0x03
    40ae:	bc 81       	ldd	r27, Y+4	; 0x04
    40b0:	89 2f       	mov	r24, r25
    40b2:	9a 2f       	mov	r25, r26
    40b4:	ab 2f       	mov	r26, r27
    40b6:	bb 27       	eor	r27, r27
    40b8:	80 93 fd 01 	sts	0x01FD, r24
    40bc:	90 93 fe 01 	sts	0x01FE, r25
    40c0:	a0 93 ff 01 	sts	0x01FF, r26
    40c4:	b0 93 00 02 	sts	0x0200, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	80 93 05 02 	sts	0x0205, r24
	if(Timer_U8_RemTicks != 0)
    40ce:	80 91 05 02 	lds	r24, 0x0205
    40d2:	88 23       	and	r24, r24
    40d4:	c9 f0       	breq	.+50     	; 0x4108 <M_Timer_Void_TimerSetTime+0xc4>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    40d6:	e2 e5       	ldi	r30, 0x52	; 82
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 91 05 02 	lds	r24, 0x0205
    40de:	81 95       	neg	r24
    40e0:	80 83       	st	Z, r24
		Timer_U32_NumOfOV++;
    40e2:	80 91 fd 01 	lds	r24, 0x01FD
    40e6:	90 91 fe 01 	lds	r25, 0x01FE
    40ea:	a0 91 ff 01 	lds	r26, 0x01FF
    40ee:	b0 91 00 02 	lds	r27, 0x0200
    40f2:	01 96       	adiw	r24, 0x01	; 1
    40f4:	a1 1d       	adc	r26, r1
    40f6:	b1 1d       	adc	r27, r1
    40f8:	80 93 fd 01 	sts	0x01FD, r24
    40fc:	90 93 fe 01 	sts	0x01FE, r25
    4100:	a0 93 ff 01 	sts	0x01FF, r26
    4104:	b0 93 00 02 	sts	0x0200, r27
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
    4108:	2c 96       	adiw	r28, 0x0c	; 12
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <M_Timer_Void_TimerStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	00 d0       	rcall	.+0      	; 0x4120 <M_Timer_Void_TimerStart+0x6>
    4120:	0f 92       	push	r0
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	28 2f       	mov	r18, r24
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	3b 83       	std	Y+3, r19	; 0x03
    4130:	2a 83       	std	Y+2, r18	; 0x02
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	9b 81       	ldd	r25, Y+3	; 0x03
    4136:	00 97       	sbiw	r24, 0x00	; 0
    4138:	31 f0       	breq	.+12     	; 0x4146 <M_Timer_Void_TimerStart+0x2c>
    413a:	2a 81       	ldd	r18, Y+2	; 0x02
    413c:	3b 81       	ldd	r19, Y+3	; 0x03
    413e:	21 30       	cpi	r18, 0x01	; 1
    4140:	31 05       	cpc	r19, r1
    4142:	b9 f0       	breq	.+46     	; 0x4172 <M_Timer_Void_TimerStart+0x58>
    4144:	2b c0       	rjmp	.+86     	; 0x419c <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
    4146:	a3 e5       	ldi	r26, 0x53	; 83
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	e3 e5       	ldi	r30, 0x53	; 83
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	80 81       	ld	r24, Z
    4150:	81 60       	ori	r24, 0x01	; 1
    4152:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
    4154:	a3 e5       	ldi	r26, 0x53	; 83
    4156:	b0 e0       	ldi	r27, 0x00	; 0
    4158:	e3 e5       	ldi	r30, 0x53	; 83
    415a:	f0 e0       	ldi	r31, 0x00	; 0
    415c:	80 81       	ld	r24, Z
    415e:	8d 7f       	andi	r24, 0xFD	; 253
    4160:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
    4162:	a3 e5       	ldi	r26, 0x53	; 83
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	e3 e5       	ldi	r30, 0x53	; 83
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	80 81       	ld	r24, Z
    416c:	84 60       	ori	r24, 0x04	; 4
    416e:	8c 93       	st	X, r24
    4170:	15 c0       	rjmp	.+42     	; 0x419c <M_Timer_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
    4172:	ae e4       	ldi	r26, 0x4E	; 78
    4174:	b0 e0       	ldi	r27, 0x00	; 0
    4176:	ee e4       	ldi	r30, 0x4E	; 78
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	80 81       	ld	r24, Z
    417c:	81 60       	ori	r24, 0x01	; 1
    417e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    4180:	ae e4       	ldi	r26, 0x4E	; 78
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	ee e4       	ldi	r30, 0x4E	; 78
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	8d 7f       	andi	r24, 0xFD	; 253
    418c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    418e:	ae e4       	ldi	r26, 0x4E	; 78
    4190:	b0 e0       	ldi	r27, 0x00	; 0
    4192:	ee e4       	ldi	r30, 0x4E	; 78
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	84 60       	ori	r24, 0x04	; 4
    419a:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <M_Timer_Void_TimerStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <M_Timer_Void_TimerStop+0x6>
    41ae:	0f 92       	push	r0
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    41b4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	3b 83       	std	Y+3, r19	; 0x03
    41be:	2a 83       	std	Y+2, r18	; 0x02
    41c0:	8a 81       	ldd	r24, Y+2	; 0x02
    41c2:	9b 81       	ldd	r25, Y+3	; 0x03
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	31 f0       	breq	.+12     	; 0x41d4 <M_Timer_Void_TimerStop+0x2c>
    41c8:	2a 81       	ldd	r18, Y+2	; 0x02
    41ca:	3b 81       	ldd	r19, Y+3	; 0x03
    41cc:	21 30       	cpi	r18, 0x01	; 1
    41ce:	31 05       	cpc	r19, r1
    41d0:	b9 f0       	breq	.+46     	; 0x4200 <M_Timer_Void_TimerStop+0x58>
    41d2:	2b c0       	rjmp	.+86     	; 0x422a <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    41d4:	a3 e5       	ldi	r26, 0x53	; 83
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e3 e5       	ldi	r30, 0x53	; 83
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	8e 7f       	andi	r24, 0xFE	; 254
    41e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    41e2:	a3 e5       	ldi	r26, 0x53	; 83
    41e4:	b0 e0       	ldi	r27, 0x00	; 0
    41e6:	e3 e5       	ldi	r30, 0x53	; 83
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	80 81       	ld	r24, Z
    41ec:	8d 7f       	andi	r24, 0xFD	; 253
    41ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    41f0:	a3 e5       	ldi	r26, 0x53	; 83
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	e3 e5       	ldi	r30, 0x53	; 83
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	8b 7f       	andi	r24, 0xFB	; 251
    41fc:	8c 93       	st	X, r24
    41fe:	15 c0       	rjmp	.+42     	; 0x422a <M_Timer_Void_TimerStop+0x82>

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    4200:	ae e4       	ldi	r26, 0x4E	; 78
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	ee e4       	ldi	r30, 0x4E	; 78
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	8e 7f       	andi	r24, 0xFE	; 254
    420c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    420e:	ae e4       	ldi	r26, 0x4E	; 78
    4210:	b0 e0       	ldi	r27, 0x00	; 0
    4212:	ee e4       	ldi	r30, 0x4E	; 78
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	80 81       	ld	r24, Z
    4218:	8d 7f       	andi	r24, 0xFD	; 253
    421a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    421c:	ae e4       	ldi	r26, 0x4E	; 78
    421e:	b0 e0       	ldi	r27, 0x00	; 0
    4220:	ee e4       	ldi	r30, 0x4E	; 78
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	80 81       	ld	r24, Z
    4226:	8b 7f       	andi	r24, 0xFB	; 251
    4228:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	cf 91       	pop	r28
    4232:	df 91       	pop	r29
    4234:	08 95       	ret

00004236 <M_Timer_Void_PWMInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    4236:	df 93       	push	r29
    4238:	cf 93       	push	r28
    423a:	00 d0       	rcall	.+0      	; 0x423c <M_Timer_Void_PWMInit+0x6>
    423c:	0f 92       	push	r0
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	28 2f       	mov	r18, r24
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	3b 83       	std	Y+3, r19	; 0x03
    424c:	2a 83       	std	Y+2, r18	; 0x02
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	9b 81       	ldd	r25, Y+3	; 0x03
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	31 f0       	breq	.+12     	; 0x4262 <M_Timer_Void_PWMInit+0x2c>
    4256:	2a 81       	ldd	r18, Y+2	; 0x02
    4258:	3b 81       	ldd	r19, Y+3	; 0x03
    425a:	21 30       	cpi	r18, 0x01	; 1
    425c:	31 05       	cpc	r19, r1
    425e:	a1 f0       	breq	.+40     	; 0x4288 <M_Timer_Void_PWMInit+0x52>
    4260:	47 c0       	rjmp	.+142    	; 0x42f0 <M_Timer_Void_PWMInit+0xba>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    4262:	87 e1       	ldi	r24, 0x17	; 23
    4264:	61 e0       	ldi	r22, 0x01	; 1
    4266:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    426a:	a3 e5       	ldi	r26, 0x53	; 83
    426c:	b0 e0       	ldi	r27, 0x00	; 0
    426e:	e3 e5       	ldi	r30, 0x53	; 83
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	80 81       	ld	r24, Z
    4274:	8f 7e       	andi	r24, 0xEF	; 239
    4276:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    4278:	a3 e5       	ldi	r26, 0x53	; 83
    427a:	b0 e0       	ldi	r27, 0x00	; 0
    427c:	e3 e5       	ldi	r30, 0x53	; 83
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	80 62       	ori	r24, 0x20	; 32
    4284:	8c 93       	st	X, r24
    4286:	34 c0       	rjmp	.+104    	; 0x42f0 <M_Timer_Void_PWMInit+0xba>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    4288:	8d e2       	ldi	r24, 0x2D	; 45
    428a:	61 e0       	ldi	r22, 0x01	; 1
    428c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    4290:	af e4       	ldi	r26, 0x4F	; 79
    4292:	b0 e0       	ldi	r27, 0x00	; 0
    4294:	ef e4       	ldi	r30, 0x4F	; 79
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	80 81       	ld	r24, Z
    429a:	8e 7f       	andi	r24, 0xFE	; 254
    429c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    429e:	af e4       	ldi	r26, 0x4F	; 79
    42a0:	b0 e0       	ldi	r27, 0x00	; 0
    42a2:	ef e4       	ldi	r30, 0x4F	; 79
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	80 81       	ld	r24, Z
    42a8:	82 60       	ori	r24, 0x02	; 2
    42aa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    42ac:	ae e4       	ldi	r26, 0x4E	; 78
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	ee e4       	ldi	r30, 0x4E	; 78
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	80 81       	ld	r24, Z
    42b6:	88 60       	ori	r24, 0x08	; 8
    42b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    42ba:	ae e4       	ldi	r26, 0x4E	; 78
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	ee e4       	ldi	r30, 0x4E	; 78
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	80 81       	ld	r24, Z
    42c4:	80 61       	ori	r24, 0x10	; 16
    42c6:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    42c8:	af e4       	ldi	r26, 0x4F	; 79
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	ef e4       	ldi	r30, 0x4F	; 79
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	8f 7b       	andi	r24, 0xBF	; 191
    42d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    42d6:	af e4       	ldi	r26, 0x4F	; 79
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	ef e4       	ldi	r30, 0x4F	; 79
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	80 81       	ld	r24, Z
    42e0:	80 68       	ori	r24, 0x80	; 128
    42e2:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    42e4:	e6 e4       	ldi	r30, 0x46	; 70
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	84 e0       	ldi	r24, 0x04	; 4
    42ea:	91 e0       	ldi	r25, 0x01	; 1
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	cf 91       	pop	r28
    42f8:	df 91       	pop	r29
    42fa:	08 95       	ret

000042fc <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    42fc:	0f 93       	push	r16
    42fe:	1f 93       	push	r17
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	27 97       	sbiw	r28, 0x07	; 7
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	f8 94       	cli
    430e:	de bf       	out	0x3e, r29	; 62
    4310:	0f be       	out	0x3f, r0	; 63
    4312:	cd bf       	out	0x3d, r28	; 61
    4314:	89 83       	std	Y+1, r24	; 0x01
    4316:	4a 83       	std	Y+2, r20	; 0x02
    4318:	5b 83       	std	Y+3, r21	; 0x03
    431a:	6c 83       	std	Y+4, r22	; 0x04
    431c:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	3f 83       	std	Y+7, r19	; 0x07
    4326:	2e 83       	std	Y+6, r18	; 0x06
    4328:	8e 81       	ldd	r24, Y+6	; 0x06
    432a:	9f 81       	ldd	r25, Y+7	; 0x07
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	d9 f1       	breq	.+118    	; 0x43a6 <M_Timer_Void_PWMSetDutyCycle+0xaa>
    4330:	ee 81       	ldd	r30, Y+6	; 0x06
    4332:	ff 81       	ldd	r31, Y+7	; 0x07
    4334:	e1 30       	cpi	r30, 0x01	; 1
    4336:	f1 05       	cpc	r31, r1
    4338:	b1 f5       	brne	.+108    	; 0x43a6 <M_Timer_Void_PWMSetDutyCycle+0xaa>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    433a:	0a e4       	ldi	r16, 0x4A	; 74
    433c:	10 e0       	ldi	r17, 0x00	; 0
    433e:	e6 e4       	ldi	r30, 0x46	; 70
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	cc 01       	movw	r24, r24
    4348:	a0 e0       	ldi	r26, 0x00	; 0
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	bc 01       	movw	r22, r24
    434e:	cd 01       	movw	r24, r26
    4350:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	bc 01       	movw	r22, r24
    435a:	cd 01       	movw	r24, r26
    435c:	2a 81       	ldd	r18, Y+2	; 0x02
    435e:	3b 81       	ldd	r19, Y+3	; 0x03
    4360:	4c 81       	ldd	r20, Y+4	; 0x04
    4362:	5d 81       	ldd	r21, Y+5	; 0x05
    4364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	48 ec       	ldi	r20, 0xC8	; 200
    4376:	52 e4       	ldi	r21, 0x42	; 66
    4378:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e8       	ldi	r20, 0x80	; 128
    438a:	5f e3       	ldi	r21, 0x3F	; 63
    438c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	bc 01       	movw	r22, r24
    4396:	cd 01       	movw	r24, r26
    4398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	f8 01       	movw	r30, r16
    43a2:	91 83       	std	Z+1, r25	; 0x01
    43a4:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    43a6:	27 96       	adiw	r28, 0x07	; 7
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	cf 91       	pop	r28
    43b4:	df 91       	pop	r29
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	08 95       	ret

000043bc <M_Timer_Void_PWMStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    43bc:	df 93       	push	r29
    43be:	cf 93       	push	r28
    43c0:	0f 92       	push	r0
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	0e 94 8d 20 	call	0x411a	; 0x411a <M_Timer_Void_TimerStart>
}
    43ce:	0f 90       	pop	r0
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <M_Timer_Void_PWMStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	0f 92       	push	r0
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    43e2:	89 81       	ldd	r24, Y+1	; 0x01
    43e4:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <M_Timer_Void_TimerStop>
}
    43e8:	0f 90       	pop	r0
    43ea:	cf 91       	pop	r28
    43ec:	df 91       	pop	r29
    43ee:	08 95       	ret

000043f0 <M_Timer_Void_SetCallBack>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <M_Timer_Void_SetCallBack+0x6>
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	9a 83       	std	Y+2, r25	; 0x02
    43fc:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	9a 81       	ldd	r25, Y+2	; 0x02
    4402:	90 93 14 02 	sts	0x0214, r25
    4406:	80 93 13 02 	sts	0x0213, r24
}
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	cf 91       	pop	r28
    4410:	df 91       	pop	r29
    4412:	08 95       	ret

00004414 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    4414:	1f 92       	push	r1
    4416:	0f 92       	push	r0
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	0f 92       	push	r0
    441c:	11 24       	eor	r1, r1
    441e:	2f 93       	push	r18
    4420:	3f 93       	push	r19
    4422:	4f 93       	push	r20
    4424:	5f 93       	push	r21
    4426:	6f 93       	push	r22
    4428:	7f 93       	push	r23
    442a:	8f 93       	push	r24
    442c:	9f 93       	push	r25
    442e:	af 93       	push	r26
    4430:	bf 93       	push	r27
    4432:	ef 93       	push	r30
    4434:	ff 93       	push	r31
    4436:	df 93       	push	r29
    4438:	cf 93       	push	r28
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    443e:	80 91 06 02 	lds	r24, 0x0206
    4442:	90 91 07 02 	lds	r25, 0x0207
    4446:	a0 91 08 02 	lds	r26, 0x0208
    444a:	b0 91 09 02 	lds	r27, 0x0209
    444e:	01 96       	adiw	r24, 0x01	; 1
    4450:	a1 1d       	adc	r26, r1
    4452:	b1 1d       	adc	r27, r1
    4454:	80 93 06 02 	sts	0x0206, r24
    4458:	90 93 07 02 	sts	0x0207, r25
    445c:	a0 93 08 02 	sts	0x0208, r26
    4460:	b0 93 09 02 	sts	0x0209, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    4464:	20 91 06 02 	lds	r18, 0x0206
    4468:	30 91 07 02 	lds	r19, 0x0207
    446c:	40 91 08 02 	lds	r20, 0x0208
    4470:	50 91 09 02 	lds	r21, 0x0209
    4474:	80 91 fd 01 	lds	r24, 0x01FD
    4478:	90 91 fe 01 	lds	r25, 0x01FE
    447c:	a0 91 ff 01 	lds	r26, 0x01FF
    4480:	b0 91 00 02 	lds	r27, 0x0200
    4484:	28 17       	cp	r18, r24
    4486:	39 07       	cpc	r19, r25
    4488:	4a 07       	cpc	r20, r26
    448a:	5b 07       	cpc	r21, r27
    448c:	99 f4       	brne	.+38     	; 0x44b4 <__vector_11+0xa0>
	{
		Timer_CallBack();
    448e:	e0 91 13 02 	lds	r30, 0x0213
    4492:	f0 91 14 02 	lds	r31, 0x0214
    4496:	09 95       	icall
		Local_U32_Counter = 0;
    4498:	10 92 06 02 	sts	0x0206, r1
    449c:	10 92 07 02 	sts	0x0207, r1
    44a0:	10 92 08 02 	sts	0x0208, r1
    44a4:	10 92 09 02 	sts	0x0209, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    44a8:	e2 e5       	ldi	r30, 0x52	; 82
    44aa:	f0 e0       	ldi	r31, 0x00	; 0
    44ac:	80 91 05 02 	lds	r24, 0x0205
    44b0:	81 95       	neg	r24
    44b2:	80 83       	st	Z, r24
	}
}
    44b4:	cf 91       	pop	r28
    44b6:	df 91       	pop	r29
    44b8:	ff 91       	pop	r31
    44ba:	ef 91       	pop	r30
    44bc:	bf 91       	pop	r27
    44be:	af 91       	pop	r26
    44c0:	9f 91       	pop	r25
    44c2:	8f 91       	pop	r24
    44c4:	7f 91       	pop	r23
    44c6:	6f 91       	pop	r22
    44c8:	5f 91       	pop	r21
    44ca:	4f 91       	pop	r20
    44cc:	3f 91       	pop	r19
    44ce:	2f 91       	pop	r18
    44d0:	0f 90       	pop	r0
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	0f 90       	pop	r0
    44d6:	1f 90       	pop	r1
    44d8:	18 95       	reti

000044da <__mulsi3>:
    44da:	62 9f       	mul	r22, r18
    44dc:	d0 01       	movw	r26, r0
    44de:	73 9f       	mul	r23, r19
    44e0:	f0 01       	movw	r30, r0
    44e2:	82 9f       	mul	r24, r18
    44e4:	e0 0d       	add	r30, r0
    44e6:	f1 1d       	adc	r31, r1
    44e8:	64 9f       	mul	r22, r20
    44ea:	e0 0d       	add	r30, r0
    44ec:	f1 1d       	adc	r31, r1
    44ee:	92 9f       	mul	r25, r18
    44f0:	f0 0d       	add	r31, r0
    44f2:	83 9f       	mul	r24, r19
    44f4:	f0 0d       	add	r31, r0
    44f6:	74 9f       	mul	r23, r20
    44f8:	f0 0d       	add	r31, r0
    44fa:	65 9f       	mul	r22, r21
    44fc:	f0 0d       	add	r31, r0
    44fe:	99 27       	eor	r25, r25
    4500:	72 9f       	mul	r23, r18
    4502:	b0 0d       	add	r27, r0
    4504:	e1 1d       	adc	r30, r1
    4506:	f9 1f       	adc	r31, r25
    4508:	63 9f       	mul	r22, r19
    450a:	b0 0d       	add	r27, r0
    450c:	e1 1d       	adc	r30, r1
    450e:	f9 1f       	adc	r31, r25
    4510:	bd 01       	movw	r22, r26
    4512:	cf 01       	movw	r24, r30
    4514:	11 24       	eor	r1, r1
    4516:	08 95       	ret

00004518 <__udivmodqi4>:
    4518:	99 1b       	sub	r25, r25
    451a:	79 e0       	ldi	r23, 0x09	; 9
    451c:	04 c0       	rjmp	.+8      	; 0x4526 <__udivmodqi4_ep>

0000451e <__udivmodqi4_loop>:
    451e:	99 1f       	adc	r25, r25
    4520:	96 17       	cp	r25, r22
    4522:	08 f0       	brcs	.+2      	; 0x4526 <__udivmodqi4_ep>
    4524:	96 1b       	sub	r25, r22

00004526 <__udivmodqi4_ep>:
    4526:	88 1f       	adc	r24, r24
    4528:	7a 95       	dec	r23
    452a:	c9 f7       	brne	.-14     	; 0x451e <__udivmodqi4_loop>
    452c:	80 95       	com	r24
    452e:	08 95       	ret

00004530 <__udivmodsi4>:
    4530:	a1 e2       	ldi	r26, 0x21	; 33
    4532:	1a 2e       	mov	r1, r26
    4534:	aa 1b       	sub	r26, r26
    4536:	bb 1b       	sub	r27, r27
    4538:	fd 01       	movw	r30, r26
    453a:	0d c0       	rjmp	.+26     	; 0x4556 <__udivmodsi4_ep>

0000453c <__udivmodsi4_loop>:
    453c:	aa 1f       	adc	r26, r26
    453e:	bb 1f       	adc	r27, r27
    4540:	ee 1f       	adc	r30, r30
    4542:	ff 1f       	adc	r31, r31
    4544:	a2 17       	cp	r26, r18
    4546:	b3 07       	cpc	r27, r19
    4548:	e4 07       	cpc	r30, r20
    454a:	f5 07       	cpc	r31, r21
    454c:	20 f0       	brcs	.+8      	; 0x4556 <__udivmodsi4_ep>
    454e:	a2 1b       	sub	r26, r18
    4550:	b3 0b       	sbc	r27, r19
    4552:	e4 0b       	sbc	r30, r20
    4554:	f5 0b       	sbc	r31, r21

00004556 <__udivmodsi4_ep>:
    4556:	66 1f       	adc	r22, r22
    4558:	77 1f       	adc	r23, r23
    455a:	88 1f       	adc	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	1a 94       	dec	r1
    4560:	69 f7       	brne	.-38     	; 0x453c <__udivmodsi4_loop>
    4562:	60 95       	com	r22
    4564:	70 95       	com	r23
    4566:	80 95       	com	r24
    4568:	90 95       	com	r25
    456a:	9b 01       	movw	r18, r22
    456c:	ac 01       	movw	r20, r24
    456e:	bd 01       	movw	r22, r26
    4570:	cf 01       	movw	r24, r30
    4572:	08 95       	ret

00004574 <__divmodsi4>:
    4574:	97 fb       	bst	r25, 7
    4576:	09 2e       	mov	r0, r25
    4578:	05 26       	eor	r0, r21
    457a:	0e d0       	rcall	.+28     	; 0x4598 <__divmodsi4_neg1>
    457c:	57 fd       	sbrc	r21, 7
    457e:	04 d0       	rcall	.+8      	; 0x4588 <__divmodsi4_neg2>
    4580:	d7 df       	rcall	.-82     	; 0x4530 <__udivmodsi4>
    4582:	0a d0       	rcall	.+20     	; 0x4598 <__divmodsi4_neg1>
    4584:	00 1c       	adc	r0, r0
    4586:	38 f4       	brcc	.+14     	; 0x4596 <__divmodsi4_exit>

00004588 <__divmodsi4_neg2>:
    4588:	50 95       	com	r21
    458a:	40 95       	com	r20
    458c:	30 95       	com	r19
    458e:	21 95       	neg	r18
    4590:	3f 4f       	sbci	r19, 0xFF	; 255
    4592:	4f 4f       	sbci	r20, 0xFF	; 255
    4594:	5f 4f       	sbci	r21, 0xFF	; 255

00004596 <__divmodsi4_exit>:
    4596:	08 95       	ret

00004598 <__divmodsi4_neg1>:
    4598:	f6 f7       	brtc	.-4      	; 0x4596 <__divmodsi4_exit>
    459a:	90 95       	com	r25
    459c:	80 95       	com	r24
    459e:	70 95       	com	r23
    45a0:	61 95       	neg	r22
    45a2:	7f 4f       	sbci	r23, 0xFF	; 255
    45a4:	8f 4f       	sbci	r24, 0xFF	; 255
    45a6:	9f 4f       	sbci	r25, 0xFF	; 255
    45a8:	08 95       	ret

000045aa <__prologue_saves__>:
    45aa:	2f 92       	push	r2
    45ac:	3f 92       	push	r3
    45ae:	4f 92       	push	r4
    45b0:	5f 92       	push	r5
    45b2:	6f 92       	push	r6
    45b4:	7f 92       	push	r7
    45b6:	8f 92       	push	r8
    45b8:	9f 92       	push	r9
    45ba:	af 92       	push	r10
    45bc:	bf 92       	push	r11
    45be:	cf 92       	push	r12
    45c0:	df 92       	push	r13
    45c2:	ef 92       	push	r14
    45c4:	ff 92       	push	r15
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	cf 93       	push	r28
    45cc:	df 93       	push	r29
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
    45d2:	ca 1b       	sub	r28, r26
    45d4:	db 0b       	sbc	r29, r27
    45d6:	0f b6       	in	r0, 0x3f	; 63
    45d8:	f8 94       	cli
    45da:	de bf       	out	0x3e, r29	; 62
    45dc:	0f be       	out	0x3f, r0	; 63
    45de:	cd bf       	out	0x3d, r28	; 61
    45e0:	09 94       	ijmp

000045e2 <__epilogue_restores__>:
    45e2:	2a 88       	ldd	r2, Y+18	; 0x12
    45e4:	39 88       	ldd	r3, Y+17	; 0x11
    45e6:	48 88       	ldd	r4, Y+16	; 0x10
    45e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    45ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    45ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    45ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    45f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    45f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    45f4:	b9 84       	ldd	r11, Y+9	; 0x09
    45f6:	c8 84       	ldd	r12, Y+8	; 0x08
    45f8:	df 80       	ldd	r13, Y+7	; 0x07
    45fa:	ee 80       	ldd	r14, Y+6	; 0x06
    45fc:	fd 80       	ldd	r15, Y+5	; 0x05
    45fe:	0c 81       	ldd	r16, Y+4	; 0x04
    4600:	1b 81       	ldd	r17, Y+3	; 0x03
    4602:	aa 81       	ldd	r26, Y+2	; 0x02
    4604:	b9 81       	ldd	r27, Y+1	; 0x01
    4606:	ce 0f       	add	r28, r30
    4608:	d1 1d       	adc	r29, r1
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	ed 01       	movw	r28, r26
    4616:	08 95       	ret

00004618 <_exit>:
    4618:	f8 94       	cli

0000461a <__stop_program>:
    461a:	ff cf       	rjmp	.-2      	; 0x461a <__stop_program>
